{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"868083c75450e40dbe6aa5efddc5e920d0187a79","modified":1474176870000},{"_id":"source/favicon.ico","hash":"215b791a8afe7a068271caa6d18cf49fe98c0c28","modified":1476081059000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1474174151000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1474174151000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1474174151000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1474174151000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1474174151000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1474174151000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1474174151000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1474174151000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1474174151000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1474174151000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1474174151000},{"_id":"themes/next/_config.yml","hash":"4c8b5b3518a6aa8b09c5b58d1de6ba708d693a53","modified":1474529829000},{"_id":"source/_posts/hexo-Blog-SEO.md","hash":"d18b5172876280a726c5aeeab051d9c6db3e9d4a","modified":1474773000000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1475120336000},{"_id":"source/_posts/hexo-Blog-framework.md","hash":"e97ceb73546bd386cf19eb802510780aae07be6e","modified":1472967300000},{"_id":"source/_posts/hexo-Blog-interface.md","hash":"b7f9422bbf58ede0f283a29c1c3c3e12c803399f","modified":1473575340000},{"_id":"source/_posts/hexo-Blog-method.md","hash":"1e7f5a52701ebdfe35c82787cbe159e51a966083","modified":1474189260000},{"_id":"source/_posts/python-Scrapy-framework.md","hash":"5cec82c6339a58a252eb5c3a86b4e2c2fe8f7e63","modified":1475379540000},{"_id":"source/_posts/python-Scrapy-parser.md","hash":"182b85af2bd86a156966bf4b4e87ab6eced77ff1","modified":1476001740000},{"_id":"source/_posts/swift-APNS-aliyun.md","hash":"8bfa00cb03164488efb6cd2dcfac20dfca161125","modified":1472692860000},{"_id":"source/about/index.md","hash":"beef041cb4026f645f551412551ee7edf8610752","modified":1476081059000},{"_id":"source/categories/index.md","hash":"b830ecd9cf65a2342071c87f5429b696dd4d1167","modified":1476081059000},{"_id":"source/tags/index.md","hash":"465c4d251abdc18b9de0eeab532161694f084863","modified":1476081059000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1474174151000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1474174090000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1474174151000},{"_id":"themes/next/.git/index","hash":"9017d42d4e49f8a71220797c1a01ba1b0ee93adc","modified":1474174151000},{"_id":"themes/next/.git/packed-refs","hash":"5299dd07c22750af4a0d99f89ea2c8e2d52787e3","modified":1474174151000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1474174151000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1474174151000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1474174151000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1474174151000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1474174151000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1474174151000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1474174151000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1474174151000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1474174151000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1474174151000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1474174151000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1474174151000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1474174151000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1474174151000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1474174151000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1474174151000},{"_id":"themes/next/layout/_layout.swig","hash":"adfa27e3564fd987f26cf51ebe3cd73bc622e0b5","modified":1474338413000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1474174151000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1474174151000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1474191656000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1474174151000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1474174151000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1474191668000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1474174151000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1474174151000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1474174151000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1474174090000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1474174090000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1474174090000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1474174090000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1474174090000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1474174090000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1474174090000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1474174090000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1474174090000},{"_id":"themes/next/.git/logs/HEAD","hash":"7b1da945d334dcbb7b0e5bfa780eb8550b326127","modified":1474174151000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1474174090000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1474174151000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1474174151000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1474174151000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1474174151000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1474185512000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f5bbd1ff7565973eb41829d49f4fab1fec7022f4","modified":1474191664000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1474174151000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1474174151000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1474174151000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1474183573000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1474174151000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1474174151000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1474174151000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1474174151000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1474174151000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1474174151000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1474174151000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1474174151000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1474174151000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1474174151000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1474174151000},{"_id":"themes/next/source/images/.DS_Store","hash":"60f1b14d227b1133d119f97f05aa7cabddfd9394","modified":1474176884000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1474174151000},{"_id":"themes/next/source/images/avatar.png","hash":"b6f766a3b7fb8203bb5bcd856783a659c7a5be2d","modified":1473736145000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1474174151000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1474174151000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1474174151000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1474174151000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1474174151000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1474174151000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1474174151000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1474174151000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1474174151000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1474174151000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1474174151000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"7bb3a55009381daeee36cea7d1326fa8dd9c8370","modified":1474182334000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474174151000},{"_id":"themes/next/source/images/alipay.jpg","hash":"e4400fc22fe5f6a74e0d5bfe9b2e8cbb054d1106","modified":1474182393000},{"_id":"themes/next/.git/refs/heads/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1474174151000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1474174151000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1474174151000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1474174151000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1474174151000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1474174151000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1474174151000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1474174151000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1474174151000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1474174151000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1474174151000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1474174151000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1474174151000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1474174151000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1474174151000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1474174151000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"7ddd812011719caa9132f7fec70950efb1584f08","modified":1474528763000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1474174151000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1474174151000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1474174151000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1474174151000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1474174151000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1474174151000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1474174151000},{"_id":"themes/next/source/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1474338543000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1474174151000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1474174151000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1474174151000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1474174151000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1474174151000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1474174151000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1474174151000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1474174151000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1474174151000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1474174151000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"7b1da945d334dcbb7b0e5bfa780eb8550b326127","modified":1474174151000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1474174151000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1474174151000},{"_id":"themes/next/.git/objects/pack/pack-9c35dd2569afab397db073db4eeb1c3f4a48f886.idx","hash":"d0f1be4386480b15e5e8f48166f31675cfeff035","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1474174151000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1474525357000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1474174151000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1474174151000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1474174151000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1474174151000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1474174151000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1474174151000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1474174151000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1474174151000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1474174151000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1474174151000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1474174151000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1474174151000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"7b1da945d334dcbb7b0e5bfa780eb8550b326127","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1474174151000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1474174151000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1474174151000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1474174151000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1474174151000},{"_id":"themes/next/.git/objects/pack/pack-9c35dd2569afab397db073db4eeb1c3f4a48f886.pack","hash":"c87504504f6d620710e77b50a9b72815be02bf44","modified":1474174151000},{"_id":"public/baidusitemap.xml","hash":"b0e26e617c381a2106568d25d7d8cdcdb39540b2","modified":1476082648489},{"_id":"public/atom.xml","hash":"17017eb298550239482af6e6ad61267ee882df9d","modified":1476082648498},{"_id":"public/search.xml","hash":"5660154fb6a7844d9a0f8aece2435cc144e4e671","modified":1476082648499},{"_id":"public/sitemap.xml","hash":"6dbac404a9a10f4c019685108fc577c487463f63","modified":1476082648499},{"_id":"public/about/index.html","hash":"3169c9656948c1d0c00d10d96462df6942d6a8ce","modified":1476082648515},{"_id":"public/categories/index.html","hash":"1ff5dd08c21dc71f32af6c3cdd13508f3043b84b","modified":1476082648515},{"_id":"public/tags/index.html","hash":"ab72be79f2ffe58f6da9e6135e5988b80b6d1c7c","modified":1476082648515},{"_id":"public/2016/10/09/python-Scrapy-parser/index.html","hash":"4a2adca142bc6f8b9070028b61f1f4c9df5c475c","modified":1476082648515},{"_id":"public/2016/10/02/python-Scrapy-framework/index.html","hash":"4ff0742e12c55f1a4aa48d67be7fa4cb44e1f02b","modified":1476082648515},{"_id":"public/2016/09/25/hexo-Blog-SEO/index.html","hash":"c7e4d61f22f6b12a929b174b1912cfabe1e14cc2","modified":1476082648515},{"_id":"public/2016/09/18/hexo-Blog-method/index.html","hash":"f11886839ed7f84baa218ab442f50ff9c9265aad","modified":1476082648515},{"_id":"public/2016/09/11/hexo-Blog-interface/index.html","hash":"32c8c4a71487eb8e81325df34c0ada785552000d","modified":1476082648515},{"_id":"public/2016/09/04/hexo-Blog-framework/index.html","hash":"3b31984dda30cb2275b4d93919279425c908d36c","modified":1476082648515},{"_id":"public/2016/09/01/swift-APNS-aliyun/index.html","hash":"839a21ea79b3801401bdf72b6d04296c54f9bf75","modified":1476082648516},{"_id":"public/archives/index.html","hash":"08b0f28228919d0fd3c942c9562c3723b1ed46fc","modified":1476082648516},{"_id":"public/archives/2016/index.html","hash":"2a616e22702585bb1873d73c7b3cfacbc4267e01","modified":1476082648516},{"_id":"public/archives/2016/09/index.html","hash":"869576493c020d890a7e02daf0d299adb2961ae6","modified":1476082648516},{"_id":"public/archives/2016/10/index.html","hash":"6e633bc82cbbb3a0737aeafa7f2b251374284188","modified":1476082648516},{"_id":"public/categories/Blog/index.html","hash":"fad6191befa8e547831b1498cf77d0fc91e21eac","modified":1476082648516},{"_id":"public/categories/Scrapy/index.html","hash":"c42256e05f8f05447195a946a30742f1d4040997","modified":1476082648516},{"_id":"public/categories/APNS/index.html","hash":"6bb627bfeeaad5d5228cebcb05d08bed735b81ac","modified":1476082648516},{"_id":"public/index.html","hash":"62d1329d5a27a3878c85b0218f3d96e9844c1986","modified":1476082648517},{"_id":"public/tags/Hexo/index.html","hash":"5869763792b20f64944f5a34d08c7f430c4e22c5","modified":1476082648517},{"_id":"public/tags/Python/index.html","hash":"80ce4d69fe9632425228b6c9aeb257e157a32be5","modified":1476082648518},{"_id":"public/tags/Swift/index.html","hash":"8c88e46cbd893342d157914a91897c104456be94","modified":1476082648518},{"_id":"public/favicon.ico","hash":"215b791a8afe7a068271caa6d18cf49fe98c0c28","modified":1476082648529},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1476082648529},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1476082648529},{"_id":"public/images/avatar.png","hash":"b6f766a3b7fb8203bb5bcd856783a659c7a5be2d","modified":1476082648529},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1476082648529},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1476082648529},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1476082648529},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1476082648529},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1476082648529},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476082648530},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476082648530},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1476082648530},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1476082648530},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1476082648530},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1476082648530},{"_id":"public/images/wechatpay.jpg","hash":"7bb3a55009381daeee36cea7d1326fa8dd9c8370","modified":1476082648530},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1476082648530},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1476082648530},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476082648530},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476082648530},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476082648530},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476082648530},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476082648530},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476082648530},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476082648530},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1476082648530},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476082648531},{"_id":"public/images/alipay.jpg","hash":"e4400fc22fe5f6a74e0d5bfe9b2e8cbb054d1106","modified":1476082649377},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476082649380},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476082649385},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476082649385},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1476082649393},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1476082649393},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1476082649393},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1476082649393},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1476082649393},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1476082649393},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1476082649394},{"_id":"public/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1476082649394},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1476082649394},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1476082649394},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1476082649394},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1476082649394},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1476082649394},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1476082649394},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1476082649394},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1476082649394},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1476082649394},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1476082649394},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1476082649394},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1476082649394},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476082649394},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1476082649394},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1476082649394},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1476082649395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1476082649395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1476082649395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1476082649395},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1476082649395},{"_id":"public/css/main.css","hash":"58db4473672952cff1b96e22b655ee664875bc11","modified":1476082649395},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1476082649395},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1476082649395},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1476082649395},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1476082649395},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1476082649395},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1476082649395},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1476082649395},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1476082649395},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1476082649395},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476082649396},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1476082649414}],"Category":[{"name":"Blog","_id":"ciu3phvln0004xy2y8sj7e0yz"},{"name":"Scrapy","_id":"ciu3phvm7000lxy2ymumubog9"},{"name":"APNS","_id":"ciu3phvmf000txy2y4e9rj1qc"}],"Data":[],"Page":[{"title":"about","date":"2016-09-18T08:10:59.000Z","_content":"![]()","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-18 16:10:59\n---\n![]()","updated":"2016-10-10T06:30:59.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciu3phvlg0001xy2y16f5u43c","content":"<p><img src=\"\" alt=\"\"></p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/about/index.html\">https://millionaryearl.github.io/about/index.html</a></p>\n","excerpt":"","more":"<p><img src=\"\" alt=\"\"></p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/about/index.html\">https://millionaryearl.github.io/about/index.html</a></p>\n"},{"title":"categories","date":"2016-09-18T08:12:40.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-18 16:12:40\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-10-10T06:30:59.000Z","path":"categories/index.html","layout":"page","_id":"ciu3phvlk0003xy2y6e2je1p9","content":"<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/categories/index.html\">https://millionaryearl.github.io/categories/index.html</a></p>\n","excerpt":"","more":"<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/categories/index.html\">https://millionaryearl.github.io/categories/index.html</a></p>\n"},{"title":"All tags","date":"2016-09-18T08:12:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-09-18 16:12:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-10-10T06:30:59.000Z","path":"tags/index.html","layout":"page","_id":"ciu3phvrg000zxy2ymgo9yrnu","content":"<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/tags/index.html\">https://millionaryearl.github.io/tags/index.html</a></p>\n","excerpt":"","more":"<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/tags/index.html\">https://millionaryearl.github.io/tags/index.html</a></p>\n"}],"Post":[{"title":"Build Your Own Blog  - 个性化设置(三)","date":"2016-09-25T03:10:40.000Z","_content":"\n最近有小伙伴反映，啊那个兄台啊，你这个博客还算阔以，就是访问起来也忒麻烦了。百度和狗哥上找不捉，这个网址这么难记，小伙伴们不能日日瞻仰，很是为难呀。\n***新任务获得：配置SEO***\n\n<!--more-->\n\n## 搜索引擎优化\n### 修改公网网址\n这个其实还是属于前篇里说的基础键值配置，找到主工程目录里的 `_config.yml` 文件，然后修改\n\n    url: https://millionaryearl.github.io（改成你的域名）\n    \n至于域名购买么也简单得很，[狗爹][1] 或者 [阿里云][2] 上买一个好了么\n\n## 提交狗哥\n### 确认blog是否被收录。 \n打开[狗哥搜索引擎][3]，输入 `site:yourwebaddress`. 要有结果么就继续，没有么就要去查查你的网站是否有部署问题了\n\n### 验证网站\n通过验证网站，可以证明你是该域名的拥有者，可以做为站长管理自己的网站－添加子节点啊，查流量啊，访问量啊什么的。\n前往 [狗哥站长][4] 登陆后开始验证。\n![][5]\n\n### 选择验证方式\n验证方式有四种－ ***HTML标记***，***域名提供商***， ***Google Analytics(分析)*** 和 ***Google 跟踪代码管理器***。 这里我们使用第一种\n![][6]\n\n按照狗哥的要求，下载验证文件后，传到github里，再去浏览器里打开一下，那个验证按钮应该就亮了。都弄好之后，你就能看到自己的网站了\n![][7]\n\n### 上传sitemap\n简单点说，sitemap文件就是你的站点地图，做为引索可以很方便的把你的网站内容的组织架构告知狗哥和其他搜索引擎。至于这个sitemap从哪里来么，我们需要\n\n1. 安装插件\n\t```\n    npm install hexo-generator-sitemap --save\n   ```\n2. 在 **主题配置文件**`(/themes/next/_config.yml)`里添加\n   ```\n   sitemap:\n\tpath: sitemap.xml\n   ```\n3. 然后`hexo g`一下，你就能在工程主目录下看到 `sitemap.xml`文件了\n4. 最后回到狗哥站长的界面里，添加`sitemap.xml`的文件途径\n![][8]\n\n### 完成\n至此我们的工作就算完成了，等待差不多一天之后，你就可以在狗哥搜索你的博客名了，基本上第一个就是你的博客站啦\n![][9]\n\n## 提交百度\n这个因为github把百度爬虫给墙了，所以上面的路径对于百度走不通(会卡在网站验证那一步)。解决起来有点绕，核心思想是，通过cdn或者镜像托管，让百度爬虫可以抓取到我们的博客站。具体的实践攻略博主最近有点忙就先鸽了\n\n## 尾记\n\n至此，我们的博客站主体配置工作就算告一段落了，剩下的活儿就写写博客了。所以hexo篇，至此暂时完结，感觉兴趣的伙计可以给我留言。诸君，武运昌隆！\n![][10]\n\n[1]:https://www.godaddy.com/\n[2]:https://www.aliyun.com\n[3]:https://www.google.com\n[4]:https://www.google.com/webmasters/tools/home?hl=zh-CN\n[5]:https://cl.ly/0o2L3j1u2O2E/hexo_4_verifyWebHost.png\n[6]:https://cl.ly/0n3I3h1F2a0k/hexo_4_2.png\n[7]:https://cl.ly/0p0R2q3p3X3F/hexo_4_3.png\n[8]:https://cl.ly/2y3G2X1h1N1B/hexo_4_4.png\n[9]:https://cl.ly/0q2S3d2a1P1K/hexo_4_5.png\n[10]:https://cl.ly/03081Q2b3D1L/comic_lol.gif","source":"_posts/hexo-Blog-SEO.md","raw":"---\ntitle: Build Your Own Blog  - 个性化设置(三)\ndate: 2016-9-25 11:10:40\ntags: Hexo\ncategories: \"Blog\"\n---\n\n最近有小伙伴反映，啊那个兄台啊，你这个博客还算阔以，就是访问起来也忒麻烦了。百度和狗哥上找不捉，这个网址这么难记，小伙伴们不能日日瞻仰，很是为难呀。\n***新任务获得：配置SEO***\n\n<!--more-->\n\n## 搜索引擎优化\n### 修改公网网址\n这个其实还是属于前篇里说的基础键值配置，找到主工程目录里的 `_config.yml` 文件，然后修改\n\n    url: https://millionaryearl.github.io（改成你的域名）\n    \n至于域名购买么也简单得很，[狗爹][1] 或者 [阿里云][2] 上买一个好了么\n\n## 提交狗哥\n### 确认blog是否被收录。 \n打开[狗哥搜索引擎][3]，输入 `site:yourwebaddress`. 要有结果么就继续，没有么就要去查查你的网站是否有部署问题了\n\n### 验证网站\n通过验证网站，可以证明你是该域名的拥有者，可以做为站长管理自己的网站－添加子节点啊，查流量啊，访问量啊什么的。\n前往 [狗哥站长][4] 登陆后开始验证。\n![][5]\n\n### 选择验证方式\n验证方式有四种－ ***HTML标记***，***域名提供商***， ***Google Analytics(分析)*** 和 ***Google 跟踪代码管理器***。 这里我们使用第一种\n![][6]\n\n按照狗哥的要求，下载验证文件后，传到github里，再去浏览器里打开一下，那个验证按钮应该就亮了。都弄好之后，你就能看到自己的网站了\n![][7]\n\n### 上传sitemap\n简单点说，sitemap文件就是你的站点地图，做为引索可以很方便的把你的网站内容的组织架构告知狗哥和其他搜索引擎。至于这个sitemap从哪里来么，我们需要\n\n1. 安装插件\n\t```\n    npm install hexo-generator-sitemap --save\n   ```\n2. 在 **主题配置文件**`(/themes/next/_config.yml)`里添加\n   ```\n   sitemap:\n\tpath: sitemap.xml\n   ```\n3. 然后`hexo g`一下，你就能在工程主目录下看到 `sitemap.xml`文件了\n4. 最后回到狗哥站长的界面里，添加`sitemap.xml`的文件途径\n![][8]\n\n### 完成\n至此我们的工作就算完成了，等待差不多一天之后，你就可以在狗哥搜索你的博客名了，基本上第一个就是你的博客站啦\n![][9]\n\n## 提交百度\n这个因为github把百度爬虫给墙了，所以上面的路径对于百度走不通(会卡在网站验证那一步)。解决起来有点绕，核心思想是，通过cdn或者镜像托管，让百度爬虫可以抓取到我们的博客站。具体的实践攻略博主最近有点忙就先鸽了\n\n## 尾记\n\n至此，我们的博客站主体配置工作就算告一段落了，剩下的活儿就写写博客了。所以hexo篇，至此暂时完结，感觉兴趣的伙计可以给我留言。诸君，武运昌隆！\n![][10]\n\n[1]:https://www.godaddy.com/\n[2]:https://www.aliyun.com\n[3]:https://www.google.com\n[4]:https://www.google.com/webmasters/tools/home?hl=zh-CN\n[5]:https://cl.ly/0o2L3j1u2O2E/hexo_4_verifyWebHost.png\n[6]:https://cl.ly/0n3I3h1F2a0k/hexo_4_2.png\n[7]:https://cl.ly/0p0R2q3p3X3F/hexo_4_3.png\n[8]:https://cl.ly/2y3G2X1h1N1B/hexo_4_4.png\n[9]:https://cl.ly/0q2S3d2a1P1K/hexo_4_5.png\n[10]:https://cl.ly/03081Q2b3D1L/comic_lol.gif","slug":"hexo-Blog-SEO","published":1,"updated":"2016-09-25T03:10:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvlb0000xy2yojh8myph","content":"<p>最近有小伙伴反映，啊那个兄台啊，你这个博客还算阔以，就是访问起来也忒麻烦了。百度和狗哥上找不捉，这个网址这么难记，小伙伴们不能日日瞻仰，很是为难呀。<br><strong><em>新任务获得：配置SEO</em></strong></p>\n<a id=\"more\"></a>\n<h2 id=\"搜索引擎优化\"><a href=\"#搜索引擎优化\" class=\"headerlink\" title=\"搜索引擎优化\"></a>搜索引擎优化</h2><h3 id=\"修改公网网址\"><a href=\"#修改公网网址\" class=\"headerlink\" title=\"修改公网网址\"></a>修改公网网址</h3><p>这个其实还是属于前篇里说的基础键值配置，找到主工程目录里的 <code>_config.yml</code> 文件，然后修改</p>\n<pre><code>url: https://millionaryearl.github.io（改成你的域名）\n</code></pre><p>至于域名购买么也简单得很，<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"external\">狗爹</a> 或者 <a href=\"https://www.aliyun.com\" target=\"_blank\" rel=\"external\">阿里云</a> 上买一个好了么</p>\n<h2 id=\"提交狗哥\"><a href=\"#提交狗哥\" class=\"headerlink\" title=\"提交狗哥\"></a>提交狗哥</h2><h3 id=\"确认blog是否被收录。\"><a href=\"#确认blog是否被收录。\" class=\"headerlink\" title=\"确认blog是否被收录。\"></a>确认blog是否被收录。</h3><p>打开<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">狗哥搜索引擎</a>，输入 <code>site:yourwebaddress</code>. 要有结果么就继续，没有么就要去查查你的网站是否有部署问题了</p>\n<h3 id=\"验证网站\"><a href=\"#验证网站\" class=\"headerlink\" title=\"验证网站\"></a>验证网站</h3><p>通过验证网站，可以证明你是该域名的拥有者，可以做为站长管理自己的网站－添加子节点啊，查流量啊，访问量啊什么的。<br>前往 <a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"external\">狗哥站长</a> 登陆后开始验证。<br><img src=\"https://cl.ly/0o2L3j1u2O2E/hexo_4_verifyWebHost.png\" alt=\"\"></p>\n<h3 id=\"选择验证方式\"><a href=\"#选择验证方式\" class=\"headerlink\" title=\"选择验证方式\"></a>选择验证方式</h3><p>验证方式有四种－ <strong><em>HTML标记</em></strong>，<strong><em>域名提供商</em></strong>， <strong><em>Google Analytics(分析)</em></strong> 和 <strong><em>Google 跟踪代码管理器</em></strong>。 这里我们使用第一种<br><img src=\"https://cl.ly/0n3I3h1F2a0k/hexo_4_2.png\" alt=\"\"></p>\n<p>按照狗哥的要求，下载验证文件后，传到github里，再去浏览器里打开一下，那个验证按钮应该就亮了。都弄好之后，你就能看到自己的网站了<br><img src=\"https://cl.ly/0p0R2q3p3X3F/hexo_4_3.png\" alt=\"\"></p>\n<h3 id=\"上传sitemap\"><a href=\"#上传sitemap\" class=\"headerlink\" title=\"上传sitemap\"></a>上传sitemap</h3><p>简单点说，sitemap文件就是你的站点地图，做为引索可以很方便的把你的网站内容的组织架构告知狗哥和其他搜索引擎。至于这个sitemap从哪里来么，我们需要</p>\n<ol>\n<li><p>安装插件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 <strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  sitemap:</div><div class=\"line\">path: sitemap.xml</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后<code>hexo g</code>一下，你就能在工程主目录下看到 <code>sitemap.xml</code>文件了</p>\n</li>\n<li>最后回到狗哥站长的界面里，添加<code>sitemap.xml</code>的文件途径<br><img src=\"https://cl.ly/2y3G2X1h1N1B/hexo_4_4.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>至此我们的工作就算完成了，等待差不多一天之后，你就可以在狗哥搜索你的博客名了，基本上第一个就是你的博客站啦<br><img src=\"https://cl.ly/0q2S3d2a1P1K/hexo_4_5.png\" alt=\"\"></p>\n<h2 id=\"提交百度\"><a href=\"#提交百度\" class=\"headerlink\" title=\"提交百度\"></a>提交百度</h2><p>这个因为github把百度爬虫给墙了，所以上面的路径对于百度走不通(会卡在网站验证那一步)。解决起来有点绕，核心思想是，通过cdn或者镜像托管，让百度爬虫可以抓取到我们的博客站。具体的实践攻略博主最近有点忙就先鸽了</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>至此，我们的博客站主体配置工作就算告一段落了，剩下的活儿就写写博客了。所以hexo篇，至此暂时完结，感觉兴趣的伙计可以给我留言。诸君，武运昌隆！<br><img src=\"https://cl.ly/03081Q2b3D1L/comic_lol.gif\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/25/hexo-Blog-SEO/\">https://millionaryearl.github.io/2016/09/25/hexo-Blog-SEO/</a></p>\n","excerpt":"<p>最近有小伙伴反映，啊那个兄台啊，你这个博客还算阔以，就是访问起来也忒麻烦了。百度和狗哥上找不捉，这个网址这么难记，小伙伴们不能日日瞻仰，很是为难呀。<br><strong><em>新任务获得：配置SEO</em></strong></p>","more":"<h2 id=\"搜索引擎优化\"><a href=\"#搜索引擎优化\" class=\"headerlink\" title=\"搜索引擎优化\"></a>搜索引擎优化</h2><h3 id=\"修改公网网址\"><a href=\"#修改公网网址\" class=\"headerlink\" title=\"修改公网网址\"></a>修改公网网址</h3><p>这个其实还是属于前篇里说的基础键值配置，找到主工程目录里的 <code>_config.yml</code> 文件，然后修改</p>\n<pre><code>url: https://millionaryearl.github.io（改成你的域名）\n</code></pre><p>至于域名购买么也简单得很，<a href=\"https://www.godaddy.com/\">狗爹</a> 或者 <a href=\"https://www.aliyun.com\">阿里云</a> 上买一个好了么</p>\n<h2 id=\"提交狗哥\"><a href=\"#提交狗哥\" class=\"headerlink\" title=\"提交狗哥\"></a>提交狗哥</h2><h3 id=\"确认blog是否被收录。\"><a href=\"#确认blog是否被收录。\" class=\"headerlink\" title=\"确认blog是否被收录。\"></a>确认blog是否被收录。</h3><p>打开<a href=\"https://www.google.com\">狗哥搜索引擎</a>，输入 <code>site:yourwebaddress</code>. 要有结果么就继续，没有么就要去查查你的网站是否有部署问题了</p>\n<h3 id=\"验证网站\"><a href=\"#验证网站\" class=\"headerlink\" title=\"验证网站\"></a>验证网站</h3><p>通过验证网站，可以证明你是该域名的拥有者，可以做为站长管理自己的网站－添加子节点啊，查流量啊，访问量啊什么的。<br>前往 <a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\">狗哥站长</a> 登陆后开始验证。<br><img src=\"https://cl.ly/0o2L3j1u2O2E/hexo_4_verifyWebHost.png\" alt=\"\"></p>\n<h3 id=\"选择验证方式\"><a href=\"#选择验证方式\" class=\"headerlink\" title=\"选择验证方式\"></a>选择验证方式</h3><p>验证方式有四种－ <strong><em>HTML标记</em></strong>，<strong><em>域名提供商</em></strong>， <strong><em>Google Analytics(分析)</em></strong> 和 <strong><em>Google 跟踪代码管理器</em></strong>。 这里我们使用第一种<br><img src=\"https://cl.ly/0n3I3h1F2a0k/hexo_4_2.png\" alt=\"\"></p>\n<p>按照狗哥的要求，下载验证文件后，传到github里，再去浏览器里打开一下，那个验证按钮应该就亮了。都弄好之后，你就能看到自己的网站了<br><img src=\"https://cl.ly/0p0R2q3p3X3F/hexo_4_3.png\" alt=\"\"></p>\n<h3 id=\"上传sitemap\"><a href=\"#上传sitemap\" class=\"headerlink\" title=\"上传sitemap\"></a>上传sitemap</h3><p>简单点说，sitemap文件就是你的站点地图，做为引索可以很方便的把你的网站内容的组织架构告知狗哥和其他搜索引擎。至于这个sitemap从哪里来么，我们需要</p>\n<ol>\n<li><p>安装插件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 <strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  sitemap:</div><div class=\"line\">path: sitemap.xml</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后<code>hexo g</code>一下，你就能在工程主目录下看到 <code>sitemap.xml</code>文件了</p>\n</li>\n<li>最后回到狗哥站长的界面里，添加<code>sitemap.xml</code>的文件途径<br><img src=\"https://cl.ly/2y3G2X1h1N1B/hexo_4_4.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>至此我们的工作就算完成了，等待差不多一天之后，你就可以在狗哥搜索你的博客名了，基本上第一个就是你的博客站啦<br><img src=\"https://cl.ly/0q2S3d2a1P1K/hexo_4_5.png\" alt=\"\"></p>\n<h2 id=\"提交百度\"><a href=\"#提交百度\" class=\"headerlink\" title=\"提交百度\"></a>提交百度</h2><p>这个因为github把百度爬虫给墙了，所以上面的路径对于百度走不通(会卡在网站验证那一步)。解决起来有点绕，核心思想是，通过cdn或者镜像托管，让百度爬虫可以抓取到我们的博客站。具体的实践攻略博主最近有点忙就先鸽了</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>至此，我们的博客站主体配置工作就算告一段落了，剩下的活儿就写写博客了。所以hexo篇，至此暂时完结，感觉兴趣的伙计可以给我留言。诸君，武运昌隆！<br><img src=\"https://cl.ly/03081Q2b3D1L/comic_lol.gif\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/25/hexo-Blog-SEO/\">https://millionaryearl.github.io/2016/09/25/hexo-Blog-SEO/</a></p>"},{"title":"Build Your Own Blog  - 建站并部署到Github","date":"2016-09-04T05:35:02.000Z","_content":"\n一直打算搞一个自己的技术博客站，比起用什么简书啊，CSDN的第三方平台，直接高冷的丢出去一个自制的博客站，简直就是装比于无形，想想就带感好吧。\n***新任务获得：部署个人网站***\n\t\n\n<!--more-->\n\n嗯常规套路先看炼成书，查阅 个人网站 项：\n`公网域名 ＋ 服务器 ＋ 网站代码 ＝ 个人网站（常规合成法则）`\n呃，公网域名么 [狗爹][1] 上或许能找到便宜的。服务器，呃，[AWS][2]好像有点贵，[aliyun][3]凑合吧。网站代码，呃，不就是 `H5+CSS+JS/AJAX` 么，小意思。。。。。。个屁。哥是写Swift的，自己去搞这些web相关的，要搞死哥啊。再翻翻炼成书: \n`hexo（网站代码） + github（公共域名 & 服务器） = 个人网站（黑暗合成法则）` \n\n![][4]\n\n***任务更新：使用 [Hexo][5] 和 [Github][6] 制成个人博客。 ***\n\n## 准备工作\n\n### Step.1 开发环境\n\n 1. **Node.js** \t[安装指南][7]\n 2. **Git** \t\t[安装指南][8]\n 3. 运行如下命令不报错即配置成功。\n \t```\n\t$ npm -v\n\t```\n\t```\n\t$ git --version\n\t```\n\n\n### Step.2 GitHub\n\n 1. 新建一个代码仓，命名为`yourname.github.io`\n 2. 开启 **gh-pages** 功能\n \t* 开启 Reposity **Setting** 页面如下\n \t* 点击 **Automatic page generator**\n \t\n ![][9]\n \n 3. 能够正常访问网址: `yourname.github.io` ，即配置成功。***这个地址将成为你的博客网址（可以修改）***\n ![][10]\n \n \n### Step.3 Hexo\n\n 1. 新建一个工作目录，打开命令行并切换到新建的工作目录途径\n 2. 安装 **Hexo**\n \t```\n\t$ npm install -g hexo-cli\n\t```\n ---------------------------------------\n## 建站\n \n### Step.1 新建一个网站\n1. 在命令行里执行\n\t```\n\t$ hexo init <folder>\n\t$ cd <folder>\n\t$ npm install\t\n\t```\n### Step.2 本地测试\n1. 在命令行里执行\n\t```\n\t$ hexo g\n\t$ hexo s\n\t```\n如果能看到提示：``INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.``你就可以去浏览器里打开``http://localhost:4000/``，欣赏你的个人博客了\n\n![][11]\n\n### Step.3 Github部署\n\n1. 需要为自己配置身份信息，打开命令行，执行\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n2. 去工程目录里找到 `_config.yml` 文件，修改下列属性\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n\n3. 在命令行里执行\n```\n$ hexo clean\n$ hexo d\n```\n\n如果能看到提示 ``INFO  Deploy done: git`` 你就可以去浏览器里打开 ``yourname.github.io``，继续欣赏你的个人博客了。\n\n![][12]\n\n\n## 可能遇到的问题\n\n### Q1: 命令行总是指令错误\n1. 首先你的确保命令行的路径是你的工作目录（工程文件夹）的途径，在命令行里输入下列命令确认\n```\n$ pwd\n```\n2. 其次确保 `node.js` & `git` & `hexo` 确实安装成功了，详见上述准备环节\n\n### Q2: Github部署时，总是提示 “Permission Denied”\n这个是因为的Github的SSH连接授权有问题，需要确认本地机器上的ssh公钥与Github上的私钥是匹配的。如果实在无法确认的话，就直接去换套新的吧（作者就折腾了半天），[正面上我][13] 。\n\n\n\n## 发布博客\n\n1. 在命令行里执行\n```\n$ hexo new [layout] <title>\n```\n2. 或者直接在工程目录的 `/source/_posts/` 下，新建 newblog.md 文件\n3. 编辑内容\n4. 在命令行里执行\n```\n$ hexo clean\n$ hexo d\n```\n\n\n\n\n\n## 待续\n**Hexo** 总体上来说还算是个挺不错的框架的，能玩的东西很多，插件，主题等等等等，想要学习更多的可以去 [Hexo官网][14]看看。\n\n完结，撒花，鼓掌～～～\n\n[1]:https://www.godaddy.com/\n[2]:https://aws.amazon.com\n[3]:https://www.aliyun.com\n[4]:https://cl.ly/022C2w20262o/commic_wow.jpg\n[5]:https://hexo.io/docs/\n[6]:https://github.com\n[7]:https://nodejs.org/en/download/package-manager/#osx\n[8]:https://git-scm.com/book/zh/v1/起步-安装-Git\n[9]:https://cl.ly/240P2i1D0b3j/hexo_1.png\n[10]:https://cl.ly/2L1R2X0e2j0U/comic_brilliant.jpg\n[11]:https://cl.ly/1o0m2K121V18/hexo_2.png\n[12]:https://cl.ly/441e3k3O1r2G/commic_yeah.jpg\n[13]:https://help.github.com/articles/generating-an-ssh-key/\n[14]:https://hexo.io/zh-cn/","source":"_posts/hexo-Blog-framework.md","raw":"---\ntitle: Build Your Own Blog  - 建站并部署到Github\ndate: 2016-09-04 13:35:02\ntags: Hexo\ncategories: \"Blog\"\n---\n\n一直打算搞一个自己的技术博客站，比起用什么简书啊，CSDN的第三方平台，直接高冷的丢出去一个自制的博客站，简直就是装比于无形，想想就带感好吧。\n***新任务获得：部署个人网站***\n\t\n\n<!--more-->\n\n嗯常规套路先看炼成书，查阅 个人网站 项：\n`公网域名 ＋ 服务器 ＋ 网站代码 ＝ 个人网站（常规合成法则）`\n呃，公网域名么 [狗爹][1] 上或许能找到便宜的。服务器，呃，[AWS][2]好像有点贵，[aliyun][3]凑合吧。网站代码，呃，不就是 `H5+CSS+JS/AJAX` 么，小意思。。。。。。个屁。哥是写Swift的，自己去搞这些web相关的，要搞死哥啊。再翻翻炼成书: \n`hexo（网站代码） + github（公共域名 & 服务器） = 个人网站（黑暗合成法则）` \n\n![][4]\n\n***任务更新：使用 [Hexo][5] 和 [Github][6] 制成个人博客。 ***\n\n## 准备工作\n\n### Step.1 开发环境\n\n 1. **Node.js** \t[安装指南][7]\n 2. **Git** \t\t[安装指南][8]\n 3. 运行如下命令不报错即配置成功。\n \t```\n\t$ npm -v\n\t```\n\t```\n\t$ git --version\n\t```\n\n\n### Step.2 GitHub\n\n 1. 新建一个代码仓，命名为`yourname.github.io`\n 2. 开启 **gh-pages** 功能\n \t* 开启 Reposity **Setting** 页面如下\n \t* 点击 **Automatic page generator**\n \t\n ![][9]\n \n 3. 能够正常访问网址: `yourname.github.io` ，即配置成功。***这个地址将成为你的博客网址（可以修改）***\n ![][10]\n \n \n### Step.3 Hexo\n\n 1. 新建一个工作目录，打开命令行并切换到新建的工作目录途径\n 2. 安装 **Hexo**\n \t```\n\t$ npm install -g hexo-cli\n\t```\n ---------------------------------------\n## 建站\n \n### Step.1 新建一个网站\n1. 在命令行里执行\n\t```\n\t$ hexo init <folder>\n\t$ cd <folder>\n\t$ npm install\t\n\t```\n### Step.2 本地测试\n1. 在命令行里执行\n\t```\n\t$ hexo g\n\t$ hexo s\n\t```\n如果能看到提示：``INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.``你就可以去浏览器里打开``http://localhost:4000/``，欣赏你的个人博客了\n\n![][11]\n\n### Step.3 Github部署\n\n1. 需要为自己配置身份信息，打开命令行，执行\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n2. 去工程目录里找到 `_config.yml` 文件，修改下列属性\n```\ndeploy:\n  type: git\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n\n3. 在命令行里执行\n```\n$ hexo clean\n$ hexo d\n```\n\n如果能看到提示 ``INFO  Deploy done: git`` 你就可以去浏览器里打开 ``yourname.github.io``，继续欣赏你的个人博客了。\n\n![][12]\n\n\n## 可能遇到的问题\n\n### Q1: 命令行总是指令错误\n1. 首先你的确保命令行的路径是你的工作目录（工程文件夹）的途径，在命令行里输入下列命令确认\n```\n$ pwd\n```\n2. 其次确保 `node.js` & `git` & `hexo` 确实安装成功了，详见上述准备环节\n\n### Q2: Github部署时，总是提示 “Permission Denied”\n这个是因为的Github的SSH连接授权有问题，需要确认本地机器上的ssh公钥与Github上的私钥是匹配的。如果实在无法确认的话，就直接去换套新的吧（作者就折腾了半天），[正面上我][13] 。\n\n\n\n## 发布博客\n\n1. 在命令行里执行\n```\n$ hexo new [layout] <title>\n```\n2. 或者直接在工程目录的 `/source/_posts/` 下，新建 newblog.md 文件\n3. 编辑内容\n4. 在命令行里执行\n```\n$ hexo clean\n$ hexo d\n```\n\n\n\n\n\n## 待续\n**Hexo** 总体上来说还算是个挺不错的框架的，能玩的东西很多，插件，主题等等等等，想要学习更多的可以去 [Hexo官网][14]看看。\n\n完结，撒花，鼓掌～～～\n\n[1]:https://www.godaddy.com/\n[2]:https://aws.amazon.com\n[3]:https://www.aliyun.com\n[4]:https://cl.ly/022C2w20262o/commic_wow.jpg\n[5]:https://hexo.io/docs/\n[6]:https://github.com\n[7]:https://nodejs.org/en/download/package-manager/#osx\n[8]:https://git-scm.com/book/zh/v1/起步-安装-Git\n[9]:https://cl.ly/240P2i1D0b3j/hexo_1.png\n[10]:https://cl.ly/2L1R2X0e2j0U/comic_brilliant.jpg\n[11]:https://cl.ly/1o0m2K121V18/hexo_2.png\n[12]:https://cl.ly/441e3k3O1r2G/commic_yeah.jpg\n[13]:https://help.github.com/articles/generating-an-ssh-key/\n[14]:https://hexo.io/zh-cn/","slug":"hexo-Blog-framework","published":1,"updated":"2016-09-04T05:35:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvli0002xy2ywknicisy","content":"<p>一直打算搞一个自己的技术博客站，比起用什么简书啊，CSDN的第三方平台，直接高冷的丢出去一个自制的博客站，简直就是装比于无形，想想就带感好吧。<br><strong><em>新任务获得：部署个人网站</em></strong></p>\n<a id=\"more\"></a>\n<p>嗯常规套路先看炼成书，查阅 个人网站 项：<br><code>公网域名 ＋ 服务器 ＋ 网站代码 ＝ 个人网站（常规合成法则）</code><br>呃，公网域名么 <a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"external\">狗爹</a> 上或许能找到便宜的。服务器，呃，<a href=\"https://aws.amazon.com\" target=\"_blank\" rel=\"external\">AWS</a>好像有点贵，<a href=\"https://www.aliyun.com\" target=\"_blank\" rel=\"external\">aliyun</a>凑合吧。网站代码，呃，不就是 <code>H5+CSS+JS/AJAX</code> 么，小意思。。。。。。个屁。哥是写Swift的，自己去搞这些web相关的，要搞死哥啊。再翻翻炼成书:<br><code>hexo（网站代码） + github（公共域名 &amp; 服务器） = 个人网站（黑暗合成法则）</code> </p>\n<p><img src=\"https://cl.ly/022C2w20262o/commic_wow.jpg\" alt=\"\"></p>\n<p><strong><em>任务更新：使用 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">Hexo</a> 和 <a href=\"https://github.com\" target=\"_blank\" rel=\"external\">Github</a> 制成个人博客。 </em></strong></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"Step-1-开发环境\"><a href=\"#Step-1-开发环境\" class=\"headerlink\" title=\"Step.1 开发环境\"></a>Step.1 开发环境</h3><ol>\n<li><strong>Node.js</strong>     <a href=\"https://nodejs.org/en/download/package-manager/#osx\" target=\"_blank\" rel=\"external\">安装指南</a></li>\n<li><strong>Git</strong>         <a href=\"https://git-scm.com/book/zh/v1/起步-安装-Git\" target=\"_blank\" rel=\"external\">安装指南</a></li>\n<li><p>运行如下命令不报错即配置成功。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm -v</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Step-2-GitHub\"><a href=\"#Step-2-GitHub\" class=\"headerlink\" title=\"Step.2 GitHub\"></a>Step.2 GitHub</h3><ol>\n<li>新建一个代码仓，命名为<code>yourname.github.io</code></li>\n<li><p>开启 <strong>gh-pages</strong> 功能</p>\n<ul>\n<li>开启 Reposity <strong>Setting</strong> 页面如下</li>\n<li>点击 <strong>Automatic page generator</strong></li>\n</ul>\n<p><img src=\"https://cl.ly/240P2i1D0b3j/hexo_1.png\" alt=\"\"></p>\n</li>\n<li><p>能够正常访问网址: <code>yourname.github.io</code> ，即配置成功。<strong><em>这个地址将成为你的博客网址（可以修改）</em></strong><br><img src=\"https://cl.ly/2L1R2X0e2j0U/comic_brilliant.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"Step-3-Hexo\"><a href=\"#Step-3-Hexo\" class=\"headerlink\" title=\"Step.3 Hexo\"></a>Step.3 Hexo</h3><ol>\n<li>新建一个工作目录，打开命令行并切换到新建的工作目录途径</li>\n<li>安装 <strong>Hexo</strong> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><h3 id=\"Step-1-新建一个网站\"><a href=\"#Step-1-新建一个网站\" class=\"headerlink\" title=\"Step.1 新建一个网站\"></a>Step.1 新建一个网站</h3><ol>\n<li>在命令行里执行 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Step-2-本地测试\"><a href=\"#Step-2-本地测试\" class=\"headerlink\" title=\"Step.2 本地测试\"></a>Step.2 本地测试</h3><ol>\n<li>在命令行里执行 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果能看到提示：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code>你就可以去浏览器里打开<code>http://localhost:4000/</code>，欣赏你的个人博客了</p>\n<p><img src=\"https://cl.ly/1o0m2K121V18/hexo_2.png\" alt=\"\"></p>\n<h3 id=\"Step-3-Github部署\"><a href=\"#Step-3-Github部署\" class=\"headerlink\" title=\"Step.3 Github部署\"></a>Step.3 Github部署</h3><ol>\n<li><p>需要为自己配置身份信息，打开命令行，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;yourname&quot;</div><div class=\"line\">git config --global user.email &quot;youremail&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>去工程目录里找到 <code>_config.yml</code> 文件，修改下列属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>在命令行里执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果能看到提示 <code>INFO  Deploy done: git</code> 你就可以去浏览器里打开 <code>yourname.github.io</code>，继续欣赏你的个人博客了。</p>\n<p><img src=\"https://cl.ly/441e3k3O1r2G/commic_yeah.jpg\" alt=\"\"></p>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><h3 id=\"Q1-命令行总是指令错误\"><a href=\"#Q1-命令行总是指令错误\" class=\"headerlink\" title=\"Q1: 命令行总是指令错误\"></a>Q1: 命令行总是指令错误</h3><ol>\n<li><p>首先你的确保命令行的路径是你的工作目录（工程文件夹）的途径，在命令行里输入下列命令确认</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pwd</div></pre></td></tr></table></figure>\n</li>\n<li><p>其次确保 <code>node.js</code> &amp; <code>git</code> &amp; <code>hexo</code> 确实安装成功了，详见上述准备环节</p>\n</li>\n</ol>\n<h3 id=\"Q2-Github部署时，总是提示-“Permission-Denied”\"><a href=\"#Q2-Github部署时，总是提示-“Permission-Denied”\" class=\"headerlink\" title=\"Q2: Github部署时，总是提示 “Permission Denied”\"></a>Q2: Github部署时，总是提示 “Permission Denied”</h3><p>这个是因为的Github的SSH连接授权有问题，需要确认本地机器上的ssh公钥与Github上的私钥是匹配的。如果实在无法确认的话，就直接去换套新的吧（作者就折腾了半天），<a href=\"https://help.github.com/articles/generating-an-ssh-key/\" target=\"_blank\" rel=\"external\">正面上我</a> 。</p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><ol>\n<li><p>在命令行里执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接在工程目录的 <code>/source/_posts/</code> 下，新建 newblog.md 文件</p>\n</li>\n<li>编辑内容</li>\n<li>在命令行里执行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h2><p><strong>Hexo</strong> 总体上来说还算是个挺不错的框架的，能玩的东西很多，插件，主题等等等等，想要学习更多的可以去 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo官网</a>看看。</p>\n<p>完结，撒花，鼓掌～～～</p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/04/hexo-Blog-framework/\">https://millionaryearl.github.io/2016/09/04/hexo-Blog-framework/</a></p>\n","excerpt":"<p>一直打算搞一个自己的技术博客站，比起用什么简书啊，CSDN的第三方平台，直接高冷的丢出去一个自制的博客站，简直就是装比于无形，想想就带感好吧。<br><strong><em>新任务获得：部署个人网站</em></strong></p>","more":"<p>嗯常规套路先看炼成书，查阅 个人网站 项：<br><code>公网域名 ＋ 服务器 ＋ 网站代码 ＝ 个人网站（常规合成法则）</code><br>呃，公网域名么 <a href=\"https://www.godaddy.com/\">狗爹</a> 上或许能找到便宜的。服务器，呃，<a href=\"https://aws.amazon.com\">AWS</a>好像有点贵，<a href=\"https://www.aliyun.com\">aliyun</a>凑合吧。网站代码，呃，不就是 <code>H5+CSS+JS/AJAX</code> 么，小意思。。。。。。个屁。哥是写Swift的，自己去搞这些web相关的，要搞死哥啊。再翻翻炼成书:<br><code>hexo（网站代码） + github（公共域名 &amp; 服务器） = 个人网站（黑暗合成法则）</code> </p>\n<p><img src=\"https://cl.ly/022C2w20262o/commic_wow.jpg\" alt=\"\"></p>\n<p><strong><em>任务更新：使用 <a href=\"https://hexo.io/docs/\">Hexo</a> 和 <a href=\"https://github.com\">Github</a> 制成个人博客。 </em></strong></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"Step-1-开发环境\"><a href=\"#Step-1-开发环境\" class=\"headerlink\" title=\"Step.1 开发环境\"></a>Step.1 开发环境</h3><ol>\n<li><strong>Node.js</strong>     <a href=\"https://nodejs.org/en/download/package-manager/#osx\">安装指南</a></li>\n<li><strong>Git</strong>         <a href=\"https://git-scm.com/book/zh/v1/起步-安装-Git\">安装指南</a></li>\n<li><p>运行如下命令不报错即配置成功。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm -v</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Step-2-GitHub\"><a href=\"#Step-2-GitHub\" class=\"headerlink\" title=\"Step.2 GitHub\"></a>Step.2 GitHub</h3><ol>\n<li>新建一个代码仓，命名为<code>yourname.github.io</code></li>\n<li><p>开启 <strong>gh-pages</strong> 功能</p>\n<ul>\n<li>开启 Reposity <strong>Setting</strong> 页面如下</li>\n<li>点击 <strong>Automatic page generator</strong></li>\n</ul>\n<p><img src=\"https://cl.ly/240P2i1D0b3j/hexo_1.png\" alt=\"\"></p>\n</li>\n<li><p>能够正常访问网址: <code>yourname.github.io</code> ，即配置成功。<strong><em>这个地址将成为你的博客网址（可以修改）</em></strong><br><img src=\"https://cl.ly/2L1R2X0e2j0U/comic_brilliant.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"Step-3-Hexo\"><a href=\"#Step-3-Hexo\" class=\"headerlink\" title=\"Step.3 Hexo\"></a>Step.3 Hexo</h3><ol>\n<li>新建一个工作目录，打开命令行并切换到新建的工作目录途径</li>\n<li>安装 <strong>Hexo</strong> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><h3 id=\"Step-1-新建一个网站\"><a href=\"#Step-1-新建一个网站\" class=\"headerlink\" title=\"Step.1 新建一个网站\"></a>Step.1 新建一个网站</h3><ol>\n<li>在命令行里执行 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Step-2-本地测试\"><a href=\"#Step-2-本地测试\" class=\"headerlink\" title=\"Step.2 本地测试\"></a>Step.2 本地测试</h3><ol>\n<li>在命令行里执行 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果能看到提示：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code>你就可以去浏览器里打开<code>http://localhost:4000/</code>，欣赏你的个人博客了</p>\n<p><img src=\"https://cl.ly/1o0m2K121V18/hexo_2.png\" alt=\"\"></p>\n<h3 id=\"Step-3-Github部署\"><a href=\"#Step-3-Github部署\" class=\"headerlink\" title=\"Step.3 Github部署\"></a>Step.3 Github部署</h3><ol>\n<li><p>需要为自己配置身份信息，打开命令行，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;yourname&quot;</div><div class=\"line\">git config --global user.email &quot;youremail&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>去工程目录里找到 <code>_config.yml</code> 文件，修改下列属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>在命令行里执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果能看到提示 <code>INFO  Deploy done: git</code> 你就可以去浏览器里打开 <code>yourname.github.io</code>，继续欣赏你的个人博客了。</p>\n<p><img src=\"https://cl.ly/441e3k3O1r2G/commic_yeah.jpg\" alt=\"\"></p>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><h3 id=\"Q1-命令行总是指令错误\"><a href=\"#Q1-命令行总是指令错误\" class=\"headerlink\" title=\"Q1: 命令行总是指令错误\"></a>Q1: 命令行总是指令错误</h3><ol>\n<li><p>首先你的确保命令行的路径是你的工作目录（工程文件夹）的途径，在命令行里输入下列命令确认</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pwd</div></pre></td></tr></table></figure>\n</li>\n<li><p>其次确保 <code>node.js</code> &amp; <code>git</code> &amp; <code>hexo</code> 确实安装成功了，详见上述准备环节</p>\n</li>\n</ol>\n<h3 id=\"Q2-Github部署时，总是提示-“Permission-Denied”\"><a href=\"#Q2-Github部署时，总是提示-“Permission-Denied”\" class=\"headerlink\" title=\"Q2: Github部署时，总是提示 “Permission Denied”\"></a>Q2: Github部署时，总是提示 “Permission Denied”</h3><p>这个是因为的Github的SSH连接授权有问题，需要确认本地机器上的ssh公钥与Github上的私钥是匹配的。如果实在无法确认的话，就直接去换套新的吧（作者就折腾了半天），<a href=\"https://help.github.com/articles/generating-an-ssh-key/\">正面上我</a> 。</p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><ol>\n<li><p>在命令行里执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接在工程目录的 <code>/source/_posts/</code> 下，新建 newblog.md 文件</p>\n</li>\n<li>编辑内容</li>\n<li>在命令行里执行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h2><p><strong>Hexo</strong> 总体上来说还算是个挺不错的框架的，能玩的东西很多，插件，主题等等等等，想要学习更多的可以去 <a href=\"https://hexo.io/zh-cn/\">Hexo官网</a>看看。</p>\n<p>完结，撒花，鼓掌～～～</p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/04/hexo-Blog-framework/\">https://millionaryearl.github.io/2016/09/04/hexo-Blog-framework/</a></p>"},{"title":"Build Your Own Blog  - 个性化设置(一)","date":"2016-09-11T06:29:52.000Z","_content":"\n有了基础的博客框架之后，我们就要去做一些个性化的设置了。毕竟同行千千万，内容取胜不太现实，所以咱就剑走偏锋把自己的博客给搞漂亮一些得了。\n***新任务获得：美化个人网站-界面*** \n\n<!--more-->\n\n\n\n## 更换主题\n### 替换\n1. 在 [正面上我][1] 寻找喜欢的主题，这里我们使用 [NEXT][2] 主题（活跃度最好，API也比较全，推荐一哈）\n2. 下载下来，保存到`主工程目录下 \\themes `文件夹\n3. 在 `主工程目录下的_config.yml` 文件里修改 `themes` 键值\n\n ```\n theme: next //themes文件夹中对应文件夹的名称\n ```\n\n### 选定Scheme\nScheme 是 NexT 提供的一种特性，简单点说呢就是这个主题可以通过改变 `Scheme` 的值来变成三种不同的布局：\n\n * Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n * Mist - Muse 的紧凑版本，整洁有序的单栏外观\n * Pisces - 双栏 Scheme，小家碧玉似的清新\n\n在 **主题配置文件**`(/themes/next/_config.yml)`里修改 `scheme` 键值。\n\n    #scheme: Muse\n    #scheme: Mist\n    scheme: Pisces\n   \n### 站点语言\n通过修改 **站点配置文件**`(工程主目录下的_config.yml)`，将`language` 设置成所需的语言编码\n\n    language: zh-Hans\n    \n可选的语言编码如下表:\n\n| Language | Code |\n| -------- | ---- |\n| English | en |\n| 简体中文 | zh-Hans |\n| Français | fr-FR |\n| Português | pt |\n| 繁體中文 | zh-hk 或者 zh-tw |\n| Русский язык | ru |\n| Deutsch | de |\n| 日本語 | ja |\n| Indonesian | id |\n\n### 菜单栏\n\n1. 设置菜单项目. 找到**主题配置文件**`(/themes/next/_config.yml)`里`menu`字段，按照如下格式加入菜单项及其文件路径. \n```\n    menu_option : folder_directory\n    (e.g.)\n    categories : /categories\n```\n2. 设置菜单项目. 注意大部分菜单途径需要用户自己生成，在命令行工程主路径下，  \n``` \n \t$ hexo new page \"menu_option\"\n \t(e.g.)\n \t$ hexo new page \"categories\"\n```\n\n3. 设置菜单项目. 然后编辑下 `/source/menu_option／index.md`， 大概弄成这样就成了,\n\n\t```\n    ---\n    title: menu_option\n    date: 自动生成的\n    type: \"menu_option\"\n    comments: false (如果你加了评论的话)\n    ---\n    e.g.\n    ---\n    title: categories\n    date: 2016-09-18 16:12:40\n    type: \"categories\"\n    comments: false\n    ---\n\t```\n4. 设置菜单项目名称. 找到**主题对应语言文件**`(/themes/next/languages/your_language_name.yml)`里`menu`字段，按照如下格式加入菜单项名称,\n\n ```\n    menu_option : menu_name\n    (e.g.)\n    categories: 分类\n\t\n```\n\n5. 设置菜单项目图标. 找到**主题配置文件**`(/themes/next/_config.yml)`里`menu_icons`字段，按照如下格式加入菜单项图标名称。这里的图标名称都是由 [Font Awesome][3] 提供的,\n \t\n \t```\n    menu_option : menu_icon_name\n    (e.g.)\n    categories: th\n \t```\n\n### 设置头像\n\n1. 找到**主题配置文件**`(/themes/next/_config.yml)`里`avatar`字段, 设置图片地址\n```\n    avatar: /images/avatar.png\n```\n\n2. 把你的头像文件命名为 `avatar.png` 然后丢到 `(/themes/next/source/images)`文件夹里\n\n\n### 颜色字体\n\n这个其实算是最简单的差异化修改了，只要找到`/themes/next/source/css/variables/base.styl`文件里，把对应的颜色和字体改成自己想要的值就可以了，例如作者就修改了\n\n     $black-light  = #336699\n     $black-deep   = #660066\n\n## 尾记\n\n至此我们的博客站在界面布局方面就算是大功告成了，其实本期我们的主要工作就是把**主题配置文件**`(/themes/next/_config.yml)`和 **站点配置文件**`(工程主目录下的_config.yml)`的一些属性给配置起来，其他的很多配置工作都是通过修改其中对应的键值实现的，具体的键名解析请 [正面上我](https://hexo.io/zh-cn/docs/configuration.html)。 \n\n欣赏一下，感悟一下，陶醉一下，然后分享给你的小伙伴们吧，一大波崇拜的目光即将到来，嘿嘿嘿。\n\n![][4]\n\n[1]:https://github.com/hexojs/hexo/wiki/Themes\n[2]:http://theme-next.iissnan.com\n[3]:http://fontawesome.io\n[4]:https://cl.ly/0k390e3v3z1v/comic_beautiful.jpg","source":"_posts/hexo-Blog-interface.md","raw":"---\ntitle: Build Your Own Blog  - 个性化设置(一)\ndate: 2016-09-11 14:29:52\ntags: Hexo\ncategories: \"Blog\"\n---\n\n有了基础的博客框架之后，我们就要去做一些个性化的设置了。毕竟同行千千万，内容取胜不太现实，所以咱就剑走偏锋把自己的博客给搞漂亮一些得了。\n***新任务获得：美化个人网站-界面*** \n\n<!--more-->\n\n\n\n## 更换主题\n### 替换\n1. 在 [正面上我][1] 寻找喜欢的主题，这里我们使用 [NEXT][2] 主题（活跃度最好，API也比较全，推荐一哈）\n2. 下载下来，保存到`主工程目录下 \\themes `文件夹\n3. 在 `主工程目录下的_config.yml` 文件里修改 `themes` 键值\n\n ```\n theme: next //themes文件夹中对应文件夹的名称\n ```\n\n### 选定Scheme\nScheme 是 NexT 提供的一种特性，简单点说呢就是这个主题可以通过改变 `Scheme` 的值来变成三种不同的布局：\n\n * Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n * Mist - Muse 的紧凑版本，整洁有序的单栏外观\n * Pisces - 双栏 Scheme，小家碧玉似的清新\n\n在 **主题配置文件**`(/themes/next/_config.yml)`里修改 `scheme` 键值。\n\n    #scheme: Muse\n    #scheme: Mist\n    scheme: Pisces\n   \n### 站点语言\n通过修改 **站点配置文件**`(工程主目录下的_config.yml)`，将`language` 设置成所需的语言编码\n\n    language: zh-Hans\n    \n可选的语言编码如下表:\n\n| Language | Code |\n| -------- | ---- |\n| English | en |\n| 简体中文 | zh-Hans |\n| Français | fr-FR |\n| Português | pt |\n| 繁體中文 | zh-hk 或者 zh-tw |\n| Русский язык | ru |\n| Deutsch | de |\n| 日本語 | ja |\n| Indonesian | id |\n\n### 菜单栏\n\n1. 设置菜单项目. 找到**主题配置文件**`(/themes/next/_config.yml)`里`menu`字段，按照如下格式加入菜单项及其文件路径. \n```\n    menu_option : folder_directory\n    (e.g.)\n    categories : /categories\n```\n2. 设置菜单项目. 注意大部分菜单途径需要用户自己生成，在命令行工程主路径下，  \n``` \n \t$ hexo new page \"menu_option\"\n \t(e.g.)\n \t$ hexo new page \"categories\"\n```\n\n3. 设置菜单项目. 然后编辑下 `/source/menu_option／index.md`， 大概弄成这样就成了,\n\n\t```\n    ---\n    title: menu_option\n    date: 自动生成的\n    type: \"menu_option\"\n    comments: false (如果你加了评论的话)\n    ---\n    e.g.\n    ---\n    title: categories\n    date: 2016-09-18 16:12:40\n    type: \"categories\"\n    comments: false\n    ---\n\t```\n4. 设置菜单项目名称. 找到**主题对应语言文件**`(/themes/next/languages/your_language_name.yml)`里`menu`字段，按照如下格式加入菜单项名称,\n\n ```\n    menu_option : menu_name\n    (e.g.)\n    categories: 分类\n\t\n```\n\n5. 设置菜单项目图标. 找到**主题配置文件**`(/themes/next/_config.yml)`里`menu_icons`字段，按照如下格式加入菜单项图标名称。这里的图标名称都是由 [Font Awesome][3] 提供的,\n \t\n \t```\n    menu_option : menu_icon_name\n    (e.g.)\n    categories: th\n \t```\n\n### 设置头像\n\n1. 找到**主题配置文件**`(/themes/next/_config.yml)`里`avatar`字段, 设置图片地址\n```\n    avatar: /images/avatar.png\n```\n\n2. 把你的头像文件命名为 `avatar.png` 然后丢到 `(/themes/next/source/images)`文件夹里\n\n\n### 颜色字体\n\n这个其实算是最简单的差异化修改了，只要找到`/themes/next/source/css/variables/base.styl`文件里，把对应的颜色和字体改成自己想要的值就可以了，例如作者就修改了\n\n     $black-light  = #336699\n     $black-deep   = #660066\n\n## 尾记\n\n至此我们的博客站在界面布局方面就算是大功告成了，其实本期我们的主要工作就是把**主题配置文件**`(/themes/next/_config.yml)`和 **站点配置文件**`(工程主目录下的_config.yml)`的一些属性给配置起来，其他的很多配置工作都是通过修改其中对应的键值实现的，具体的键名解析请 [正面上我](https://hexo.io/zh-cn/docs/configuration.html)。 \n\n欣赏一下，感悟一下，陶醉一下，然后分享给你的小伙伴们吧，一大波崇拜的目光即将到来，嘿嘿嘿。\n\n![][4]\n\n[1]:https://github.com/hexojs/hexo/wiki/Themes\n[2]:http://theme-next.iissnan.com\n[3]:http://fontawesome.io\n[4]:https://cl.ly/0k390e3v3z1v/comic_beautiful.jpg","slug":"hexo-Blog-interface","published":1,"updated":"2016-09-11T06:29:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvlr0006xy2y0sepn7q9","content":"<p>有了基础的博客框架之后，我们就要去做一些个性化的设置了。毕竟同行千千万，内容取胜不太现实，所以咱就剑走偏锋把自己的博客给搞漂亮一些得了。<br><strong><em>新任务获得：美化个人网站-界面</em></strong> </p>\n<a id=\"more\"></a>\n<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><ol>\n<li>在 <a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">正面上我</a> 寻找喜欢的主题，这里我们使用 <a href=\"http://theme-next.iissnan.com\" target=\"_blank\" rel=\"external\">NEXT</a> 主题（活跃度最好，API也比较全，推荐一哈）</li>\n<li>下载下来，保存到<code>主工程目录下 \\themes</code>文件夹</li>\n<li><p>在 <code>主工程目录下的_config.yml</code> 文件里修改 <code>themes</code> 键值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next //themes文件夹中对应文件夹的名称</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"选定Scheme\"><a href=\"#选定Scheme\" class=\"headerlink\" title=\"选定Scheme\"></a>选定Scheme</h3><p>Scheme 是 NexT 提供的一种特性，简单点说呢就是这个主题可以通过改变 <code>Scheme</code> 的值来变成三种不同的布局：</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n</ul>\n<p>在 <strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里修改 <code>scheme</code> 键值。</p>\n<pre><code>#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n</code></pre><h3 id=\"站点语言\"><a href=\"#站点语言\" class=\"headerlink\" title=\"站点语言\"></a>站点语言</h3><p>通过修改 <strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>，将<code>language</code> 设置成所需的语言编码</p>\n<pre><code>language: zh-Hans\n</code></pre><p>可选的语言编码如下表:</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>English</td>\n<td>en</td>\n</tr>\n<tr>\n<td>简体中文</td>\n<td>zh-Hans</td>\n</tr>\n<tr>\n<td>Français</td>\n<td>fr-FR</td>\n</tr>\n<tr>\n<td>Português</td>\n<td>pt</td>\n</tr>\n<tr>\n<td>繁體中文</td>\n<td>zh-hk 或者 zh-tw</td>\n</tr>\n<tr>\n<td>Русский язык</td>\n<td>ru</td>\n</tr>\n<tr>\n<td>Deutsch</td>\n<td>de</td>\n</tr>\n<tr>\n<td>日本語</td>\n<td>ja</td>\n</tr>\n<tr>\n<td>Indonesian</td>\n<td>id</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"菜单栏\"><a href=\"#菜单栏\" class=\"headerlink\" title=\"菜单栏\"></a>菜单栏</h3><ol>\n<li><p>设置菜单项目. 找到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里<code>menu</code>字段，按照如下格式加入菜单项及其文件路径. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_option : folder_directory</div><div class=\"line\">(e.g.)</div><div class=\"line\">categories : /categories</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目. 注意大部分菜单途径需要用户自己生成，在命令行工程主路径下，  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page &quot;menu_option&quot;</div><div class=\"line\">(e.g.)</div><div class=\"line\">$ hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目. 然后编辑下 <code>/source/menu_option／index.md</code>， 大概弄成这样就成了,</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: menu_option</div><div class=\"line\">date: 自动生成的</div><div class=\"line\">type: &quot;menu_option&quot;</div><div class=\"line\">comments: false (如果你加了评论的话)</div><div class=\"line\">---</div><div class=\"line\">e.g.</div><div class=\"line\">---</div><div class=\"line\">title: categories</div><div class=\"line\">date: 2016-09-18 16:12:40</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目名称. 找到<strong>主题对应语言文件</strong><code>(/themes/next/languages/your_language_name.yml)</code>里<code>menu</code>字段，按照如下格式加入菜单项名称,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_option : menu_name</div><div class=\"line\">(e.g.)</div><div class=\"line\">categories: 分类</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目图标. 找到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里<code>menu_icons</code>字段，按照如下格式加入菜单项图标名称。这里的图标名称都是由 <a href=\"http://fontawesome.io\" target=\"_blank\" rel=\"external\">Font Awesome</a> 提供的,</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_option : menu_icon_name</div><div class=\"line\">(e.g.)</div><div class=\"line\">categories: th</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><ol>\n<li><p>找到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里<code>avatar</code>字段, 设置图片地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">avatar: /images/avatar.png</div></pre></td></tr></table></figure>\n</li>\n<li><p>把你的头像文件命名为 <code>avatar.png</code> 然后丢到 <code>(/themes/next/source/images)</code>文件夹里</p>\n</li>\n</ol>\n<h3 id=\"颜色字体\"><a href=\"#颜色字体\" class=\"headerlink\" title=\"颜色字体\"></a>颜色字体</h3><p>这个其实算是最简单的差异化修改了，只要找到<code>/themes/next/source/css/variables/base.styl</code>文件里，把对应的颜色和字体改成自己想要的值就可以了，例如作者就修改了</p>\n<pre><code>$black-light  = #336699\n$black-deep   = #660066\n</code></pre><h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>至此我们的博客站在界面布局方面就算是大功告成了，其实本期我们的主要工作就是把<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>和 <strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>的一些属性给配置起来，其他的很多配置工作都是通过修改其中对应的键值实现的，具体的键名解析请 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">正面上我</a>。 </p>\n<p>欣赏一下，感悟一下，陶醉一下，然后分享给你的小伙伴们吧，一大波崇拜的目光即将到来，嘿嘿嘿。</p>\n<p><img src=\"https://cl.ly/0k390e3v3z1v/comic_beautiful.jpg\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/11/hexo-Blog-interface/\">https://millionaryearl.github.io/2016/09/11/hexo-Blog-interface/</a></p>\n","excerpt":"<p>有了基础的博客框架之后，我们就要去做一些个性化的设置了。毕竟同行千千万，内容取胜不太现实，所以咱就剑走偏锋把自己的博客给搞漂亮一些得了。<br><strong><em>新任务获得：美化个人网站-界面</em></strong> </p>","more":"<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><ol>\n<li>在 <a href=\"https://github.com/hexojs/hexo/wiki/Themes\">正面上我</a> 寻找喜欢的主题，这里我们使用 <a href=\"http://theme-next.iissnan.com\">NEXT</a> 主题（活跃度最好，API也比较全，推荐一哈）</li>\n<li>下载下来，保存到<code>主工程目录下 \\themes</code>文件夹</li>\n<li><p>在 <code>主工程目录下的_config.yml</code> 文件里修改 <code>themes</code> 键值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next //themes文件夹中对应文件夹的名称</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"选定Scheme\"><a href=\"#选定Scheme\" class=\"headerlink\" title=\"选定Scheme\"></a>选定Scheme</h3><p>Scheme 是 NexT 提供的一种特性，简单点说呢就是这个主题可以通过改变 <code>Scheme</code> 的值来变成三种不同的布局：</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n</ul>\n<p>在 <strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里修改 <code>scheme</code> 键值。</p>\n<pre><code>#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n</code></pre><h3 id=\"站点语言\"><a href=\"#站点语言\" class=\"headerlink\" title=\"站点语言\"></a>站点语言</h3><p>通过修改 <strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>，将<code>language</code> 设置成所需的语言编码</p>\n<pre><code>language: zh-Hans\n</code></pre><p>可选的语言编码如下表:</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>English</td>\n<td>en</td>\n</tr>\n<tr>\n<td>简体中文</td>\n<td>zh-Hans</td>\n</tr>\n<tr>\n<td>Français</td>\n<td>fr-FR</td>\n</tr>\n<tr>\n<td>Português</td>\n<td>pt</td>\n</tr>\n<tr>\n<td>繁體中文</td>\n<td>zh-hk 或者 zh-tw</td>\n</tr>\n<tr>\n<td>Русский язык</td>\n<td>ru</td>\n</tr>\n<tr>\n<td>Deutsch</td>\n<td>de</td>\n</tr>\n<tr>\n<td>日本語</td>\n<td>ja</td>\n</tr>\n<tr>\n<td>Indonesian</td>\n<td>id</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"菜单栏\"><a href=\"#菜单栏\" class=\"headerlink\" title=\"菜单栏\"></a>菜单栏</h3><ol>\n<li><p>设置菜单项目. 找到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里<code>menu</code>字段，按照如下格式加入菜单项及其文件路径. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_option : folder_directory</div><div class=\"line\">(e.g.)</div><div class=\"line\">categories : /categories</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目. 注意大部分菜单途径需要用户自己生成，在命令行工程主路径下，  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page &quot;menu_option&quot;</div><div class=\"line\">(e.g.)</div><div class=\"line\">$ hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目. 然后编辑下 <code>/source/menu_option／index.md</code>， 大概弄成这样就成了,</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: menu_option</div><div class=\"line\">date: 自动生成的</div><div class=\"line\">type: &quot;menu_option&quot;</div><div class=\"line\">comments: false (如果你加了评论的话)</div><div class=\"line\">---</div><div class=\"line\">e.g.</div><div class=\"line\">---</div><div class=\"line\">title: categories</div><div class=\"line\">date: 2016-09-18 16:12:40</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目名称. 找到<strong>主题对应语言文件</strong><code>(/themes/next/languages/your_language_name.yml)</code>里<code>menu</code>字段，按照如下格式加入菜单项名称,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_option : menu_name</div><div class=\"line\">(e.g.)</div><div class=\"line\">categories: 分类</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置菜单项目图标. 找到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里<code>menu_icons</code>字段，按照如下格式加入菜单项图标名称。这里的图标名称都是由 <a href=\"http://fontawesome.io\">Font Awesome</a> 提供的,</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_option : menu_icon_name</div><div class=\"line\">(e.g.)</div><div class=\"line\">categories: th</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><ol>\n<li><p>找到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里<code>avatar</code>字段, 设置图片地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">avatar: /images/avatar.png</div></pre></td></tr></table></figure>\n</li>\n<li><p>把你的头像文件命名为 <code>avatar.png</code> 然后丢到 <code>(/themes/next/source/images)</code>文件夹里</p>\n</li>\n</ol>\n<h3 id=\"颜色字体\"><a href=\"#颜色字体\" class=\"headerlink\" title=\"颜色字体\"></a>颜色字体</h3><p>这个其实算是最简单的差异化修改了，只要找到<code>/themes/next/source/css/variables/base.styl</code>文件里，把对应的颜色和字体改成自己想要的值就可以了，例如作者就修改了</p>\n<pre><code>$black-light  = #336699\n$black-deep   = #660066\n</code></pre><h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>至此我们的博客站在界面布局方面就算是大功告成了，其实本期我们的主要工作就是把<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>和 <strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>的一些属性给配置起来，其他的很多配置工作都是通过修改其中对应的键值实现的，具体的键名解析请 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\">正面上我</a>。 </p>\n<p>欣赏一下，感悟一下，陶醉一下，然后分享给你的小伙伴们吧，一大波崇拜的目光即将到来，嘿嘿嘿。</p>\n<p><img src=\"https://cl.ly/0k390e3v3z1v/comic_beautiful.jpg\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/11/hexo-Blog-interface/\">https://millionaryearl.github.io/2016/09/11/hexo-Blog-interface/</a></p>"},{"title":"Build Your Own Blog  - 个性化设置(二)","date":"2016-09-18T09:01:40.000Z","_content":"\n主题相关的界面工作完成之后，这个博客总算是有点样子。但是我看来看去，赶脚似乎大概眉笔好像有那么一点点简陋的哇。所以这一期我们打算看看有哪些附属功能可以加到博客上。\n***新任务获得：美化个人网站-附属功能*** \n\n<!--more-->\n\n## 功能组件\n### 评论模块\n有的theme可能带有评论，而有的没有。可选的插件有 [***DISQUS***][1] （更简洁偏国外） 和 [***多说***][2]（更社交偏国内）, 这里我们选用 **DISQUS**\n\n1. 在**DISQUS**上注册账号\n2. 在**DISQUS**上注册一个网站,得到网站的shortname\n3. 在工程目录里找到`_config.yml`，加入如下代码\n\n```\n# Disqus\ndisqus_shortname: shortname\n\n```\n4. 更多评论样式设置或者相关疑问，[正面上我][3]\n\n\n### 打赏模块\n这个虽然说是正常人都不太会用的废物功能，但万一呢，是吧。万一又个慧眼独具，目光深邃的好汉看出来本人骨骼精奇，死乞白赖的非要给我打上呢是吧，所以本着用户至上的原则，咱还是加上这个模块吧\n\n首先去看下`/themes/your_theme/layout/macro`途径下有没有 `reward.swig`文件，没有的话就新建，内容如下\n\n```\n{% if theme.alipay or theme.wechatpay %}\n  <div style=\"padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;\">\n    <div>{{ theme.reward_comment }}</div>\n    <button id=\"rewardButton\" disable=\"enable\" onclick=\"var qr = document.getElementById('QR'); if (qr.style.display === 'none') {qr.style.display='block';} else {qr.style.display='none'}\">\n      <span>赏</span>\n    </button>\n    <div id=\"QR\" style=\"display: none;\">\n      {% if theme.wechatpay %}\n        <div id=\"wechat\" style=\"display: inline-block\">\n          <img id=\"wechat_qr\" src=\"{{ theme.wechatpay }}\" alt=\"{{ theme.author }} WeChat Pay\"/>\n          <p>微信打赏</p>\n        </div>\n      {% endif %}\n      {% if theme.alipay %}\n        <div id=\"alipay\" style=\"display: inline-block\">\n          <img id=\"alipay_qr\" src=\"{{ theme.alipay }}\" alt=\"{{ theme.author }} Alipay\"/>\n          <p>支付宝打赏</p>\n        </div>\n      {% endif %}\n    </div>\n  </div>\n{% endif %}\n```\n然后看下同路径下的`post.swig`文件, 确保在`<footer class=\"post-footer\">`之前有这么一段\n\n```\n  \t{% if not is_index %}\n        {% include 'reward.swig' %}\n      {% endif %}\n    </div>\n```\n\n再后去**站点配置文件**`(工程主目录下的_config.yml)`，设置如下键值对\n\n```\n# Donate 文章末尾显示打赏按钮\nreward_comment: 我知道是不会有人点的，但万一有人想不开呢？\nwechatpay: https://cl.ly/3W3I3O3t1622/wexinpay.JPG\nalipay: https://cl.ly/3t1O403j2P1F/alipay.JPG\n```\n\n最后记得把那两个二维码的图片地址换成你自己的，不然就算你骨骼精奇，人也是把钱汇给我了。。。当然你要真倔强不换，我也是很欢迎滴。\n![][4]\n\n### RSS开启\n\n这RSS开启了之后么，就可以方便别人订阅你的博客了，要装上也挺简单。先去命令行里主工程目录下运行\n\n    $ npm install hexo-generator-feed --save\n然后去**站点配置文件**`(工程主目录下的_config.yml)`里配置一下. P.S.似乎`Next`主题可以跳过这步，因为在**主题配置文件**`(/themes/next/_config.yml)`里，已经设好了。\n```\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n### 社交连接\n\n去到**主题配置文件**`(/themes/next/_config.yml)`里，先找到`social`键，按如下格式添加键值对\n\n    social_name: link_address\n    e.g.\n    GitHub: https://github.com/Millionaryearl\n    Weibo: http://weibo.com/2334525960/profile?topnav=1&wvr=6&is_all=1\n    Personal: http://dukewei.typify.io\n    \n然后去给对应的连接加上图标，这个图标和上篇里菜单项目图标一样，也是由 [Font Awesome][5] 提供的\n\n    social_name: icon_name\n    (e.g.)\n    GitHub: github\n    Twitter: twitter\n    Weibo: weibo\n    Personal: home\n    \n### 结尾样式-版权说明\n\n在主工程目录下，新建一个名为`scripts`的文件夹，在其中，新建一个AddTail.js脚本文件，内容如下\n\n```\n// Filename: AddTail.js\n\n// Add a tail to every post from tail.md\n// Great for adding copyright info\n\nvar fs = require('fs');\n\nhexo.extend.filter.register('before_post_render', function(data){\n\tif(data.copyright == false) return data;\n\t\n\t// Add seperate line\n\tdata.content += '\\n___\\n';\n\t\n\t// Try to read tail.md\n\ttry {\n\t\tvar file_content = fs.readFileSync('tail.md');\n\t\tif(file_content && data.content.length > 50) \n\t\t{\n\t\t\tdata.content += file_content;\n\t\t}\n\t} catch (err) {\n\t\tif (err.code !== 'ENOENT') throw err;\n\t\t\n\t\t// No process for ENOENT error\n\t}\n\n  \t// 添加具体文章链接, 不需要去掉即可\n\tvar permalink = '\\n本文链接：' + data.permalink;\n\tdata.content += permalink;\n  \n\treturn data;\n});\n```\n然后在工程主目录下新建一个`tail.md`文件，其中写上你的博客结尾内容，比如作者就写了下版权的破事儿\n\n### 背景\n\n感觉用 ***NEXT*** 的博主特别多，所以咱要稍微搞些不一样的东西，比如换换背景什么的。\n首先去`/themes/next/source/js/src`路径下新建你的样式文件，例如`particle.js`\n\n    !function(){function n(n,e,t){return n.getAttribute(e)||t}function e(n){return document.getElementsByTagName(n)}function t(){var t=e(\"script\"),o=t.length,i=t[o-1];return{l:o,z:n(i,\"zIndex\",-1),o:n(i,\"opacity\",.5),c:n(i,\"color\",\"0,0,0\"),n:n(i,\"count\",99)}}function o(){c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function i(){l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i){for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>c||i.x<0?-1:1,i.ya*=i.y>a||i.y<0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e<x.length;e++)n=x[e],i!==n&&null!==n.x&&null!==n.y&&(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d<n.max&&(n===w&&d>=n.max/2&&(i.x-=.03*o,i.y-=.03*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle=\"rgba(\"+m.c+\",\"+(t+.2)+\")\",l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)}),r(i)}var c,a,u=document.createElement(\"canvas\"),m=t(),d=\"c_n\"+m.l,l=u.getContext(\"2d\"),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n){window.setTimeout(n,1e3/45)},x=Math.random,w={x:null,y:null,max:2e4};u.id=d,u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+m.z+\";opacity:\"+m.o,e(\"body\")[0].appendChild(u),o(),window.onresize=o,window.onmousemove=function(n){n=n||window.event,w.x=n.clientX,w.y=n.clientY},window.onmouseout=function(){w.x=null,w.y=null};for(var y=[],s=0;m.n>s;s++){var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push({x:f,y:h,xa:g,ya:p,max:6e3})}setTimeout(function(){i()},100)}();\n \n\n然后在`/themes/next/layout`路径下的`_layout.swig`文件里，最后的`body`标签上，引用我们刚新建的js文件\n\n\n    <script type=\"text/javascript\" src=\"/js/src/particle.js\"></script>\n\n\n\n## 尾记\n\n至此基本上博客的功能就比较全了，其他的功能也还有很多，比如 PV啦，友链啦，搜索啦，笔者晚点会补上的。这期就先这样了，诸君，好运。\n![][6]\n\n[1]:https://disqus.com\n[2]:http://duoshuo.com\n[3]:http://morris821028.github.io/2014/04/12/web/hexo-comment/\n[4]:https://cl.ly/0a0n3y3t3136/comic_spiderman.jpg\n[5]:http://fontawesome.io\n[6]:https://cl.ly/1V0a2f2p0a1y/comic_dance.gif","source":"_posts/hexo-Blog-method.md","raw":"---\ntitle: Build Your Own Blog  - 个性化设置(二)\ndate: 2016-09-18 17:01:40\ntags: Hexo\ncategories: \"Blog\"\n---\n\n主题相关的界面工作完成之后，这个博客总算是有点样子。但是我看来看去，赶脚似乎大概眉笔好像有那么一点点简陋的哇。所以这一期我们打算看看有哪些附属功能可以加到博客上。\n***新任务获得：美化个人网站-附属功能*** \n\n<!--more-->\n\n## 功能组件\n### 评论模块\n有的theme可能带有评论，而有的没有。可选的插件有 [***DISQUS***][1] （更简洁偏国外） 和 [***多说***][2]（更社交偏国内）, 这里我们选用 **DISQUS**\n\n1. 在**DISQUS**上注册账号\n2. 在**DISQUS**上注册一个网站,得到网站的shortname\n3. 在工程目录里找到`_config.yml`，加入如下代码\n\n```\n# Disqus\ndisqus_shortname: shortname\n\n```\n4. 更多评论样式设置或者相关疑问，[正面上我][3]\n\n\n### 打赏模块\n这个虽然说是正常人都不太会用的废物功能，但万一呢，是吧。万一又个慧眼独具，目光深邃的好汉看出来本人骨骼精奇，死乞白赖的非要给我打上呢是吧，所以本着用户至上的原则，咱还是加上这个模块吧\n\n首先去看下`/themes/your_theme/layout/macro`途径下有没有 `reward.swig`文件，没有的话就新建，内容如下\n\n```\n{% if theme.alipay or theme.wechatpay %}\n  <div style=\"padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;\">\n    <div>{{ theme.reward_comment }}</div>\n    <button id=\"rewardButton\" disable=\"enable\" onclick=\"var qr = document.getElementById('QR'); if (qr.style.display === 'none') {qr.style.display='block';} else {qr.style.display='none'}\">\n      <span>赏</span>\n    </button>\n    <div id=\"QR\" style=\"display: none;\">\n      {% if theme.wechatpay %}\n        <div id=\"wechat\" style=\"display: inline-block\">\n          <img id=\"wechat_qr\" src=\"{{ theme.wechatpay }}\" alt=\"{{ theme.author }} WeChat Pay\"/>\n          <p>微信打赏</p>\n        </div>\n      {% endif %}\n      {% if theme.alipay %}\n        <div id=\"alipay\" style=\"display: inline-block\">\n          <img id=\"alipay_qr\" src=\"{{ theme.alipay }}\" alt=\"{{ theme.author }} Alipay\"/>\n          <p>支付宝打赏</p>\n        </div>\n      {% endif %}\n    </div>\n  </div>\n{% endif %}\n```\n然后看下同路径下的`post.swig`文件, 确保在`<footer class=\"post-footer\">`之前有这么一段\n\n```\n  \t{% if not is_index %}\n        {% include 'reward.swig' %}\n      {% endif %}\n    </div>\n```\n\n再后去**站点配置文件**`(工程主目录下的_config.yml)`，设置如下键值对\n\n```\n# Donate 文章末尾显示打赏按钮\nreward_comment: 我知道是不会有人点的，但万一有人想不开呢？\nwechatpay: https://cl.ly/3W3I3O3t1622/wexinpay.JPG\nalipay: https://cl.ly/3t1O403j2P1F/alipay.JPG\n```\n\n最后记得把那两个二维码的图片地址换成你自己的，不然就算你骨骼精奇，人也是把钱汇给我了。。。当然你要真倔强不换，我也是很欢迎滴。\n![][4]\n\n### RSS开启\n\n这RSS开启了之后么，就可以方便别人订阅你的博客了，要装上也挺简单。先去命令行里主工程目录下运行\n\n    $ npm install hexo-generator-feed --save\n然后去**站点配置文件**`(工程主目录下的_config.yml)`里配置一下. P.S.似乎`Next`主题可以跳过这步，因为在**主题配置文件**`(/themes/next/_config.yml)`里，已经设好了。\n```\nfeed:\n    type: atom\n    path: atom.xml\n    limit: 20\n```\n\n### 社交连接\n\n去到**主题配置文件**`(/themes/next/_config.yml)`里，先找到`social`键，按如下格式添加键值对\n\n    social_name: link_address\n    e.g.\n    GitHub: https://github.com/Millionaryearl\n    Weibo: http://weibo.com/2334525960/profile?topnav=1&wvr=6&is_all=1\n    Personal: http://dukewei.typify.io\n    \n然后去给对应的连接加上图标，这个图标和上篇里菜单项目图标一样，也是由 [Font Awesome][5] 提供的\n\n    social_name: icon_name\n    (e.g.)\n    GitHub: github\n    Twitter: twitter\n    Weibo: weibo\n    Personal: home\n    \n### 结尾样式-版权说明\n\n在主工程目录下，新建一个名为`scripts`的文件夹，在其中，新建一个AddTail.js脚本文件，内容如下\n\n```\n// Filename: AddTail.js\n\n// Add a tail to every post from tail.md\n// Great for adding copyright info\n\nvar fs = require('fs');\n\nhexo.extend.filter.register('before_post_render', function(data){\n\tif(data.copyright == false) return data;\n\t\n\t// Add seperate line\n\tdata.content += '\\n___\\n';\n\t\n\t// Try to read tail.md\n\ttry {\n\t\tvar file_content = fs.readFileSync('tail.md');\n\t\tif(file_content && data.content.length > 50) \n\t\t{\n\t\t\tdata.content += file_content;\n\t\t}\n\t} catch (err) {\n\t\tif (err.code !== 'ENOENT') throw err;\n\t\t\n\t\t// No process for ENOENT error\n\t}\n\n  \t// 添加具体文章链接, 不需要去掉即可\n\tvar permalink = '\\n本文链接：' + data.permalink;\n\tdata.content += permalink;\n  \n\treturn data;\n});\n```\n然后在工程主目录下新建一个`tail.md`文件，其中写上你的博客结尾内容，比如作者就写了下版权的破事儿\n\n### 背景\n\n感觉用 ***NEXT*** 的博主特别多，所以咱要稍微搞些不一样的东西，比如换换背景什么的。\n首先去`/themes/next/source/js/src`路径下新建你的样式文件，例如`particle.js`\n\n    !function(){function n(n,e,t){return n.getAttribute(e)||t}function e(n){return document.getElementsByTagName(n)}function t(){var t=e(\"script\"),o=t.length,i=t[o-1];return{l:o,z:n(i,\"zIndex\",-1),o:n(i,\"opacity\",.5),c:n(i,\"color\",\"0,0,0\"),n:n(i,\"count\",99)}}function o(){c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function i(){l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i){for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>c||i.x<0?-1:1,i.ya*=i.y>a||i.y<0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e<x.length;e++)n=x[e],i!==n&&null!==n.x&&null!==n.y&&(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d<n.max&&(n===w&&d>=n.max/2&&(i.x-=.03*o,i.y-=.03*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle=\"rgba(\"+m.c+\",\"+(t+.2)+\")\",l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)}),r(i)}var c,a,u=document.createElement(\"canvas\"),m=t(),d=\"c_n\"+m.l,l=u.getContext(\"2d\"),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n){window.setTimeout(n,1e3/45)},x=Math.random,w={x:null,y:null,max:2e4};u.id=d,u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+m.z+\";opacity:\"+m.o,e(\"body\")[0].appendChild(u),o(),window.onresize=o,window.onmousemove=function(n){n=n||window.event,w.x=n.clientX,w.y=n.clientY},window.onmouseout=function(){w.x=null,w.y=null};for(var y=[],s=0;m.n>s;s++){var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push({x:f,y:h,xa:g,ya:p,max:6e3})}setTimeout(function(){i()},100)}();\n \n\n然后在`/themes/next/layout`路径下的`_layout.swig`文件里，最后的`body`标签上，引用我们刚新建的js文件\n\n\n    <script type=\"text/javascript\" src=\"/js/src/particle.js\"></script>\n\n\n\n## 尾记\n\n至此基本上博客的功能就比较全了，其他的功能也还有很多，比如 PV啦，友链啦，搜索啦，笔者晚点会补上的。这期就先这样了，诸君，好运。\n![][6]\n\n[1]:https://disqus.com\n[2]:http://duoshuo.com\n[3]:http://morris821028.github.io/2014/04/12/web/hexo-comment/\n[4]:https://cl.ly/0a0n3y3t3136/comic_spiderman.jpg\n[5]:http://fontawesome.io\n[6]:https://cl.ly/1V0a2f2p0a1y/comic_dance.gif","slug":"hexo-Blog-method","published":1,"updated":"2016-09-18T09:01:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvlt0007xy2ypx0uk1ys","content":"<p>主题相关的界面工作完成之后，这个博客总算是有点样子。但是我看来看去，赶脚似乎大概眉笔好像有那么一点点简陋的哇。所以这一期我们打算看看有哪些附属功能可以加到博客上。<br><strong><em>新任务获得：美化个人网站-附属功能</em></strong> </p>\n<a id=\"more\"></a>\n<h2 id=\"功能组件\"><a href=\"#功能组件\" class=\"headerlink\" title=\"功能组件\"></a>功能组件</h2><h3 id=\"评论模块\"><a href=\"#评论模块\" class=\"headerlink\" title=\"评论模块\"></a>评论模块</h3><p>有的theme可能带有评论，而有的没有。可选的插件有 <a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\"><strong><em>DISQUS</em></strong></a> （更简洁偏国外） 和 <a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\"><strong><em>多说</em></strong></a>（更社交偏国内）, 这里我们选用 <strong>DISQUS</strong></p>\n<ol>\n<li>在<strong>DISQUS</strong>上注册账号</li>\n<li>在<strong>DISQUS</strong>上注册一个网站,得到网站的shortname</li>\n<li>在工程目录里找到<code>_config.yml</code>，加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Disqus</div><div class=\"line\">disqus_shortname: shortname</div></pre></td></tr></table></figure>\n<ol>\n<li>更多评论样式设置或者相关疑问，<a href=\"http://morris821028.github.io/2014/04/12/web/hexo-comment/\" target=\"_blank\" rel=\"external\">正面上我</a></li>\n</ol>\n<h3 id=\"打赏模块\"><a href=\"#打赏模块\" class=\"headerlink\" title=\"打赏模块\"></a>打赏模块</h3><p>这个虽然说是正常人都不太会用的废物功能，但万一呢，是吧。万一又个慧眼独具，目光深邃的好汉看出来本人骨骼精奇，死乞白赖的非要给我打上呢是吧，所以本着用户至上的原则，咱还是加上这个模块吧</p>\n<p>首先去看下<code>/themes/your_theme/layout/macro</code>途径下有没有 <code>reward.swig</code>文件，没有的话就新建，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.alipay or theme.wechatpay %&#125;</div><div class=\"line\">  &lt;div style=&quot;padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;&quot;&gt;</div><div class=\"line\">    &lt;div&gt;&#123;&#123; theme.reward_comment &#125;&#125;&lt;/div&gt;</div><div class=\"line\">    &lt;button id=&quot;rewardButton&quot; disable=&quot;enable&quot; onclick=&quot;var qr = document.getElementById(&apos;QR&apos;); if (qr.style.display === &apos;none&apos;) &#123;qr.style.display=&apos;block&apos;;&#125; else &#123;qr.style.display=&apos;none&apos;&#125;&quot;&gt;</div><div class=\"line\">      &lt;span&gt;赏&lt;/span&gt;</div><div class=\"line\">    &lt;/button&gt;</div><div class=\"line\">    &lt;div id=&quot;QR&quot; style=&quot;display: none;&quot;&gt;</div><div class=\"line\">      &#123;% if theme.wechatpay %&#125;</div><div class=\"line\">        &lt;div id=&quot;wechat&quot; style=&quot;display: inline-block&quot;&gt;</div><div class=\"line\">          &lt;img id=&quot;wechat_qr&quot; src=&quot;&#123;&#123; theme.wechatpay &#125;&#125;&quot; alt=&quot;&#123;&#123; theme.author &#125;&#125; WeChat Pay&quot;/&gt;</div><div class=\"line\">          &lt;p&gt;微信打赏&lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &#123;% endif %&#125;</div><div class=\"line\">      &#123;% if theme.alipay %&#125;</div><div class=\"line\">        &lt;div id=&quot;alipay&quot; style=&quot;display: inline-block&quot;&gt;</div><div class=\"line\">          &lt;img id=&quot;alipay_qr&quot; src=&quot;&#123;&#123; theme.alipay &#125;&#125;&quot; alt=&quot;&#123;&#123; theme.author &#125;&#125; Alipay&quot;/&gt;</div><div class=\"line\">          &lt;p&gt;支付宝打赏&lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &#123;% endif %&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure>\n<p>然后看下同路径下的<code>post.swig</code>文件, 确保在<code>&lt;footer class=&quot;post-footer&quot;&gt;</code>之前有这么一段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if not is_index %&#125;</div><div class=\"line\">     &#123;% include &apos;reward.swig&apos; %&#125;</div><div class=\"line\">   &#123;% endif %&#125;</div><div class=\"line\"> &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>再后去<strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>，设置如下键值对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Donate 文章末尾显示打赏按钮</div><div class=\"line\">reward_comment: 我知道是不会有人点的，但万一有人想不开呢？</div><div class=\"line\">wechatpay: https://cl.ly/3W3I3O3t1622/wexinpay.JPG</div><div class=\"line\">alipay: https://cl.ly/3t1O403j2P1F/alipay.JPG</div></pre></td></tr></table></figure>\n<p>最后记得把那两个二维码的图片地址换成你自己的，不然就算你骨骼精奇，人也是把钱汇给我了。。。当然你要真倔强不换，我也是很欢迎滴。<br><img src=\"https://cl.ly/0a0n3y3t3136/comic_spiderman.jpg\" alt=\"\"></p>\n<h3 id=\"RSS开启\"><a href=\"#RSS开启\" class=\"headerlink\" title=\"RSS开启\"></a>RSS开启</h3><p>这RSS开启了之后么，就可以方便别人订阅你的博客了，要装上也挺简单。先去命令行里主工程目录下运行</p>\n<pre><code>$ npm install hexo-generator-feed --save\n</code></pre><p>然后去<strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>里配置一下. P.S.似乎<code>Next</code>主题可以跳过这步，因为在<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里，已经设好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">feed:</div><div class=\"line\">    type: atom</div><div class=\"line\">    path: atom.xml</div><div class=\"line\">    limit: 20</div></pre></td></tr></table></figure></p>\n<h3 id=\"社交连接\"><a href=\"#社交连接\" class=\"headerlink\" title=\"社交连接\"></a>社交连接</h3><p>去到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里，先找到<code>social</code>键，按如下格式添加键值对</p>\n<pre><code>social_name: link_address\ne.g.\nGitHub: https://github.com/Millionaryearl\nWeibo: http://weibo.com/2334525960/profile?topnav=1&amp;wvr=6&amp;is_all=1\nPersonal: http://dukewei.typify.io\n</code></pre><p>然后去给对应的连接加上图标，这个图标和上篇里菜单项目图标一样，也是由 <a href=\"http://fontawesome.io\" target=\"_blank\" rel=\"external\">Font Awesome</a> 提供的</p>\n<pre><code>social_name: icon_name\n(e.g.)\nGitHub: github\nTwitter: twitter\nWeibo: weibo\nPersonal: home\n</code></pre><h3 id=\"结尾样式-版权说明\"><a href=\"#结尾样式-版权说明\" class=\"headerlink\" title=\"结尾样式-版权说明\"></a>结尾样式-版权说明</h3><p>在主工程目录下，新建一个名为<code>scripts</code>的文件夹，在其中，新建一个AddTail.js脚本文件，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Filename: AddTail.js</div><div class=\"line\"></div><div class=\"line\">// Add a tail to every post from tail.md</div><div class=\"line\">// Great for adding copyright info</div><div class=\"line\"></div><div class=\"line\">var fs = require(&apos;fs&apos;);</div><div class=\"line\"></div><div class=\"line\">hexo.extend.filter.register(&apos;before_post_render&apos;, function(data)&#123;</div><div class=\"line\">\tif(data.copyright == false) return data;</div><div class=\"line\">\t</div><div class=\"line\">\t// Add seperate line</div><div class=\"line\">\tdata.content += &apos;\\n___\\n&apos;;</div><div class=\"line\">\t</div><div class=\"line\">\t// Try to read tail.md</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\tvar file_content = fs.readFileSync(&apos;tail.md&apos;);</div><div class=\"line\">\t\tif(file_content &amp;&amp; data.content.length &gt; 50) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tdata.content += file_content;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; catch (err) &#123;</div><div class=\"line\">\t\tif (err.code !== &apos;ENOENT&apos;) throw err;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t// No process for ENOENT error</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  \t// 添加具体文章链接, 不需要去掉即可</div><div class=\"line\">\tvar permalink = &apos;\\n本文链接：&apos; + data.permalink;</div><div class=\"line\">\tdata.content += permalink;</div><div class=\"line\">  </div><div class=\"line\">\treturn data;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后在工程主目录下新建一个<code>tail.md</code>文件，其中写上你的博客结尾内容，比如作者就写了下版权的破事儿</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>感觉用 <strong><em>NEXT</em></strong> 的博主特别多，所以咱要稍微搞些不一样的东西，比如换换背景什么的。<br>首先去<code>/themes/next/source/js/src</code>路径下新建你的样式文件，例如<code>particle.js</code></p>\n<pre><code>!function(){function n(n,e,t){return n.getAttribute(e)||t}function e(n){return document.getElementsByTagName(n)}function t(){var t=e(&quot;script&quot;),o=t.length,i=t[o-1];return{l:o,z:n(i,&quot;zIndex&quot;,-1),o:n(i,&quot;opacity&quot;,.5),c:n(i,&quot;color&quot;,&quot;0,0,0&quot;),n:n(i,&quot;count&quot;,99)}}function o(){c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function i(){l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i){for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;0?-1:1,i.ya*=i.y&gt;a||i.y&lt;0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;null!==n.x&amp;&amp;null!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/2&amp;&amp;(i.x-=.03*o,i.y-=.03*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle=&quot;rgba(&quot;+m.c+&quot;,&quot;+(t+.2)+&quot;)&quot;,l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)}),r(i)}var c,a,u=document.createElement(&quot;canvas&quot;),m=t(),d=&quot;c_n&quot;+m.l,l=u.getContext(&quot;2d&quot;),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n){window.setTimeout(n,1e3/45)},x=Math.random,w={x:null,y:null,max:2e4};u.id=d,u.style.cssText=&quot;position:fixed;top:0;left:0;z-index:&quot;+m.z+&quot;;opacity:&quot;+m.o,e(&quot;body&quot;)[0].appendChild(u),o(),window.onresize=o,window.onmousemove=function(n){n=n||window.event,w.x=n.clientX,w.y=n.clientY},window.onmouseout=function(){w.x=null,w.y=null};for(var y=[],s=0;m.n&gt;s;s++){var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push({x:f,y:h,xa:g,ya:p,max:6e3})}setTimeout(function(){i()},100)}();\n</code></pre><p>然后在<code>/themes/next/layout</code>路径下的<code>_layout.swig</code>文件里，最后的<code>body</code>标签上，引用我们刚新建的js文件</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particle.js&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>至此基本上博客的功能就比较全了，其他的功能也还有很多，比如 PV啦，友链啦，搜索啦，笔者晚点会补上的。这期就先这样了，诸君，好运。<br><img src=\"https://cl.ly/1V0a2f2p0a1y/comic_dance.gif\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/18/hexo-Blog-method/\">https://millionaryearl.github.io/2016/09/18/hexo-Blog-method/</a></p>\n","excerpt":"<p>主题相关的界面工作完成之后，这个博客总算是有点样子。但是我看来看去，赶脚似乎大概眉笔好像有那么一点点简陋的哇。所以这一期我们打算看看有哪些附属功能可以加到博客上。<br><strong><em>新任务获得：美化个人网站-附属功能</em></strong> </p>","more":"<h2 id=\"功能组件\"><a href=\"#功能组件\" class=\"headerlink\" title=\"功能组件\"></a>功能组件</h2><h3 id=\"评论模块\"><a href=\"#评论模块\" class=\"headerlink\" title=\"评论模块\"></a>评论模块</h3><p>有的theme可能带有评论，而有的没有。可选的插件有 <a href=\"https://disqus.com\"><strong><em>DISQUS</em></strong></a> （更简洁偏国外） 和 <a href=\"http://duoshuo.com\"><strong><em>多说</em></strong></a>（更社交偏国内）, 这里我们选用 <strong>DISQUS</strong></p>\n<ol>\n<li>在<strong>DISQUS</strong>上注册账号</li>\n<li>在<strong>DISQUS</strong>上注册一个网站,得到网站的shortname</li>\n<li>在工程目录里找到<code>_config.yml</code>，加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Disqus</div><div class=\"line\">disqus_shortname: shortname</div></pre></td></tr></table></figure>\n<ol>\n<li>更多评论样式设置或者相关疑问，<a href=\"http://morris821028.github.io/2014/04/12/web/hexo-comment/\">正面上我</a></li>\n</ol>\n<h3 id=\"打赏模块\"><a href=\"#打赏模块\" class=\"headerlink\" title=\"打赏模块\"></a>打赏模块</h3><p>这个虽然说是正常人都不太会用的废物功能，但万一呢，是吧。万一又个慧眼独具，目光深邃的好汉看出来本人骨骼精奇，死乞白赖的非要给我打上呢是吧，所以本着用户至上的原则，咱还是加上这个模块吧</p>\n<p>首先去看下<code>/themes/your_theme/layout/macro</code>途径下有没有 <code>reward.swig</code>文件，没有的话就新建，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.alipay or theme.wechatpay %&#125;</div><div class=\"line\">  &lt;div style=&quot;padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;&quot;&gt;</div><div class=\"line\">    &lt;div&gt;&#123;&#123; theme.reward_comment &#125;&#125;&lt;/div&gt;</div><div class=\"line\">    &lt;button id=&quot;rewardButton&quot; disable=&quot;enable&quot; onclick=&quot;var qr = document.getElementById(&apos;QR&apos;); if (qr.style.display === &apos;none&apos;) &#123;qr.style.display=&apos;block&apos;;&#125; else &#123;qr.style.display=&apos;none&apos;&#125;&quot;&gt;</div><div class=\"line\">      &lt;span&gt;赏&lt;/span&gt;</div><div class=\"line\">    &lt;/button&gt;</div><div class=\"line\">    &lt;div id=&quot;QR&quot; style=&quot;display: none;&quot;&gt;</div><div class=\"line\">      &#123;% if theme.wechatpay %&#125;</div><div class=\"line\">        &lt;div id=&quot;wechat&quot; style=&quot;display: inline-block&quot;&gt;</div><div class=\"line\">          &lt;img id=&quot;wechat_qr&quot; src=&quot;&#123;&#123; theme.wechatpay &#125;&#125;&quot; alt=&quot;&#123;&#123; theme.author &#125;&#125; WeChat Pay&quot;/&gt;</div><div class=\"line\">          &lt;p&gt;微信打赏&lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &#123;% endif %&#125;</div><div class=\"line\">      &#123;% if theme.alipay %&#125;</div><div class=\"line\">        &lt;div id=&quot;alipay&quot; style=&quot;display: inline-block&quot;&gt;</div><div class=\"line\">          &lt;img id=&quot;alipay_qr&quot; src=&quot;&#123;&#123; theme.alipay &#125;&#125;&quot; alt=&quot;&#123;&#123; theme.author &#125;&#125; Alipay&quot;/&gt;</div><div class=\"line\">          &lt;p&gt;支付宝打赏&lt;/p&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &#123;% endif %&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure>\n<p>然后看下同路径下的<code>post.swig</code>文件, 确保在<code>&lt;footer class=&quot;post-footer&quot;&gt;</code>之前有这么一段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if not is_index %&#125;</div><div class=\"line\">     &#123;% include &apos;reward.swig&apos; %&#125;</div><div class=\"line\">   &#123;% endif %&#125;</div><div class=\"line\"> &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>再后去<strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>，设置如下键值对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Donate 文章末尾显示打赏按钮</div><div class=\"line\">reward_comment: 我知道是不会有人点的，但万一有人想不开呢？</div><div class=\"line\">wechatpay: https://cl.ly/3W3I3O3t1622/wexinpay.JPG</div><div class=\"line\">alipay: https://cl.ly/3t1O403j2P1F/alipay.JPG</div></pre></td></tr></table></figure>\n<p>最后记得把那两个二维码的图片地址换成你自己的，不然就算你骨骼精奇，人也是把钱汇给我了。。。当然你要真倔强不换，我也是很欢迎滴。<br><img src=\"https://cl.ly/0a0n3y3t3136/comic_spiderman.jpg\" alt=\"\"></p>\n<h3 id=\"RSS开启\"><a href=\"#RSS开启\" class=\"headerlink\" title=\"RSS开启\"></a>RSS开启</h3><p>这RSS开启了之后么，就可以方便别人订阅你的博客了，要装上也挺简单。先去命令行里主工程目录下运行</p>\n<pre><code>$ npm install hexo-generator-feed --save\n</code></pre><p>然后去<strong>站点配置文件</strong><code>(工程主目录下的_config.yml)</code>里配置一下. P.S.似乎<code>Next</code>主题可以跳过这步，因为在<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里，已经设好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">feed:</div><div class=\"line\">    type: atom</div><div class=\"line\">    path: atom.xml</div><div class=\"line\">    limit: 20</div></pre></td></tr></table></figure></p>\n<h3 id=\"社交连接\"><a href=\"#社交连接\" class=\"headerlink\" title=\"社交连接\"></a>社交连接</h3><p>去到<strong>主题配置文件</strong><code>(/themes/next/_config.yml)</code>里，先找到<code>social</code>键，按如下格式添加键值对</p>\n<pre><code>social_name: link_address\ne.g.\nGitHub: https://github.com/Millionaryearl\nWeibo: http://weibo.com/2334525960/profile?topnav=1&amp;wvr=6&amp;is_all=1\nPersonal: http://dukewei.typify.io\n</code></pre><p>然后去给对应的连接加上图标，这个图标和上篇里菜单项目图标一样，也是由 <a href=\"http://fontawesome.io\">Font Awesome</a> 提供的</p>\n<pre><code>social_name: icon_name\n(e.g.)\nGitHub: github\nTwitter: twitter\nWeibo: weibo\nPersonal: home\n</code></pre><h3 id=\"结尾样式-版权说明\"><a href=\"#结尾样式-版权说明\" class=\"headerlink\" title=\"结尾样式-版权说明\"></a>结尾样式-版权说明</h3><p>在主工程目录下，新建一个名为<code>scripts</code>的文件夹，在其中，新建一个AddTail.js脚本文件，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Filename: AddTail.js</div><div class=\"line\"></div><div class=\"line\">// Add a tail to every post from tail.md</div><div class=\"line\">// Great for adding copyright info</div><div class=\"line\"></div><div class=\"line\">var fs = require(&apos;fs&apos;);</div><div class=\"line\"></div><div class=\"line\">hexo.extend.filter.register(&apos;before_post_render&apos;, function(data)&#123;</div><div class=\"line\">\tif(data.copyright == false) return data;</div><div class=\"line\">\t</div><div class=\"line\">\t// Add seperate line</div><div class=\"line\">\tdata.content += &apos;\\n___\\n&apos;;</div><div class=\"line\">\t</div><div class=\"line\">\t// Try to read tail.md</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\tvar file_content = fs.readFileSync(&apos;tail.md&apos;);</div><div class=\"line\">\t\tif(file_content &amp;&amp; data.content.length &gt; 50) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tdata.content += file_content;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; catch (err) &#123;</div><div class=\"line\">\t\tif (err.code !== &apos;ENOENT&apos;) throw err;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t// No process for ENOENT error</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  \t// 添加具体文章链接, 不需要去掉即可</div><div class=\"line\">\tvar permalink = &apos;\\n本文链接：&apos; + data.permalink;</div><div class=\"line\">\tdata.content += permalink;</div><div class=\"line\">  </div><div class=\"line\">\treturn data;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后在工程主目录下新建一个<code>tail.md</code>文件，其中写上你的博客结尾内容，比如作者就写了下版权的破事儿</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>感觉用 <strong><em>NEXT</em></strong> 的博主特别多，所以咱要稍微搞些不一样的东西，比如换换背景什么的。<br>首先去<code>/themes/next/source/js/src</code>路径下新建你的样式文件，例如<code>particle.js</code></p>\n<pre><code>!function(){function n(n,e,t){return n.getAttribute(e)||t}function e(n){return document.getElementsByTagName(n)}function t(){var t=e(&quot;script&quot;),o=t.length,i=t[o-1];return{l:o,z:n(i,&quot;zIndex&quot;,-1),o:n(i,&quot;opacity&quot;,.5),c:n(i,&quot;color&quot;,&quot;0,0,0&quot;),n:n(i,&quot;count&quot;,99)}}function o(){c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function i(){l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i){for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;0?-1:1,i.ya*=i.y&gt;a||i.y&lt;0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;null!==n.x&amp;&amp;null!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/2&amp;&amp;(i.x-=.03*o,i.y-=.03*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle=&quot;rgba(&quot;+m.c+&quot;,&quot;+(t+.2)+&quot;)&quot;,l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)}),r(i)}var c,a,u=document.createElement(&quot;canvas&quot;),m=t(),d=&quot;c_n&quot;+m.l,l=u.getContext(&quot;2d&quot;),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n){window.setTimeout(n,1e3/45)},x=Math.random,w={x:null,y:null,max:2e4};u.id=d,u.style.cssText=&quot;position:fixed;top:0;left:0;z-index:&quot;+m.z+&quot;;opacity:&quot;+m.o,e(&quot;body&quot;)[0].appendChild(u),o(),window.onresize=o,window.onmousemove=function(n){n=n||window.event,w.x=n.clientX,w.y=n.clientY},window.onmouseout=function(){w.x=null,w.y=null};for(var y=[],s=0;m.n&gt;s;s++){var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push({x:f,y:h,xa:g,ya:p,max:6e3})}setTimeout(function(){i()},100)}();\n</code></pre><p>然后在<code>/themes/next/layout</code>路径下的<code>_layout.swig</code>文件里，最后的<code>body</code>标签上，引用我们刚新建的js文件</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particle.js&quot;&gt;&lt;/script&gt;\n</code></pre><h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>至此基本上博客的功能就比较全了，其他的功能也还有很多，比如 PV啦，友链啦，搜索啦，笔者晚点会补上的。这期就先这样了，诸君，好运。<br><img src=\"https://cl.ly/1V0a2f2p0a1y/comic_dance.gif\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/18/hexo-Blog-method/\">https://millionaryearl.github.io/2016/09/18/hexo-Blog-method/</a></p>"},{"title":"Crawl Web Content - 环境搭配与基础爬虫","date":"2016-10-02T03:39:40.000Z","_content":"\n写这篇博客呢，主要是为了响应之前打算自己搞个小说阅览App的想法。作为整个项目的一部分，我们需要自己利用爬虫工具去爬取网上的小说内容。\n***新任务获得：制作爬虫并爬取网络内容***\n\n<!--more-->\n\n打开炼成书，查询 网络爬虫 项目：\n`scrapy／ pyspider/ beautifulSoup = 爬虫`\n这三个都是比较成熟的python爬虫框架。[scrapy][1] 是其中最出名的，[pyspider][2] 是个国人大神写的，[beautifulSoup][3] 老实说但就爬虫功能并不完整，主要是还能干点别的。至于你要是问作者为啥推荐的都是python的，php不能做爬虫么？那肯定是可以的啊，只不过作者太菜了，还无力使用世界上最伟大的语言好吧。\n![][4]\n\n***任务更新：使用Scrapy爬取网络内容***\n\n## 配置 Scrapy\n### 准备工作\n首先我们肯定是把`Python`给安装一下的么，不会的伙计们请[正面上我][5],在命令行里输入`python`，能看到如下就可以了\n\n    Python 2.7.12 (default, Jun 29 2016, 14:05:02) \n    [GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> \n    \n### 安装\n由于`Scrapy`需要 C 语言编译器及其开发前缀。 在 OSX 里这些都是由`Apple Xcode development tool`提供的， 在命令行里输入：\n\n    $ xcode-select --install\n    \n然后就是使用`pip`指令，安装`Scrapy`了，在命令行里输入：\n\n    $ pip install Scrapy\n\n再输入`Scrapy`，能看到如下结果就可以了\n\n    Scrapy 1.1.3 - no active project\n    Usage:\n    \tscrapy <command> [options] [args]\n    ...\n至此么，前期准备工作就都弄好了. 这里我们设定将要爬取的网络内容为这个[小说的章节目录信息][6]P.S.其他系统的安装教程请，[正面上我][7]\n***任务更新：使用Scrapy爬取小说的章节目录信息***\n## 爬虫制作\n### 创建项目\n伟大的奥斯忒懦夫司机·作者曾经说过\n    \n>在使用爬虫之前，你必须先拥有一个爬虫。而在拥有爬虫之前，你需要先有个放置爬虫的地方。\n\n所以我们需要先新建一个Scrapy项目。打开命令行，输入命令：\n\n    $ scrapy startproject fiction\n输入命令`cd yourProjName`进入工程目录后，你就能看到自动创建的主体文件\n\n+ `scrapy.cfg`： 项目的配置文件\n+ `fiction/`：项目的python模块。（我们代码工作主要在这里面）\n+ `fiction/items.py`： 定义抓取的模型\n+ `fiction/pipelines.py`： 模型管道文件.\n+ `fiction/settings.py`： 爬虫配置文件.\n+ `fiction/spiders/`： 放置爬虫代码的目录.\n\n### 定义模型\n*Item*是用于承载爬取到的数据的最小容器。和常规的ORM一样，你需要先创建一个`scrapy.Item`的类，然后定义你需要的类属性。比如对于小说的章节目录，我们需要知道每章的名字与链接地址，所以设定如下：\n\n    from scrapy.item import Item, Field\n    class FictionItem(Item):\n    \ttitle = Field()\n    \turl = Field()\n\n### 编写爬虫\n一个项目里可以拥有多个爬虫，输入命令`$ scrapy genspider -l` 我们就能看到`Scrapy` 提供给我们的四种基本的模版：\n    \n    Available templates:\n    \tbasic\n    \tcrawl\n    \tcsvfeed\n    \txmlfeed\n今次我们就直接使用`genspider`命令创建最基础的`basic`模版了，输入命令：\n    \n    scrapy genspider biquge www.biquge.tw\n    //formule\n    scrapy genspider -t crwal exmaple example.com\n\n这时候去到`/spiders`文件夹下，就可以看到这个名为`biquge`的爬虫文件了\n\n    # -*- coding: utf-8 -*-\n    import scrapy\n    class biqugeSpider(scrapy.Spider):\n    \tname = \"biquge\"\n    \tallowed_domains = [\"http://www.biquge.tw/\"]\n    \tstart_urls = (\n        \t'http://www.biquge.tw/0_972/',\n    \t)\n\n    \tdef parse(self, response):\n        \tpass\n \n打开爬虫文件，这里我们可以看到三个主要属性和一个主要方法：\n \n + name : 爬虫的名字与唯一标识，不可以和其他爬虫重复，\n + allowed_domains : 允许爬取的域名\n + start_urls : 启动爬取的url列表\n + parse(): 解析抓到网页\n\n粘贴如下代码到`fiction/spiders/biquge.py`文件中：\n \n ```\n # -*- coding: utf-8 -*-  \n\nfrom scrapy.spiders import Spider\nfrom scrapy.selector import Selector\nfrom fiction.items import FictionItem\n\nclass BiqugeSpider(Spider):\n    name = \"biquge\"\n    allowed_domains = [\"http://www.biquge.tw/\"]\n    start_urls = (\n        'http://www.biquge.tw/0_972/',\n    )\n\n    def parse(self, response):\n        chapters = response.xpath('//dd')\n        items = []\n\n        for chapter in chapters:\n            item = FictionItem()\n            item['url'] = chapter.xpath(\n            \t'a/@href').extract()\n            item['title'] = chapter.xpath(\n            \t'a/text()').extract()\n            items.append(item)\n\n            print item['url'], item['title']\n\n        return items\n ```\n \n### 开始爬取\n终于可以开始爬数据了，在命令行里输入命令：\n\n    $ scrapy crawl biquge -o result.json\n    \n![][8]\n\n命令行里你应该能看到如下的结果：\n\n    2016-09-29 16:56:09 [scrapy] INFO: Scrapy 1.1.3 started (bot: fiction)\n    2016-09-29 16:56:09 [scrapy] INFO: Optional features available: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Overridden settings: {}\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled extensions: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled downloader middlewares: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled spider middlewares: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled item pipelines: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Spider opened\n    ...\n    2016-09-29 16:56:09 [scrapy] INFO: Closing spider (finished)\n    2016-09-29 16:56:16 [scrapy] INFO: Stored json feed (1622 items) in: result.json\n\n然后打开你的工作目录，你会发现多了一个`result.json`文件。打开该文件你就可以看到本次爬取的结果了－小说的章节目录：\n\n    [\n    {\"url\": [\"/0_972/603364.html\"], \"title\": [\"\\u7b2c\\u4e00\\u7ae0 \\u592a\\u9633\\u6d88\\u5931\"]},\n    {\"url\": [\"/0_972/603365.html\"], \"title\": [\"\\u7b2c\\u4e8c\\u7ae0 \\u5168\\u7403\\u6050\\u614c\"]},\n    {\"url\": [\"/0_972/603366.html\"], \"title\": [\"\\u7b2c\\u4e09\\u7ae0 \\u9ed1\\u6697\\u65f6\\u4ee3\"]},\n    {\"url\": [\"/0_972/603367.html\"], \"title\": [\"\\u7b2c\\u56db\\u7ae0 \\u602a\\u7269\\u964d\\u4e34\"]},\n    {\"url\": [\"/0_972/603368.html\"], \"title\": [\"\\u7b2c\\u4e94\\u7ae0 \\u602a\\u7269\\u9000\\u907f\"]},\n    ...\n    \n## 尾声\n呃，总体上来说这个基础爬虫就算是完成了，虽然说有一大堆问题，什么章节名乱码啊，爬取数据的解析看不懂啊，pipeline, setting文件怎么用没说啊，但至少咱这个爬虫跑起来了不是，而且也抓到了一堆玩意儿是吧。所以今次就这么多，至于那些坑么，作者会在续集里填上的。最后惯例，诸君昌隆～\n![][9]\n\n[1]:https://scrapy.org/\n[2]:https://www.crummy.com/software/BeautifulSoup/\n[3]:https://github.com/binux/pyspider\n[4]:https://cl.ly/0Q2e06242H0G/comic_hah.jpg\n[5]:http://www.runoob.com/python/python-install.html\n[6]:http://www.biquge.tw/0_972/\n[7]:http://scrapy.readthedocs.io/en/latest/intro/install.html\n[8]:https://cl.ly/0G3e1B16362x/comic_puke.gif\n[9]:https://cl.ly/3E1B0x3d1Q3L/comic_disaster_girl.jpg","source":"_posts/python-Scrapy-framework.md","raw":"---\ntitle: Crawl Web Content - 环境搭配与基础爬虫\ndate: 2016-10-02 11:39:40\ntags: Python\ncategories: \"Scrapy\"\n---\n\n写这篇博客呢，主要是为了响应之前打算自己搞个小说阅览App的想法。作为整个项目的一部分，我们需要自己利用爬虫工具去爬取网上的小说内容。\n***新任务获得：制作爬虫并爬取网络内容***\n\n<!--more-->\n\n打开炼成书，查询 网络爬虫 项目：\n`scrapy／ pyspider/ beautifulSoup = 爬虫`\n这三个都是比较成熟的python爬虫框架。[scrapy][1] 是其中最出名的，[pyspider][2] 是个国人大神写的，[beautifulSoup][3] 老实说但就爬虫功能并不完整，主要是还能干点别的。至于你要是问作者为啥推荐的都是python的，php不能做爬虫么？那肯定是可以的啊，只不过作者太菜了，还无力使用世界上最伟大的语言好吧。\n![][4]\n\n***任务更新：使用Scrapy爬取网络内容***\n\n## 配置 Scrapy\n### 准备工作\n首先我们肯定是把`Python`给安装一下的么，不会的伙计们请[正面上我][5],在命令行里输入`python`，能看到如下就可以了\n\n    Python 2.7.12 (default, Jun 29 2016, 14:05:02) \n    [GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> \n    \n### 安装\n由于`Scrapy`需要 C 语言编译器及其开发前缀。 在 OSX 里这些都是由`Apple Xcode development tool`提供的， 在命令行里输入：\n\n    $ xcode-select --install\n    \n然后就是使用`pip`指令，安装`Scrapy`了，在命令行里输入：\n\n    $ pip install Scrapy\n\n再输入`Scrapy`，能看到如下结果就可以了\n\n    Scrapy 1.1.3 - no active project\n    Usage:\n    \tscrapy <command> [options] [args]\n    ...\n至此么，前期准备工作就都弄好了. 这里我们设定将要爬取的网络内容为这个[小说的章节目录信息][6]P.S.其他系统的安装教程请，[正面上我][7]\n***任务更新：使用Scrapy爬取小说的章节目录信息***\n## 爬虫制作\n### 创建项目\n伟大的奥斯忒懦夫司机·作者曾经说过\n    \n>在使用爬虫之前，你必须先拥有一个爬虫。而在拥有爬虫之前，你需要先有个放置爬虫的地方。\n\n所以我们需要先新建一个Scrapy项目。打开命令行，输入命令：\n\n    $ scrapy startproject fiction\n输入命令`cd yourProjName`进入工程目录后，你就能看到自动创建的主体文件\n\n+ `scrapy.cfg`： 项目的配置文件\n+ `fiction/`：项目的python模块。（我们代码工作主要在这里面）\n+ `fiction/items.py`： 定义抓取的模型\n+ `fiction/pipelines.py`： 模型管道文件.\n+ `fiction/settings.py`： 爬虫配置文件.\n+ `fiction/spiders/`： 放置爬虫代码的目录.\n\n### 定义模型\n*Item*是用于承载爬取到的数据的最小容器。和常规的ORM一样，你需要先创建一个`scrapy.Item`的类，然后定义你需要的类属性。比如对于小说的章节目录，我们需要知道每章的名字与链接地址，所以设定如下：\n\n    from scrapy.item import Item, Field\n    class FictionItem(Item):\n    \ttitle = Field()\n    \turl = Field()\n\n### 编写爬虫\n一个项目里可以拥有多个爬虫，输入命令`$ scrapy genspider -l` 我们就能看到`Scrapy` 提供给我们的四种基本的模版：\n    \n    Available templates:\n    \tbasic\n    \tcrawl\n    \tcsvfeed\n    \txmlfeed\n今次我们就直接使用`genspider`命令创建最基础的`basic`模版了，输入命令：\n    \n    scrapy genspider biquge www.biquge.tw\n    //formule\n    scrapy genspider -t crwal exmaple example.com\n\n这时候去到`/spiders`文件夹下，就可以看到这个名为`biquge`的爬虫文件了\n\n    # -*- coding: utf-8 -*-\n    import scrapy\n    class biqugeSpider(scrapy.Spider):\n    \tname = \"biquge\"\n    \tallowed_domains = [\"http://www.biquge.tw/\"]\n    \tstart_urls = (\n        \t'http://www.biquge.tw/0_972/',\n    \t)\n\n    \tdef parse(self, response):\n        \tpass\n \n打开爬虫文件，这里我们可以看到三个主要属性和一个主要方法：\n \n + name : 爬虫的名字与唯一标识，不可以和其他爬虫重复，\n + allowed_domains : 允许爬取的域名\n + start_urls : 启动爬取的url列表\n + parse(): 解析抓到网页\n\n粘贴如下代码到`fiction/spiders/biquge.py`文件中：\n \n ```\n # -*- coding: utf-8 -*-  \n\nfrom scrapy.spiders import Spider\nfrom scrapy.selector import Selector\nfrom fiction.items import FictionItem\n\nclass BiqugeSpider(Spider):\n    name = \"biquge\"\n    allowed_domains = [\"http://www.biquge.tw/\"]\n    start_urls = (\n        'http://www.biquge.tw/0_972/',\n    )\n\n    def parse(self, response):\n        chapters = response.xpath('//dd')\n        items = []\n\n        for chapter in chapters:\n            item = FictionItem()\n            item['url'] = chapter.xpath(\n            \t'a/@href').extract()\n            item['title'] = chapter.xpath(\n            \t'a/text()').extract()\n            items.append(item)\n\n            print item['url'], item['title']\n\n        return items\n ```\n \n### 开始爬取\n终于可以开始爬数据了，在命令行里输入命令：\n\n    $ scrapy crawl biquge -o result.json\n    \n![][8]\n\n命令行里你应该能看到如下的结果：\n\n    2016-09-29 16:56:09 [scrapy] INFO: Scrapy 1.1.3 started (bot: fiction)\n    2016-09-29 16:56:09 [scrapy] INFO: Optional features available: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Overridden settings: {}\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled extensions: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled downloader middlewares: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled spider middlewares: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Enabled item pipelines: ...\n    2016-09-29 16:56:09 [scrapy] INFO: Spider opened\n    ...\n    2016-09-29 16:56:09 [scrapy] INFO: Closing spider (finished)\n    2016-09-29 16:56:16 [scrapy] INFO: Stored json feed (1622 items) in: result.json\n\n然后打开你的工作目录，你会发现多了一个`result.json`文件。打开该文件你就可以看到本次爬取的结果了－小说的章节目录：\n\n    [\n    {\"url\": [\"/0_972/603364.html\"], \"title\": [\"\\u7b2c\\u4e00\\u7ae0 \\u592a\\u9633\\u6d88\\u5931\"]},\n    {\"url\": [\"/0_972/603365.html\"], \"title\": [\"\\u7b2c\\u4e8c\\u7ae0 \\u5168\\u7403\\u6050\\u614c\"]},\n    {\"url\": [\"/0_972/603366.html\"], \"title\": [\"\\u7b2c\\u4e09\\u7ae0 \\u9ed1\\u6697\\u65f6\\u4ee3\"]},\n    {\"url\": [\"/0_972/603367.html\"], \"title\": [\"\\u7b2c\\u56db\\u7ae0 \\u602a\\u7269\\u964d\\u4e34\"]},\n    {\"url\": [\"/0_972/603368.html\"], \"title\": [\"\\u7b2c\\u4e94\\u7ae0 \\u602a\\u7269\\u9000\\u907f\"]},\n    ...\n    \n## 尾声\n呃，总体上来说这个基础爬虫就算是完成了，虽然说有一大堆问题，什么章节名乱码啊，爬取数据的解析看不懂啊，pipeline, setting文件怎么用没说啊，但至少咱这个爬虫跑起来了不是，而且也抓到了一堆玩意儿是吧。所以今次就这么多，至于那些坑么，作者会在续集里填上的。最后惯例，诸君昌隆～\n![][9]\n\n[1]:https://scrapy.org/\n[2]:https://www.crummy.com/software/BeautifulSoup/\n[3]:https://github.com/binux/pyspider\n[4]:https://cl.ly/0Q2e06242H0G/comic_hah.jpg\n[5]:http://www.runoob.com/python/python-install.html\n[6]:http://www.biquge.tw/0_972/\n[7]:http://scrapy.readthedocs.io/en/latest/intro/install.html\n[8]:https://cl.ly/0G3e1B16362x/comic_puke.gif\n[9]:https://cl.ly/3E1B0x3d1Q3L/comic_disaster_girl.jpg","slug":"python-Scrapy-framework","published":1,"updated":"2016-10-02T03:39:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvlv0008xy2yfb7olhyo","content":"<p>写这篇博客呢，主要是为了响应之前打算自己搞个小说阅览App的想法。作为整个项目的一部分，我们需要自己利用爬虫工具去爬取网上的小说内容。<br><strong><em>新任务获得：制作爬虫并爬取网络内容</em></strong></p>\n<a id=\"more\"></a>\n<p>打开炼成书，查询 网络爬虫 项目：<br><code>scrapy／ pyspider/ beautifulSoup = 爬虫</code><br>这三个都是比较成熟的python爬虫框架。<a href=\"https://scrapy.org/\" target=\"_blank\" rel=\"external\">scrapy</a> 是其中最出名的，<a href=\"https://www.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"external\">pyspider</a> 是个国人大神写的，<a href=\"https://github.com/binux/pyspider\" target=\"_blank\" rel=\"external\">beautifulSoup</a> 老实说但就爬虫功能并不完整，主要是还能干点别的。至于你要是问作者为啥推荐的都是python的，php不能做爬虫么？那肯定是可以的啊，只不过作者太菜了，还无力使用世界上最伟大的语言好吧。<br><img src=\"https://cl.ly/0Q2e06242H0G/comic_hah.jpg\" alt=\"\"></p>\n<p><strong><em>任务更新：使用Scrapy爬取网络内容</em></strong></p>\n<h2 id=\"配置-Scrapy\"><a href=\"#配置-Scrapy\" class=\"headerlink\" title=\"配置 Scrapy\"></a>配置 Scrapy</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先我们肯定是把<code>Python</code>给安装一下的么，不会的伙计们请<a href=\"http://www.runoob.com/python/python-install.html\" target=\"_blank\" rel=\"external\">正面上我</a>,在命令行里输入<code>python</code>，能看到如下就可以了</p>\n<pre><code>Python 2.7.12 (default, Jun 29 2016, 14:05:02) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; \n</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>由于<code>Scrapy</code>需要 C 语言编译器及其开发前缀。 在 OSX 里这些都是由<code>Apple Xcode development tool</code>提供的， 在命令行里输入：</p>\n<pre><code>$ xcode-select --install\n</code></pre><p>然后就是使用<code>pip</code>指令，安装<code>Scrapy</code>了，在命令行里输入：</p>\n<pre><code>$ pip install Scrapy\n</code></pre><p>再输入<code>Scrapy</code>，能看到如下结果就可以了</p>\n<pre><code>Scrapy 1.1.3 - no active project\nUsage:\n    scrapy &lt;command&gt; [options] [args]\n...\n</code></pre><p>至此么，前期准备工作就都弄好了. 这里我们设定将要爬取的网络内容为这个<a href=\"http://www.biquge.tw/0_972/\" target=\"_blank\" rel=\"external\">小说的章节目录信息</a>P.S.其他系统的安装教程请，<a href=\"http://scrapy.readthedocs.io/en/latest/intro/install.html\" target=\"_blank\" rel=\"external\">正面上我</a><br><strong><em>任务更新：使用Scrapy爬取小说的章节目录信息</em></strong></p>\n<h2 id=\"爬虫制作\"><a href=\"#爬虫制作\" class=\"headerlink\" title=\"爬虫制作\"></a>爬虫制作</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>伟大的奥斯忒懦夫司机·作者曾经说过</p>\n<blockquote>\n<p>在使用爬虫之前，你必须先拥有一个爬虫。而在拥有爬虫之前，你需要先有个放置爬虫的地方。</p>\n</blockquote>\n<p>所以我们需要先新建一个Scrapy项目。打开命令行，输入命令：</p>\n<pre><code>$ scrapy startproject fiction\n</code></pre><p>输入命令<code>cd yourProjName</code>进入工程目录后，你就能看到自动创建的主体文件</p>\n<ul>\n<li><code>scrapy.cfg</code>： 项目的配置文件</li>\n<li><code>fiction/</code>：项目的python模块。（我们代码工作主要在这里面）</li>\n<li><code>fiction/items.py</code>： 定义抓取的模型</li>\n<li><code>fiction/pipelines.py</code>： 模型管道文件.</li>\n<li><code>fiction/settings.py</code>： 爬虫配置文件.</li>\n<li><code>fiction/spiders/</code>： 放置爬虫代码的目录.</li>\n</ul>\n<h3 id=\"定义模型\"><a href=\"#定义模型\" class=\"headerlink\" title=\"定义模型\"></a>定义模型</h3><p><em>Item</em>是用于承载爬取到的数据的最小容器。和常规的ORM一样，你需要先创建一个<code>scrapy.Item</code>的类，然后定义你需要的类属性。比如对于小说的章节目录，我们需要知道每章的名字与链接地址，所以设定如下：</p>\n<pre><code>from scrapy.item import Item, Field\nclass FictionItem(Item):\n    title = Field()\n    url = Field()\n</code></pre><h3 id=\"编写爬虫\"><a href=\"#编写爬虫\" class=\"headerlink\" title=\"编写爬虫\"></a>编写爬虫</h3><p>一个项目里可以拥有多个爬虫，输入命令<code>$ scrapy genspider -l</code> 我们就能看到<code>Scrapy</code> 提供给我们的四种基本的模版：</p>\n<pre><code>Available templates:\n    basic\n    crawl\n    csvfeed\n    xmlfeed\n</code></pre><p>今次我们就直接使用<code>genspider</code>命令创建最基础的<code>basic</code>模版了，输入命令：</p>\n<pre><code>scrapy genspider biquge www.biquge.tw\n//formule\nscrapy genspider -t crwal exmaple example.com\n</code></pre><p>这时候去到<code>/spiders</code>文件夹下，就可以看到这个名为<code>biquge</code>的爬虫文件了</p>\n<pre><code># -*- coding: utf-8 -*-\nimport scrapy\nclass biqugeSpider(scrapy.Spider):\n    name = &quot;biquge&quot;\n    allowed_domains = [&quot;http://www.biquge.tw/&quot;]\n    start_urls = (\n        &apos;http://www.biquge.tw/0_972/&apos;,\n    )\n\n    def parse(self, response):\n        pass\n</code></pre><p>打开爬虫文件，这里我们可以看到三个主要属性和一个主要方法：</p>\n<ul>\n<li>name : 爬虫的名字与唯一标识，不可以和其他爬虫重复，</li>\n<li>allowed_domains : 允许爬取的域名</li>\n<li>start_urls : 启动爬取的url列表</li>\n<li>parse(): 解析抓到网页</li>\n</ul>\n<p>粘贴如下代码到<code>fiction/spiders/biquge.py</code>文件中：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # -*- coding: utf-8 -*-  </div><div class=\"line\"></div><div class=\"line\">from scrapy.spiders import Spider</div><div class=\"line\">from scrapy.selector import Selector</div><div class=\"line\">from fiction.items import FictionItem</div><div class=\"line\"></div><div class=\"line\">class BiqugeSpider(Spider):</div><div class=\"line\">    name = &quot;biquge&quot;</div><div class=\"line\">    allowed_domains = [&quot;http://www.biquge.tw/&quot;]</div><div class=\"line\">    start_urls = (</div><div class=\"line\">        &apos;http://www.biquge.tw/0_972/&apos;,</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">    def parse(self, response):</div><div class=\"line\">        chapters = response.xpath(&apos;//dd&apos;)</div><div class=\"line\">        items = []</div><div class=\"line\"></div><div class=\"line\">        for chapter in chapters:</div><div class=\"line\">            item = FictionItem()</div><div class=\"line\">            item[&apos;url&apos;] = chapter.xpath(</div><div class=\"line\">            \t&apos;a/@href&apos;).extract()</div><div class=\"line\">            item[&apos;title&apos;] = chapter.xpath(</div><div class=\"line\">            \t&apos;a/text()&apos;).extract()</div><div class=\"line\">            items.append(item)</div><div class=\"line\"></div><div class=\"line\">            print item[&apos;url&apos;], item[&apos;title&apos;]</div><div class=\"line\"></div><div class=\"line\">        return items</div></pre></td></tr></table></figure>\n<h3 id=\"开始爬取\"><a href=\"#开始爬取\" class=\"headerlink\" title=\"开始爬取\"></a>开始爬取</h3><p>终于可以开始爬数据了，在命令行里输入命令：</p>\n<pre><code>$ scrapy crawl biquge -o result.json\n</code></pre><p><img src=\"https://cl.ly/0G3e1B16362x/comic_puke.gif\" alt=\"\"></p>\n<p>命令行里你应该能看到如下的结果：</p>\n<pre><code>2016-09-29 16:56:09 [scrapy] INFO: Scrapy 1.1.3 started (bot: fiction)\n2016-09-29 16:56:09 [scrapy] INFO: Optional features available: ...\n2016-09-29 16:56:09 [scrapy] INFO: Overridden settings: {}\n2016-09-29 16:56:09 [scrapy] INFO: Enabled extensions: ...\n2016-09-29 16:56:09 [scrapy] INFO: Enabled downloader middlewares: ...\n2016-09-29 16:56:09 [scrapy] INFO: Enabled spider middlewares: ...\n2016-09-29 16:56:09 [scrapy] INFO: Enabled item pipelines: ...\n2016-09-29 16:56:09 [scrapy] INFO: Spider opened\n...\n2016-09-29 16:56:09 [scrapy] INFO: Closing spider (finished)\n2016-09-29 16:56:16 [scrapy] INFO: Stored json feed (1622 items) in: result.json\n</code></pre><p>然后打开你的工作目录，你会发现多了一个<code>result.json</code>文件。打开该文件你就可以看到本次爬取的结果了－小说的章节目录：</p>\n<pre><code>[\n{&quot;url&quot;: [&quot;/0_972/603364.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e00\\u7ae0 \\u592a\\u9633\\u6d88\\u5931&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603365.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e8c\\u7ae0 \\u5168\\u7403\\u6050\\u614c&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603366.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e09\\u7ae0 \\u9ed1\\u6697\\u65f6\\u4ee3&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603367.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u56db\\u7ae0 \\u602a\\u7269\\u964d\\u4e34&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603368.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e94\\u7ae0 \\u602a\\u7269\\u9000\\u907f&quot;]},\n...\n</code></pre><h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>呃，总体上来说这个基础爬虫就算是完成了，虽然说有一大堆问题，什么章节名乱码啊，爬取数据的解析看不懂啊，pipeline, setting文件怎么用没说啊，但至少咱这个爬虫跑起来了不是，而且也抓到了一堆玩意儿是吧。所以今次就这么多，至于那些坑么，作者会在续集里填上的。最后惯例，诸君昌隆～<br><img src=\"https://cl.ly/3E1B0x3d1Q3L/comic_disaster_girl.jpg\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/10/02/python-Scrapy-framework/\">https://millionaryearl.github.io/2016/10/02/python-Scrapy-framework/</a></p>\n","excerpt":"<p>写这篇博客呢，主要是为了响应之前打算自己搞个小说阅览App的想法。作为整个项目的一部分，我们需要自己利用爬虫工具去爬取网上的小说内容。<br><strong><em>新任务获得：制作爬虫并爬取网络内容</em></strong></p>","more":"<p>打开炼成书，查询 网络爬虫 项目：<br><code>scrapy／ pyspider/ beautifulSoup = 爬虫</code><br>这三个都是比较成熟的python爬虫框架。<a href=\"https://scrapy.org/\">scrapy</a> 是其中最出名的，<a href=\"https://www.crummy.com/software/BeautifulSoup/\">pyspider</a> 是个国人大神写的，<a href=\"https://github.com/binux/pyspider\">beautifulSoup</a> 老实说但就爬虫功能并不完整，主要是还能干点别的。至于你要是问作者为啥推荐的都是python的，php不能做爬虫么？那肯定是可以的啊，只不过作者太菜了，还无力使用世界上最伟大的语言好吧。<br><img src=\"https://cl.ly/0Q2e06242H0G/comic_hah.jpg\" alt=\"\"></p>\n<p><strong><em>任务更新：使用Scrapy爬取网络内容</em></strong></p>\n<h2 id=\"配置-Scrapy\"><a href=\"#配置-Scrapy\" class=\"headerlink\" title=\"配置 Scrapy\"></a>配置 Scrapy</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先我们肯定是把<code>Python</code>给安装一下的么，不会的伙计们请<a href=\"http://www.runoob.com/python/python-install.html\">正面上我</a>,在命令行里输入<code>python</code>，能看到如下就可以了</p>\n<pre><code>Python 2.7.12 (default, Jun 29 2016, 14:05:02) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; \n</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>由于<code>Scrapy</code>需要 C 语言编译器及其开发前缀。 在 OSX 里这些都是由<code>Apple Xcode development tool</code>提供的， 在命令行里输入：</p>\n<pre><code>$ xcode-select --install\n</code></pre><p>然后就是使用<code>pip</code>指令，安装<code>Scrapy</code>了，在命令行里输入：</p>\n<pre><code>$ pip install Scrapy\n</code></pre><p>再输入<code>Scrapy</code>，能看到如下结果就可以了</p>\n<pre><code>Scrapy 1.1.3 - no active project\nUsage:\n    scrapy &lt;command&gt; [options] [args]\n...\n</code></pre><p>至此么，前期准备工作就都弄好了. 这里我们设定将要爬取的网络内容为这个<a href=\"http://www.biquge.tw/0_972/\">小说的章节目录信息</a>P.S.其他系统的安装教程请，<a href=\"http://scrapy.readthedocs.io/en/latest/intro/install.html\">正面上我</a><br><strong><em>任务更新：使用Scrapy爬取小说的章节目录信息</em></strong></p>\n<h2 id=\"爬虫制作\"><a href=\"#爬虫制作\" class=\"headerlink\" title=\"爬虫制作\"></a>爬虫制作</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>伟大的奥斯忒懦夫司机·作者曾经说过</p>\n<blockquote>\n<p>在使用爬虫之前，你必须先拥有一个爬虫。而在拥有爬虫之前，你需要先有个放置爬虫的地方。</p>\n</blockquote>\n<p>所以我们需要先新建一个Scrapy项目。打开命令行，输入命令：</p>\n<pre><code>$ scrapy startproject fiction\n</code></pre><p>输入命令<code>cd yourProjName</code>进入工程目录后，你就能看到自动创建的主体文件</p>\n<ul>\n<li><code>scrapy.cfg</code>： 项目的配置文件</li>\n<li><code>fiction/</code>：项目的python模块。（我们代码工作主要在这里面）</li>\n<li><code>fiction/items.py</code>： 定义抓取的模型</li>\n<li><code>fiction/pipelines.py</code>： 模型管道文件.</li>\n<li><code>fiction/settings.py</code>： 爬虫配置文件.</li>\n<li><code>fiction/spiders/</code>： 放置爬虫代码的目录.</li>\n</ul>\n<h3 id=\"定义模型\"><a href=\"#定义模型\" class=\"headerlink\" title=\"定义模型\"></a>定义模型</h3><p><em>Item</em>是用于承载爬取到的数据的最小容器。和常规的ORM一样，你需要先创建一个<code>scrapy.Item</code>的类，然后定义你需要的类属性。比如对于小说的章节目录，我们需要知道每章的名字与链接地址，所以设定如下：</p>\n<pre><code>from scrapy.item import Item, Field\nclass FictionItem(Item):\n    title = Field()\n    url = Field()\n</code></pre><h3 id=\"编写爬虫\"><a href=\"#编写爬虫\" class=\"headerlink\" title=\"编写爬虫\"></a>编写爬虫</h3><p>一个项目里可以拥有多个爬虫，输入命令<code>$ scrapy genspider -l</code> 我们就能看到<code>Scrapy</code> 提供给我们的四种基本的模版：</p>\n<pre><code>Available templates:\n    basic\n    crawl\n    csvfeed\n    xmlfeed\n</code></pre><p>今次我们就直接使用<code>genspider</code>命令创建最基础的<code>basic</code>模版了，输入命令：</p>\n<pre><code>scrapy genspider biquge www.biquge.tw\n//formule\nscrapy genspider -t crwal exmaple example.com\n</code></pre><p>这时候去到<code>/spiders</code>文件夹下，就可以看到这个名为<code>biquge</code>的爬虫文件了</p>\n<pre><code># -*- coding: utf-8 -*-\nimport scrapy\nclass biqugeSpider(scrapy.Spider):\n    name = &quot;biquge&quot;\n    allowed_domains = [&quot;http://www.biquge.tw/&quot;]\n    start_urls = (\n        &apos;http://www.biquge.tw/0_972/&apos;,\n    )\n\n    def parse(self, response):\n        pass\n</code></pre><p>打开爬虫文件，这里我们可以看到三个主要属性和一个主要方法：</p>\n<ul>\n<li>name : 爬虫的名字与唯一标识，不可以和其他爬虫重复，</li>\n<li>allowed_domains : 允许爬取的域名</li>\n<li>start_urls : 启动爬取的url列表</li>\n<li>parse(): 解析抓到网页</li>\n</ul>\n<p>粘贴如下代码到<code>fiction/spiders/biquge.py</code>文件中：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # -*- coding: utf-8 -*-  </div><div class=\"line\"></div><div class=\"line\">from scrapy.spiders import Spider</div><div class=\"line\">from scrapy.selector import Selector</div><div class=\"line\">from fiction.items import FictionItem</div><div class=\"line\"></div><div class=\"line\">class BiqugeSpider(Spider):</div><div class=\"line\">    name = &quot;biquge&quot;</div><div class=\"line\">    allowed_domains = [&quot;http://www.biquge.tw/&quot;]</div><div class=\"line\">    start_urls = (</div><div class=\"line\">        &apos;http://www.biquge.tw/0_972/&apos;,</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">    def parse(self, response):</div><div class=\"line\">        chapters = response.xpath(&apos;//dd&apos;)</div><div class=\"line\">        items = []</div><div class=\"line\"></div><div class=\"line\">        for chapter in chapters:</div><div class=\"line\">            item = FictionItem()</div><div class=\"line\">            item[&apos;url&apos;] = chapter.xpath(</div><div class=\"line\">            \t&apos;a/@href&apos;).extract()</div><div class=\"line\">            item[&apos;title&apos;] = chapter.xpath(</div><div class=\"line\">            \t&apos;a/text()&apos;).extract()</div><div class=\"line\">            items.append(item)</div><div class=\"line\"></div><div class=\"line\">            print item[&apos;url&apos;], item[&apos;title&apos;]</div><div class=\"line\"></div><div class=\"line\">        return items</div></pre></td></tr></table></figure>\n<h3 id=\"开始爬取\"><a href=\"#开始爬取\" class=\"headerlink\" title=\"开始爬取\"></a>开始爬取</h3><p>终于可以开始爬数据了，在命令行里输入命令：</p>\n<pre><code>$ scrapy crawl biquge -o result.json\n</code></pre><p><img src=\"https://cl.ly/0G3e1B16362x/comic_puke.gif\" alt=\"\"></p>\n<p>命令行里你应该能看到如下的结果：</p>\n<pre><code>2016-09-29 16:56:09 [scrapy] INFO: Scrapy 1.1.3 started (bot: fiction)\n2016-09-29 16:56:09 [scrapy] INFO: Optional features available: ...\n2016-09-29 16:56:09 [scrapy] INFO: Overridden settings: {}\n2016-09-29 16:56:09 [scrapy] INFO: Enabled extensions: ...\n2016-09-29 16:56:09 [scrapy] INFO: Enabled downloader middlewares: ...\n2016-09-29 16:56:09 [scrapy] INFO: Enabled spider middlewares: ...\n2016-09-29 16:56:09 [scrapy] INFO: Enabled item pipelines: ...\n2016-09-29 16:56:09 [scrapy] INFO: Spider opened\n...\n2016-09-29 16:56:09 [scrapy] INFO: Closing spider (finished)\n2016-09-29 16:56:16 [scrapy] INFO: Stored json feed (1622 items) in: result.json\n</code></pre><p>然后打开你的工作目录，你会发现多了一个<code>result.json</code>文件。打开该文件你就可以看到本次爬取的结果了－小说的章节目录：</p>\n<pre><code>[\n{&quot;url&quot;: [&quot;/0_972/603364.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e00\\u7ae0 \\u592a\\u9633\\u6d88\\u5931&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603365.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e8c\\u7ae0 \\u5168\\u7403\\u6050\\u614c&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603366.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e09\\u7ae0 \\u9ed1\\u6697\\u65f6\\u4ee3&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603367.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u56db\\u7ae0 \\u602a\\u7269\\u964d\\u4e34&quot;]},\n{&quot;url&quot;: [&quot;/0_972/603368.html&quot;], &quot;title&quot;: [&quot;\\u7b2c\\u4e94\\u7ae0 \\u602a\\u7269\\u9000\\u907f&quot;]},\n...\n</code></pre><h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>呃，总体上来说这个基础爬虫就算是完成了，虽然说有一大堆问题，什么章节名乱码啊，爬取数据的解析看不懂啊，pipeline, setting文件怎么用没说啊，但至少咱这个爬虫跑起来了不是，而且也抓到了一堆玩意儿是吧。所以今次就这么多，至于那些坑么，作者会在续集里填上的。最后惯例，诸君昌隆～<br><img src=\"https://cl.ly/3E1B0x3d1Q3L/comic_disaster_girl.jpg\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/10/02/python-Scrapy-framework/\">https://millionaryearl.github.io/2016/10/02/python-Scrapy-framework/</a></p>"},{"title":"Crawl Web Content - 粗解爬虫解析流程及结果输出","date":"2016-10-09T08:29:15.000Z","_content":"\n通过上一篇博客的工作，我们拥有了一个简单爬虫。但确实有点简陋的过分了，要啥啥没有，所以今天主要就是简单讲解一下爬虫的解析流程与爬取结果的输出形式。\n***新任务获得：粗解爬虫解析流程并设置爬取结果的输出***\n\n<!--more-->\n\n## 抓取流程\n\n![][1]\n实际上爬虫的工作流程很是直白的。首先找到包含目标信息的网站的网址，写入爬虫文件的`start_urls`参数，做为爬取的起始点。同时输入适当的网址到`allowed_domains`参数，来约束爬取的范围。\n\n第二步是爬取到网站内容，这个内容基本上会以`HTML&CSS`格式呈现，这一步`scrapy`会帮我们做的，通常我们只需要运行爬虫就可以了，应对一个复杂要求(例如：应对网站反爬取设置)可以在`/settings.py`文件里配置爬虫参数。感兴趣的可以[正面上我][3]\n\n第三步是过滤抓取内容，以获得我们需要的信息。这个要求我们在运行爬虫之前制定好过滤规则，然后在运行爬虫时`scrapy`会直接使用\n\n最后一步就是输出了，无论是直接以log形式在命令行里输出，还是保存到文件里，亦或是直接输入数据库都可以.\n\n至此我们今天的任务就明确了，主要是讲解下在第三步和第四步要怎么做。\n***任务更新：合理制定爬虫过滤规则与爬虫输出设置***\n\n## 制定爬虫过滤规则\n\n因为每个抓取站点的h5文件结构都不一样，所以爬虫的可重用性比较低。对于不同的抓取目标，我们需要制定不同的抓取语句。一般的制定流程是先查阅目标站的H5结构，进而定制对应的抓取结构，最后编写抓取语句。\n\n### 查阅目标站点H5结构\n1. 在命令行里查看\n\t使用`Scrapy`的`fetch`函数就可以直接现实H5文件结构\n\t```\n\tscrapy fetch http://www.biquge.tw/0_972/\n    ```\n2. 在浏览器里查看\n这个么更直接，在浏览器里打开目标地址，然后进入开发者模式，显示网页源文件就可以看到了\n\n### 定制抓取机制\n这个么需要一定的H5和CSS基本知识，一点都不懂的可以去[W3CSchool][2]上了解一下。例如我的目标信息是：小说章节的名称与链接地址。在刚才得到的H5结构文件里，查找对应的数据单元：\n\n    <dd> <a style=\"\" href=\"/0_972/4743476.html\">第一千五百九十五章 黑暗现象</a></dd>\n\n可以看到我们需要的信息是存在于`<dd></dd>`标签内的一个`<a>`标签里的。所以我们需要的抓取机制应该是：\n\n* **先筛选出所有的`<dd></dd>`标签**\n* **然后抓取之中的`<a>`标签下的`title`和`href`两个属性下的数据**\n\n那有人可能就会问了，明明我们需要的目标信息的最小标签单元是`<a>`标签,为什么要多此一举的先去筛选出上一级的`<dd></dd>`标签？那是因为网页里有很多其他的`<a>`标签，但它们的信息并非小说的章节信息，为了过滤掉这些合规却又不是有效信息的`<a>`标签内容，我们需要加入额外的筛选条件－上一级的`<dd></dd>`标签。\n    \n    <li><a href=\"/nweph.html\">排行榜单</a></li>\n    <li><a href=\"/quanben/\">完本小说</a></li>\n    <li><a rel=\"nofollow\" href=\"/jilu.php\">阅读记录</a></li>\n\n### 编写抓取语句\n\n这个抓取语句主要是写在爬虫文件中的\"parse\"函数里。这里我们打开`fiction/spiders/biquge.py`文件并编辑如下\n\n    # -*- coding: utf-8 -*-  \n    from scrapy.spiders import Spider\n    from scrapy.selector import Selector\n    from fiction.items import FictionItem\n\n    class BiqugeSpider(Spider):\n    \tname = \"biquge\"\n    \tallowed_domains = [\"http://www.biquge.tw/\"]\n    \tstart_urls = (\n        \t'http://www.biquge.tw/0_972/',\n    \t)\n\n\t    def parse(self, response):\n\t        chapters = response.xpath('//dd')\n\t        items = []\n\t\n\t        for chapter in chapters:\n\t            item = FictionItem()\n\t            item['url'] = chapter.xpath(\n\t            \t'a/@href').extract()\n\t            item['title'] = chapter.xpath(\n\t            \t'a/text()').extract()\n\t            items.append(item)\n\t\n\t            print item['url'], item['title']\n\t\n\t        return items\n\n上面的代码很好理解，前两行是引入相关的`scrapy`基础类，第三行是引入我们自定义的数据结构（具体信息可以去上篇博客里查看－定义模型）. 再下来么就是我们爬虫类`biqugeSpider`，头三行的爬虫属性设置也在上篇说过了，直接看到重点`parse`函数。\n\n可以看到这个函数接收到了两个外部参数, `self` 和 `response`。`self`应该就是指爬虫自己，具体有啥用处，作者只能表示今天天气不错，啊哈哈哈。而`response`参数就是上述`抓取流程－第二步`抓取到全部网站内容，它应该是和上述`定制爬虫过滤规则－查阅目标站点H5结构`里看到的内容一致。\n\n接下来就如上述`定制爬虫过滤规则－定制抓取机制`计划的一样，先过滤出所有的`<dd></dd>`标签内容，并建立一个空数组用以将来存储标签对象`Fiction`。再接下来建立一个`for`循环，从每段`<dd></dd>`标签内容里，进一步过滤出`url`和`title`字段信息，并存入新建的`Fiction`对象，加入到`items`结果数组里，同时在命令行里输出`url`和`title`结果。 最后在`for`循环结束后，返回`items`结果数组(这个暂时没有，稍后我们配置结果输出到json文件时会用到)\n\n### 数据提取机制\n虽然说知道了这段代码是怎么工作的，但具体怎么写不知道啊，到底怎么样才能从HTML源码中提取数据呢？其实有些库是可以做到的：\n\n* [BeautifulSoup][4] 是在程序员间非常流行的网页分析库，它基于HTML代码的结构来构造一个Python对象， 对不良标记的处理也非常合理，但它有一个缺点：慢。\n比如这些\n* [lxml][5] 是一个基于 [ElementTree][6] (不是Python标准库的一部分)的python化的XML解析库(也可以解析HTML)。\n\n但伟大的奥斯忒懦夫司机·作者曾经又说过\n>作为一个菜鸡程序员，要有菜鸡程序员的尊严，坚决抵制听啊没听过的东西！\n\n所以有啥简单点的东西呢，找找看官网还真有－`Seletors`就可以完美替代，它是`Scrapy`自己提供的数据提取机制，可以通过特定的`XPath`和`CSS`表达式来选择 HTML文件中的某个部分。本篇作者就是用的这种提取机制，例如：\n\n    response.xpath('//dd') //提取网页内容里的所有<dd></dd>标签内容\n    ...\n    chapter.xpath('a/@href').extract() //提取chapther中<a>标签的@href属性\n    chapter.xpath('a/text()').extract() //提取chapther中<a>标签的text值\n更多的`Seletor`提取讲解，可以[正面上我][7]\n\n## 设置爬虫输出设置\n\n至此我们的爬虫可以说已经是大功告成，但数据抓是抓到了，怎么输出来用呢。大概是有三个方向：\n\n### 直接以log形式在命令行里输出\n这个最简单了，只要在爬虫文件里的`parse`函数里，使用`print`命令把相应的信息给打出来就可以了\n\n    print item['url'], item['title']\n### 保存到文件里\n半自动的呢，可以在启动爬虫时，加入输出参数 `-o outputFileName`。需要注意的是`Scrapy`默认支持四种格式:`JSON`, `JSON lines`, `CSV`, `XML`\n\n    scrapy crawl fiction -o result.json \n    // scrapy crawl spiderName -0 outputFileName\n    \n正规一点的呢，需要修改`/pipelines.py`文件如下：\n    \n    import json  \n    import codecs  \n    import re\n\n\tclass FictionPipeline(object):\n\n    def __init__(self):  \n        self.file = codecs.open('cn_zhan.json', 'wb', encoding='utf-8') \n\n    def process_item(self, item, spider):\n        if item['title']:\n            found = re.match('\\S* \\S*', str(item['title']))\n            if found:\n                print '---------', item['title']\n                line = json.dumps(dict(item), ensure_ascii=False) + \"\\n\" \n                self.file.write(line)   \n                return item\n            else:\n                print \"+++++++++ invalid chapter found ++++++++++++++++\"\n\n    def spider_closed(self, spider):\n    \tself.file.close()\n\n首先是在初始化方法里新建一个叫做`cn_zhan.json`的文件用以收纳抓取的信息，并约定它是`utf-8`格式（用来显示中文，同时打开它准备写入。第二步在`process_item`里我们根据正则表达式过滤掉不合规的`item`，并把合规的`item`（章节信息）转化成`json`语句存入之间申明的`cn_zhan.json`文件里。最后关闭这个文件。\n\n定义好`/pipelines.py`文件后，我们还需要在`/settings.py`文件里启用刚定义的输送规则：\n\n    ITEM_PIPELINES = {\n    \t#'fiction.pipelines.DuplicatesPipeline': 100,\n    \t'fiction.pipelines.FictionPipeline': 300,\n\t}\n注意在`/pipelines.py`文件里我们可以申明多个输送规则，例如这里作者还申明了一个去重原则。同时在`/settings.py`文件里启用时，`Scrapy`会依照数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内\n\n### 录入到数据库\n这个因为使用的数据库种类不同需要不同的配置，所以就先不讲解了，感兴趣的可以自己去狗哥一下\n\n## 尾声\n折腾了这么久，激动人心的时刻终于到来了，打开命令行开始运行爬虫，完成之后你就可以在你的文件夹里发现抓取的结果文件了:`cn_zhan.json`\n\n    {\"url\": [\"/0_972/603364.html\"], \"title\": [\"第一章 太阳消失\"]}\n    {\"url\": [\"/0_972/603365.html\"], \"title\": [\"第二章 全球恐慌\"]}\n    {\"url\": [\"/0_972/603366.html\"], \"title\": [\"第三章 黑暗时代\"]}\n    {\"url\": [\"/0_972/603367.html\"], \"title\": [\"第四章 怪物降临\"]}\n    ...\n完美，破费，至此我们的爬虫应该可以说是初步成型了！诸君昌隆！\n![][8]\n\n\n[1]:https://cl.ly/3h3F0j1d1P0s/python_2_1.png\n[2]:http://www.w3school.com.cn\n[3]:https://doc.scrapy.org/en/latest/topics/settings.html\n[4]:http://www.crummy.com/software/BeautifulSoup/\n[5]:http://lxml.de/\n[6]:http://docs.python.org/library/xml.etree.elementtree.html\n[7]:http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors-ref\n[8]:https://cl.ly/3S1k1Z3k3q1i/comic_success_kid.jpg\n","source":"_posts/python-Scrapy-parser.md","raw":"---\ntitle: Crawl Web Content - 粗解爬虫解析流程及结果输出\ndate: 2016-10-09 16:29:15\ntags: Python\ncategories: \"Scrapy\"\n---\n\n通过上一篇博客的工作，我们拥有了一个简单爬虫。但确实有点简陋的过分了，要啥啥没有，所以今天主要就是简单讲解一下爬虫的解析流程与爬取结果的输出形式。\n***新任务获得：粗解爬虫解析流程并设置爬取结果的输出***\n\n<!--more-->\n\n## 抓取流程\n\n![][1]\n实际上爬虫的工作流程很是直白的。首先找到包含目标信息的网站的网址，写入爬虫文件的`start_urls`参数，做为爬取的起始点。同时输入适当的网址到`allowed_domains`参数，来约束爬取的范围。\n\n第二步是爬取到网站内容，这个内容基本上会以`HTML&CSS`格式呈现，这一步`scrapy`会帮我们做的，通常我们只需要运行爬虫就可以了，应对一个复杂要求(例如：应对网站反爬取设置)可以在`/settings.py`文件里配置爬虫参数。感兴趣的可以[正面上我][3]\n\n第三步是过滤抓取内容，以获得我们需要的信息。这个要求我们在运行爬虫之前制定好过滤规则，然后在运行爬虫时`scrapy`会直接使用\n\n最后一步就是输出了，无论是直接以log形式在命令行里输出，还是保存到文件里，亦或是直接输入数据库都可以.\n\n至此我们今天的任务就明确了，主要是讲解下在第三步和第四步要怎么做。\n***任务更新：合理制定爬虫过滤规则与爬虫输出设置***\n\n## 制定爬虫过滤规则\n\n因为每个抓取站点的h5文件结构都不一样，所以爬虫的可重用性比较低。对于不同的抓取目标，我们需要制定不同的抓取语句。一般的制定流程是先查阅目标站的H5结构，进而定制对应的抓取结构，最后编写抓取语句。\n\n### 查阅目标站点H5结构\n1. 在命令行里查看\n\t使用`Scrapy`的`fetch`函数就可以直接现实H5文件结构\n\t```\n\tscrapy fetch http://www.biquge.tw/0_972/\n    ```\n2. 在浏览器里查看\n这个么更直接，在浏览器里打开目标地址，然后进入开发者模式，显示网页源文件就可以看到了\n\n### 定制抓取机制\n这个么需要一定的H5和CSS基本知识，一点都不懂的可以去[W3CSchool][2]上了解一下。例如我的目标信息是：小说章节的名称与链接地址。在刚才得到的H5结构文件里，查找对应的数据单元：\n\n    <dd> <a style=\"\" href=\"/0_972/4743476.html\">第一千五百九十五章 黑暗现象</a></dd>\n\n可以看到我们需要的信息是存在于`<dd></dd>`标签内的一个`<a>`标签里的。所以我们需要的抓取机制应该是：\n\n* **先筛选出所有的`<dd></dd>`标签**\n* **然后抓取之中的`<a>`标签下的`title`和`href`两个属性下的数据**\n\n那有人可能就会问了，明明我们需要的目标信息的最小标签单元是`<a>`标签,为什么要多此一举的先去筛选出上一级的`<dd></dd>`标签？那是因为网页里有很多其他的`<a>`标签，但它们的信息并非小说的章节信息，为了过滤掉这些合规却又不是有效信息的`<a>`标签内容，我们需要加入额外的筛选条件－上一级的`<dd></dd>`标签。\n    \n    <li><a href=\"/nweph.html\">排行榜单</a></li>\n    <li><a href=\"/quanben/\">完本小说</a></li>\n    <li><a rel=\"nofollow\" href=\"/jilu.php\">阅读记录</a></li>\n\n### 编写抓取语句\n\n这个抓取语句主要是写在爬虫文件中的\"parse\"函数里。这里我们打开`fiction/spiders/biquge.py`文件并编辑如下\n\n    # -*- coding: utf-8 -*-  \n    from scrapy.spiders import Spider\n    from scrapy.selector import Selector\n    from fiction.items import FictionItem\n\n    class BiqugeSpider(Spider):\n    \tname = \"biquge\"\n    \tallowed_domains = [\"http://www.biquge.tw/\"]\n    \tstart_urls = (\n        \t'http://www.biquge.tw/0_972/',\n    \t)\n\n\t    def parse(self, response):\n\t        chapters = response.xpath('//dd')\n\t        items = []\n\t\n\t        for chapter in chapters:\n\t            item = FictionItem()\n\t            item['url'] = chapter.xpath(\n\t            \t'a/@href').extract()\n\t            item['title'] = chapter.xpath(\n\t            \t'a/text()').extract()\n\t            items.append(item)\n\t\n\t            print item['url'], item['title']\n\t\n\t        return items\n\n上面的代码很好理解，前两行是引入相关的`scrapy`基础类，第三行是引入我们自定义的数据结构（具体信息可以去上篇博客里查看－定义模型）. 再下来么就是我们爬虫类`biqugeSpider`，头三行的爬虫属性设置也在上篇说过了，直接看到重点`parse`函数。\n\n可以看到这个函数接收到了两个外部参数, `self` 和 `response`。`self`应该就是指爬虫自己，具体有啥用处，作者只能表示今天天气不错，啊哈哈哈。而`response`参数就是上述`抓取流程－第二步`抓取到全部网站内容，它应该是和上述`定制爬虫过滤规则－查阅目标站点H5结构`里看到的内容一致。\n\n接下来就如上述`定制爬虫过滤规则－定制抓取机制`计划的一样，先过滤出所有的`<dd></dd>`标签内容，并建立一个空数组用以将来存储标签对象`Fiction`。再接下来建立一个`for`循环，从每段`<dd></dd>`标签内容里，进一步过滤出`url`和`title`字段信息，并存入新建的`Fiction`对象，加入到`items`结果数组里，同时在命令行里输出`url`和`title`结果。 最后在`for`循环结束后，返回`items`结果数组(这个暂时没有，稍后我们配置结果输出到json文件时会用到)\n\n### 数据提取机制\n虽然说知道了这段代码是怎么工作的，但具体怎么写不知道啊，到底怎么样才能从HTML源码中提取数据呢？其实有些库是可以做到的：\n\n* [BeautifulSoup][4] 是在程序员间非常流行的网页分析库，它基于HTML代码的结构来构造一个Python对象， 对不良标记的处理也非常合理，但它有一个缺点：慢。\n比如这些\n* [lxml][5] 是一个基于 [ElementTree][6] (不是Python标准库的一部分)的python化的XML解析库(也可以解析HTML)。\n\n但伟大的奥斯忒懦夫司机·作者曾经又说过\n>作为一个菜鸡程序员，要有菜鸡程序员的尊严，坚决抵制听啊没听过的东西！\n\n所以有啥简单点的东西呢，找找看官网还真有－`Seletors`就可以完美替代，它是`Scrapy`自己提供的数据提取机制，可以通过特定的`XPath`和`CSS`表达式来选择 HTML文件中的某个部分。本篇作者就是用的这种提取机制，例如：\n\n    response.xpath('//dd') //提取网页内容里的所有<dd></dd>标签内容\n    ...\n    chapter.xpath('a/@href').extract() //提取chapther中<a>标签的@href属性\n    chapter.xpath('a/text()').extract() //提取chapther中<a>标签的text值\n更多的`Seletor`提取讲解，可以[正面上我][7]\n\n## 设置爬虫输出设置\n\n至此我们的爬虫可以说已经是大功告成，但数据抓是抓到了，怎么输出来用呢。大概是有三个方向：\n\n### 直接以log形式在命令行里输出\n这个最简单了，只要在爬虫文件里的`parse`函数里，使用`print`命令把相应的信息给打出来就可以了\n\n    print item['url'], item['title']\n### 保存到文件里\n半自动的呢，可以在启动爬虫时，加入输出参数 `-o outputFileName`。需要注意的是`Scrapy`默认支持四种格式:`JSON`, `JSON lines`, `CSV`, `XML`\n\n    scrapy crawl fiction -o result.json \n    // scrapy crawl spiderName -0 outputFileName\n    \n正规一点的呢，需要修改`/pipelines.py`文件如下：\n    \n    import json  \n    import codecs  \n    import re\n\n\tclass FictionPipeline(object):\n\n    def __init__(self):  \n        self.file = codecs.open('cn_zhan.json', 'wb', encoding='utf-8') \n\n    def process_item(self, item, spider):\n        if item['title']:\n            found = re.match('\\S* \\S*', str(item['title']))\n            if found:\n                print '---------', item['title']\n                line = json.dumps(dict(item), ensure_ascii=False) + \"\\n\" \n                self.file.write(line)   \n                return item\n            else:\n                print \"+++++++++ invalid chapter found ++++++++++++++++\"\n\n    def spider_closed(self, spider):\n    \tself.file.close()\n\n首先是在初始化方法里新建一个叫做`cn_zhan.json`的文件用以收纳抓取的信息，并约定它是`utf-8`格式（用来显示中文，同时打开它准备写入。第二步在`process_item`里我们根据正则表达式过滤掉不合规的`item`，并把合规的`item`（章节信息）转化成`json`语句存入之间申明的`cn_zhan.json`文件里。最后关闭这个文件。\n\n定义好`/pipelines.py`文件后，我们还需要在`/settings.py`文件里启用刚定义的输送规则：\n\n    ITEM_PIPELINES = {\n    \t#'fiction.pipelines.DuplicatesPipeline': 100,\n    \t'fiction.pipelines.FictionPipeline': 300,\n\t}\n注意在`/pipelines.py`文件里我们可以申明多个输送规则，例如这里作者还申明了一个去重原则。同时在`/settings.py`文件里启用时，`Scrapy`会依照数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内\n\n### 录入到数据库\n这个因为使用的数据库种类不同需要不同的配置，所以就先不讲解了，感兴趣的可以自己去狗哥一下\n\n## 尾声\n折腾了这么久，激动人心的时刻终于到来了，打开命令行开始运行爬虫，完成之后你就可以在你的文件夹里发现抓取的结果文件了:`cn_zhan.json`\n\n    {\"url\": [\"/0_972/603364.html\"], \"title\": [\"第一章 太阳消失\"]}\n    {\"url\": [\"/0_972/603365.html\"], \"title\": [\"第二章 全球恐慌\"]}\n    {\"url\": [\"/0_972/603366.html\"], \"title\": [\"第三章 黑暗时代\"]}\n    {\"url\": [\"/0_972/603367.html\"], \"title\": [\"第四章 怪物降临\"]}\n    ...\n完美，破费，至此我们的爬虫应该可以说是初步成型了！诸君昌隆！\n![][8]\n\n\n[1]:https://cl.ly/3h3F0j1d1P0s/python_2_1.png\n[2]:http://www.w3school.com.cn\n[3]:https://doc.scrapy.org/en/latest/topics/settings.html\n[4]:http://www.crummy.com/software/BeautifulSoup/\n[5]:http://lxml.de/\n[6]:http://docs.python.org/library/xml.etree.elementtree.html\n[7]:http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors-ref\n[8]:https://cl.ly/3S1k1Z3k3q1i/comic_success_kid.jpg\n","slug":"python-Scrapy-parser","published":1,"updated":"2016-10-09T08:29:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvm0000cxy2yiz0otroq","content":"<p>通过上一篇博客的工作，我们拥有了一个简单爬虫。但确实有点简陋的过分了，要啥啥没有，所以今天主要就是简单讲解一下爬虫的解析流程与爬取结果的输出形式。<br><strong><em>新任务获得：粗解爬虫解析流程并设置爬取结果的输出</em></strong></p>\n<a id=\"more\"></a>\n<h2 id=\"抓取流程\"><a href=\"#抓取流程\" class=\"headerlink\" title=\"抓取流程\"></a>抓取流程</h2><p><img src=\"https://cl.ly/3h3F0j1d1P0s/python_2_1.png\" alt=\"\"><br>实际上爬虫的工作流程很是直白的。首先找到包含目标信息的网站的网址，写入爬虫文件的<code>start_urls</code>参数，做为爬取的起始点。同时输入适当的网址到<code>allowed_domains</code>参数，来约束爬取的范围。</p>\n<p>第二步是爬取到网站内容，这个内容基本上会以<code>HTML&amp;CSS</code>格式呈现，这一步<code>scrapy</code>会帮我们做的，通常我们只需要运行爬虫就可以了，应对一个复杂要求(例如：应对网站反爬取设置)可以在<code>/settings.py</code>文件里配置爬虫参数。感兴趣的可以<a href=\"https://doc.scrapy.org/en/latest/topics/settings.html\" target=\"_blank\" rel=\"external\">正面上我</a></p>\n<p>第三步是过滤抓取内容，以获得我们需要的信息。这个要求我们在运行爬虫之前制定好过滤规则，然后在运行爬虫时<code>scrapy</code>会直接使用</p>\n<p>最后一步就是输出了，无论是直接以log形式在命令行里输出，还是保存到文件里，亦或是直接输入数据库都可以.</p>\n<p>至此我们今天的任务就明确了，主要是讲解下在第三步和第四步要怎么做。<br><strong><em>任务更新：合理制定爬虫过滤规则与爬虫输出设置</em></strong></p>\n<h2 id=\"制定爬虫过滤规则\"><a href=\"#制定爬虫过滤规则\" class=\"headerlink\" title=\"制定爬虫过滤规则\"></a>制定爬虫过滤规则</h2><p>因为每个抓取站点的h5文件结构都不一样，所以爬虫的可重用性比较低。对于不同的抓取目标，我们需要制定不同的抓取语句。一般的制定流程是先查阅目标站的H5结构，进而定制对应的抓取结构，最后编写抓取语句。</p>\n<h3 id=\"查阅目标站点H5结构\"><a href=\"#查阅目标站点H5结构\" class=\"headerlink\" title=\"查阅目标站点H5结构\"></a>查阅目标站点H5结构</h3><ol>\n<li><p>在命令行里查看<br> 使用<code>Scrapy</code>的<code>fetch</code>函数就可以直接现实H5文件结构</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy fetch http://www.biquge.tw/0_972/</div></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器里查看<br>这个么更直接，在浏览器里打开目标地址，然后进入开发者模式，显示网页源文件就可以看到了</p>\n</li>\n</ol>\n<h3 id=\"定制抓取机制\"><a href=\"#定制抓取机制\" class=\"headerlink\" title=\"定制抓取机制\"></a>定制抓取机制</h3><p>这个么需要一定的H5和CSS基本知识，一点都不懂的可以去<a href=\"http://www.w3school.com.cn\" target=\"_blank\" rel=\"external\">W3CSchool</a>上了解一下。例如我的目标信息是：小说章节的名称与链接地址。在刚才得到的H5结构文件里，查找对应的数据单元：</p>\n<pre><code>&lt;dd&gt; &lt;a style=&quot;&quot; href=&quot;/0_972/4743476.html&quot;&gt;第一千五百九十五章 黑暗现象&lt;/a&gt;&lt;/dd&gt;\n</code></pre><p>可以看到我们需要的信息是存在于<code>&lt;dd&gt;&lt;/dd&gt;</code>标签内的一个<code>&lt;a&gt;</code>标签里的。所以我们需要的抓取机制应该是：</p>\n<ul>\n<li><strong>先筛选出所有的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签</strong></li>\n<li><strong>然后抓取之中的<code>&lt;a&gt;</code>标签下的<code>title</code>和<code>href</code>两个属性下的数据</strong></li>\n</ul>\n<p>那有人可能就会问了，明明我们需要的目标信息的最小标签单元是<code>&lt;a&gt;</code>标签,为什么要多此一举的先去筛选出上一级的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签？那是因为网页里有很多其他的<code>&lt;a&gt;</code>标签，但它们的信息并非小说的章节信息，为了过滤掉这些合规却又不是有效信息的<code>&lt;a&gt;</code>标签内容，我们需要加入额外的筛选条件－上一级的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签。</p>\n<pre><code>&lt;li&gt;&lt;a href=&quot;/nweph.html&quot;&gt;排行榜单&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/quanben/&quot;&gt;完本小说&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;/jilu.php&quot;&gt;阅读记录&lt;/a&gt;&lt;/li&gt;\n</code></pre><h3 id=\"编写抓取语句\"><a href=\"#编写抓取语句\" class=\"headerlink\" title=\"编写抓取语句\"></a>编写抓取语句</h3><p>这个抓取语句主要是写在爬虫文件中的”parse”函数里。这里我们打开<code>fiction/spiders/biquge.py</code>文件并编辑如下</p>\n<pre><code># -*- coding: utf-8 -*-  \nfrom scrapy.spiders import Spider\nfrom scrapy.selector import Selector\nfrom fiction.items import FictionItem\n\nclass BiqugeSpider(Spider):\n    name = &quot;biquge&quot;\n    allowed_domains = [&quot;http://www.biquge.tw/&quot;]\n    start_urls = (\n        &apos;http://www.biquge.tw/0_972/&apos;,\n    )\n\n    def parse(self, response):\n        chapters = response.xpath(&apos;//dd&apos;)\n        items = []\n\n        for chapter in chapters:\n            item = FictionItem()\n            item[&apos;url&apos;] = chapter.xpath(\n                &apos;a/@href&apos;).extract()\n            item[&apos;title&apos;] = chapter.xpath(\n                &apos;a/text()&apos;).extract()\n            items.append(item)\n\n            print item[&apos;url&apos;], item[&apos;title&apos;]\n\n        return items\n</code></pre><p>上面的代码很好理解，前两行是引入相关的<code>scrapy</code>基础类，第三行是引入我们自定义的数据结构（具体信息可以去上篇博客里查看－定义模型）. 再下来么就是我们爬虫类<code>biqugeSpider</code>，头三行的爬虫属性设置也在上篇说过了，直接看到重点<code>parse</code>函数。</p>\n<p>可以看到这个函数接收到了两个外部参数, <code>self</code> 和 <code>response</code>。<code>self</code>应该就是指爬虫自己，具体有啥用处，作者只能表示今天天气不错，啊哈哈哈。而<code>response</code>参数就是上述<code>抓取流程－第二步</code>抓取到全部网站内容，它应该是和上述<code>定制爬虫过滤规则－查阅目标站点H5结构</code>里看到的内容一致。</p>\n<p>接下来就如上述<code>定制爬虫过滤规则－定制抓取机制</code>计划的一样，先过滤出所有的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签内容，并建立一个空数组用以将来存储标签对象<code>Fiction</code>。再接下来建立一个<code>for</code>循环，从每段<code>&lt;dd&gt;&lt;/dd&gt;</code>标签内容里，进一步过滤出<code>url</code>和<code>title</code>字段信息，并存入新建的<code>Fiction</code>对象，加入到<code>items</code>结果数组里，同时在命令行里输出<code>url</code>和<code>title</code>结果。 最后在<code>for</code>循环结束后，返回<code>items</code>结果数组(这个暂时没有，稍后我们配置结果输出到json文件时会用到)</p>\n<h3 id=\"数据提取机制\"><a href=\"#数据提取机制\" class=\"headerlink\" title=\"数据提取机制\"></a>数据提取机制</h3><p>虽然说知道了这段代码是怎么工作的，但具体怎么写不知道啊，到底怎么样才能从HTML源码中提取数据呢？其实有些库是可以做到的：</p>\n<ul>\n<li><a href=\"http://www.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"external\">BeautifulSoup</a> 是在程序员间非常流行的网页分析库，它基于HTML代码的结构来构造一个Python对象， 对不良标记的处理也非常合理，但它有一个缺点：慢。<br>比如这些</li>\n<li><a href=\"http://lxml.de/\" target=\"_blank\" rel=\"external\">lxml</a> 是一个基于 <a href=\"http://docs.python.org/library/xml.etree.elementtree.html\" target=\"_blank\" rel=\"external\">ElementTree</a> (不是Python标准库的一部分)的python化的XML解析库(也可以解析HTML)。</li>\n</ul>\n<p>但伟大的奥斯忒懦夫司机·作者曾经又说过</p>\n<blockquote>\n<p>作为一个菜鸡程序员，要有菜鸡程序员的尊严，坚决抵制听啊没听过的东西！</p>\n</blockquote>\n<p>所以有啥简单点的东西呢，找找看官网还真有－<code>Seletors</code>就可以完美替代，它是<code>Scrapy</code>自己提供的数据提取机制，可以通过特定的<code>XPath</code>和<code>CSS</code>表达式来选择 HTML文件中的某个部分。本篇作者就是用的这种提取机制，例如：</p>\n<pre><code>response.xpath(&apos;//dd&apos;) //提取网页内容里的所有&lt;dd&gt;&lt;/dd&gt;标签内容\n...\nchapter.xpath(&apos;a/@href&apos;).extract() //提取chapther中&lt;a&gt;标签的@href属性\nchapter.xpath(&apos;a/text()&apos;).extract() //提取chapther中&lt;a&gt;标签的text值\n</code></pre><p>更多的<code>Seletor</code>提取讲解，可以<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors-ref\" target=\"_blank\" rel=\"external\">正面上我</a></p>\n<h2 id=\"设置爬虫输出设置\"><a href=\"#设置爬虫输出设置\" class=\"headerlink\" title=\"设置爬虫输出设置\"></a>设置爬虫输出设置</h2><p>至此我们的爬虫可以说已经是大功告成，但数据抓是抓到了，怎么输出来用呢。大概是有三个方向：</p>\n<h3 id=\"直接以log形式在命令行里输出\"><a href=\"#直接以log形式在命令行里输出\" class=\"headerlink\" title=\"直接以log形式在命令行里输出\"></a>直接以log形式在命令行里输出</h3><p>这个最简单了，只要在爬虫文件里的<code>parse</code>函数里，使用<code>print</code>命令把相应的信息给打出来就可以了</p>\n<pre><code>print item[&apos;url&apos;], item[&apos;title&apos;]\n</code></pre><h3 id=\"保存到文件里\"><a href=\"#保存到文件里\" class=\"headerlink\" title=\"保存到文件里\"></a>保存到文件里</h3><p>半自动的呢，可以在启动爬虫时，加入输出参数 <code>-o outputFileName</code>。需要注意的是<code>Scrapy</code>默认支持四种格式:<code>JSON</code>, <code>JSON lines</code>, <code>CSV</code>, <code>XML</code></p>\n<pre><code>scrapy crawl fiction -o result.json \n// scrapy crawl spiderName -0 outputFileName\n</code></pre><p>正规一点的呢，需要修改<code>/pipelines.py</code>文件如下：</p>\n<pre><code>import json  \nimport codecs  \nimport re\n\nclass FictionPipeline(object):\n\ndef __init__(self):  \n    self.file = codecs.open(&apos;cn_zhan.json&apos;, &apos;wb&apos;, encoding=&apos;utf-8&apos;) \n\ndef process_item(self, item, spider):\n    if item[&apos;title&apos;]:\n        found = re.match(&apos;\\S* \\S*&apos;, str(item[&apos;title&apos;]))\n        if found:\n            print &apos;---------&apos;, item[&apos;title&apos;]\n            line = json.dumps(dict(item), ensure_ascii=False) + &quot;\\n&quot; \n            self.file.write(line)   \n            return item\n        else:\n            print &quot;+++++++++ invalid chapter found ++++++++++++++++&quot;\n\ndef spider_closed(self, spider):\n    self.file.close()\n</code></pre><p>首先是在初始化方法里新建一个叫做<code>cn_zhan.json</code>的文件用以收纳抓取的信息，并约定它是<code>utf-8</code>格式（用来显示中文，同时打开它准备写入。第二步在<code>process_item</code>里我们根据正则表达式过滤掉不合规的<code>item</code>，并把合规的<code>item</code>（章节信息）转化成<code>json</code>语句存入之间申明的<code>cn_zhan.json</code>文件里。最后关闭这个文件。</p>\n<p>定义好<code>/pipelines.py</code>文件后，我们还需要在<code>/settings.py</code>文件里启用刚定义的输送规则：</p>\n<pre><code>ITEM_PIPELINES = {\n    #&apos;fiction.pipelines.DuplicatesPipeline&apos;: 100,\n    &apos;fiction.pipelines.FictionPipeline&apos;: 300,\n}\n</code></pre><p>注意在<code>/pipelines.py</code>文件里我们可以申明多个输送规则，例如这里作者还申明了一个去重原则。同时在<code>/settings.py</code>文件里启用时，<code>Scrapy</code>会依照数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内</p>\n<h3 id=\"录入到数据库\"><a href=\"#录入到数据库\" class=\"headerlink\" title=\"录入到数据库\"></a>录入到数据库</h3><p>这个因为使用的数据库种类不同需要不同的配置，所以就先不讲解了，感兴趣的可以自己去狗哥一下</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>折腾了这么久，激动人心的时刻终于到来了，打开命令行开始运行爬虫，完成之后你就可以在你的文件夹里发现抓取的结果文件了:<code>cn_zhan.json</code></p>\n<pre><code>{&quot;url&quot;: [&quot;/0_972/603364.html&quot;], &quot;title&quot;: [&quot;第一章 太阳消失&quot;]}\n{&quot;url&quot;: [&quot;/0_972/603365.html&quot;], &quot;title&quot;: [&quot;第二章 全球恐慌&quot;]}\n{&quot;url&quot;: [&quot;/0_972/603366.html&quot;], &quot;title&quot;: [&quot;第三章 黑暗时代&quot;]}\n{&quot;url&quot;: [&quot;/0_972/603367.html&quot;], &quot;title&quot;: [&quot;第四章 怪物降临&quot;]}\n...\n</code></pre><p>完美，破费，至此我们的爬虫应该可以说是初步成型了！诸君昌隆！<br><img src=\"https://cl.ly/3S1k1Z3k3q1i/comic_success_kid.jpg\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/10/09/python-Scrapy-parser/\">https://millionaryearl.github.io/2016/10/09/python-Scrapy-parser/</a></p>\n","excerpt":"<p>通过上一篇博客的工作，我们拥有了一个简单爬虫。但确实有点简陋的过分了，要啥啥没有，所以今天主要就是简单讲解一下爬虫的解析流程与爬取结果的输出形式。<br><strong><em>新任务获得：粗解爬虫解析流程并设置爬取结果的输出</em></strong></p>","more":"<h2 id=\"抓取流程\"><a href=\"#抓取流程\" class=\"headerlink\" title=\"抓取流程\"></a>抓取流程</h2><p><img src=\"https://cl.ly/3h3F0j1d1P0s/python_2_1.png\" alt=\"\"><br>实际上爬虫的工作流程很是直白的。首先找到包含目标信息的网站的网址，写入爬虫文件的<code>start_urls</code>参数，做为爬取的起始点。同时输入适当的网址到<code>allowed_domains</code>参数，来约束爬取的范围。</p>\n<p>第二步是爬取到网站内容，这个内容基本上会以<code>HTML&amp;CSS</code>格式呈现，这一步<code>scrapy</code>会帮我们做的，通常我们只需要运行爬虫就可以了，应对一个复杂要求(例如：应对网站反爬取设置)可以在<code>/settings.py</code>文件里配置爬虫参数。感兴趣的可以<a href=\"https://doc.scrapy.org/en/latest/topics/settings.html\">正面上我</a></p>\n<p>第三步是过滤抓取内容，以获得我们需要的信息。这个要求我们在运行爬虫之前制定好过滤规则，然后在运行爬虫时<code>scrapy</code>会直接使用</p>\n<p>最后一步就是输出了，无论是直接以log形式在命令行里输出，还是保存到文件里，亦或是直接输入数据库都可以.</p>\n<p>至此我们今天的任务就明确了，主要是讲解下在第三步和第四步要怎么做。<br><strong><em>任务更新：合理制定爬虫过滤规则与爬虫输出设置</em></strong></p>\n<h2 id=\"制定爬虫过滤规则\"><a href=\"#制定爬虫过滤规则\" class=\"headerlink\" title=\"制定爬虫过滤规则\"></a>制定爬虫过滤规则</h2><p>因为每个抓取站点的h5文件结构都不一样，所以爬虫的可重用性比较低。对于不同的抓取目标，我们需要制定不同的抓取语句。一般的制定流程是先查阅目标站的H5结构，进而定制对应的抓取结构，最后编写抓取语句。</p>\n<h3 id=\"查阅目标站点H5结构\"><a href=\"#查阅目标站点H5结构\" class=\"headerlink\" title=\"查阅目标站点H5结构\"></a>查阅目标站点H5结构</h3><ol>\n<li><p>在命令行里查看<br> 使用<code>Scrapy</code>的<code>fetch</code>函数就可以直接现实H5文件结构</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy fetch http://www.biquge.tw/0_972/</div></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器里查看<br>这个么更直接，在浏览器里打开目标地址，然后进入开发者模式，显示网页源文件就可以看到了</p>\n</li>\n</ol>\n<h3 id=\"定制抓取机制\"><a href=\"#定制抓取机制\" class=\"headerlink\" title=\"定制抓取机制\"></a>定制抓取机制</h3><p>这个么需要一定的H5和CSS基本知识，一点都不懂的可以去<a href=\"http://www.w3school.com.cn\">W3CSchool</a>上了解一下。例如我的目标信息是：小说章节的名称与链接地址。在刚才得到的H5结构文件里，查找对应的数据单元：</p>\n<pre><code>&lt;dd&gt; &lt;a style=&quot;&quot; href=&quot;/0_972/4743476.html&quot;&gt;第一千五百九十五章 黑暗现象&lt;/a&gt;&lt;/dd&gt;\n</code></pre><p>可以看到我们需要的信息是存在于<code>&lt;dd&gt;&lt;/dd&gt;</code>标签内的一个<code>&lt;a&gt;</code>标签里的。所以我们需要的抓取机制应该是：</p>\n<ul>\n<li><strong>先筛选出所有的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签</strong></li>\n<li><strong>然后抓取之中的<code>&lt;a&gt;</code>标签下的<code>title</code>和<code>href</code>两个属性下的数据</strong></li>\n</ul>\n<p>那有人可能就会问了，明明我们需要的目标信息的最小标签单元是<code>&lt;a&gt;</code>标签,为什么要多此一举的先去筛选出上一级的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签？那是因为网页里有很多其他的<code>&lt;a&gt;</code>标签，但它们的信息并非小说的章节信息，为了过滤掉这些合规却又不是有效信息的<code>&lt;a&gt;</code>标签内容，我们需要加入额外的筛选条件－上一级的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签。</p>\n<pre><code>&lt;li&gt;&lt;a href=&quot;/nweph.html&quot;&gt;排行榜单&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;/quanben/&quot;&gt;完本小说&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;/jilu.php&quot;&gt;阅读记录&lt;/a&gt;&lt;/li&gt;\n</code></pre><h3 id=\"编写抓取语句\"><a href=\"#编写抓取语句\" class=\"headerlink\" title=\"编写抓取语句\"></a>编写抓取语句</h3><p>这个抓取语句主要是写在爬虫文件中的”parse”函数里。这里我们打开<code>fiction/spiders/biquge.py</code>文件并编辑如下</p>\n<pre><code># -*- coding: utf-8 -*-  \nfrom scrapy.spiders import Spider\nfrom scrapy.selector import Selector\nfrom fiction.items import FictionItem\n\nclass BiqugeSpider(Spider):\n    name = &quot;biquge&quot;\n    allowed_domains = [&quot;http://www.biquge.tw/&quot;]\n    start_urls = (\n        &apos;http://www.biquge.tw/0_972/&apos;,\n    )\n\n    def parse(self, response):\n        chapters = response.xpath(&apos;//dd&apos;)\n        items = []\n\n        for chapter in chapters:\n            item = FictionItem()\n            item[&apos;url&apos;] = chapter.xpath(\n                &apos;a/@href&apos;).extract()\n            item[&apos;title&apos;] = chapter.xpath(\n                &apos;a/text()&apos;).extract()\n            items.append(item)\n\n            print item[&apos;url&apos;], item[&apos;title&apos;]\n\n        return items\n</code></pre><p>上面的代码很好理解，前两行是引入相关的<code>scrapy</code>基础类，第三行是引入我们自定义的数据结构（具体信息可以去上篇博客里查看－定义模型）. 再下来么就是我们爬虫类<code>biqugeSpider</code>，头三行的爬虫属性设置也在上篇说过了，直接看到重点<code>parse</code>函数。</p>\n<p>可以看到这个函数接收到了两个外部参数, <code>self</code> 和 <code>response</code>。<code>self</code>应该就是指爬虫自己，具体有啥用处，作者只能表示今天天气不错，啊哈哈哈。而<code>response</code>参数就是上述<code>抓取流程－第二步</code>抓取到全部网站内容，它应该是和上述<code>定制爬虫过滤规则－查阅目标站点H5结构</code>里看到的内容一致。</p>\n<p>接下来就如上述<code>定制爬虫过滤规则－定制抓取机制</code>计划的一样，先过滤出所有的<code>&lt;dd&gt;&lt;/dd&gt;</code>标签内容，并建立一个空数组用以将来存储标签对象<code>Fiction</code>。再接下来建立一个<code>for</code>循环，从每段<code>&lt;dd&gt;&lt;/dd&gt;</code>标签内容里，进一步过滤出<code>url</code>和<code>title</code>字段信息，并存入新建的<code>Fiction</code>对象，加入到<code>items</code>结果数组里，同时在命令行里输出<code>url</code>和<code>title</code>结果。 最后在<code>for</code>循环结束后，返回<code>items</code>结果数组(这个暂时没有，稍后我们配置结果输出到json文件时会用到)</p>\n<h3 id=\"数据提取机制\"><a href=\"#数据提取机制\" class=\"headerlink\" title=\"数据提取机制\"></a>数据提取机制</h3><p>虽然说知道了这段代码是怎么工作的，但具体怎么写不知道啊，到底怎么样才能从HTML源码中提取数据呢？其实有些库是可以做到的：</p>\n<ul>\n<li><a href=\"http://www.crummy.com/software/BeautifulSoup/\">BeautifulSoup</a> 是在程序员间非常流行的网页分析库，它基于HTML代码的结构来构造一个Python对象， 对不良标记的处理也非常合理，但它有一个缺点：慢。<br>比如这些</li>\n<li><a href=\"http://lxml.de/\">lxml</a> 是一个基于 <a href=\"http://docs.python.org/library/xml.etree.elementtree.html\">ElementTree</a> (不是Python标准库的一部分)的python化的XML解析库(也可以解析HTML)。</li>\n</ul>\n<p>但伟大的奥斯忒懦夫司机·作者曾经又说过</p>\n<blockquote>\n<p>作为一个菜鸡程序员，要有菜鸡程序员的尊严，坚决抵制听啊没听过的东西！</p>\n</blockquote>\n<p>所以有啥简单点的东西呢，找找看官网还真有－<code>Seletors</code>就可以完美替代，它是<code>Scrapy</code>自己提供的数据提取机制，可以通过特定的<code>XPath</code>和<code>CSS</code>表达式来选择 HTML文件中的某个部分。本篇作者就是用的这种提取机制，例如：</p>\n<pre><code>response.xpath(&apos;//dd&apos;) //提取网页内容里的所有&lt;dd&gt;&lt;/dd&gt;标签内容\n...\nchapter.xpath(&apos;a/@href&apos;).extract() //提取chapther中&lt;a&gt;标签的@href属性\nchapter.xpath(&apos;a/text()&apos;).extract() //提取chapther中&lt;a&gt;标签的text值\n</code></pre><p>更多的<code>Seletor</code>提取讲解，可以<a href=\"http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors-ref\">正面上我</a></p>\n<h2 id=\"设置爬虫输出设置\"><a href=\"#设置爬虫输出设置\" class=\"headerlink\" title=\"设置爬虫输出设置\"></a>设置爬虫输出设置</h2><p>至此我们的爬虫可以说已经是大功告成，但数据抓是抓到了，怎么输出来用呢。大概是有三个方向：</p>\n<h3 id=\"直接以log形式在命令行里输出\"><a href=\"#直接以log形式在命令行里输出\" class=\"headerlink\" title=\"直接以log形式在命令行里输出\"></a>直接以log形式在命令行里输出</h3><p>这个最简单了，只要在爬虫文件里的<code>parse</code>函数里，使用<code>print</code>命令把相应的信息给打出来就可以了</p>\n<pre><code>print item[&apos;url&apos;], item[&apos;title&apos;]\n</code></pre><h3 id=\"保存到文件里\"><a href=\"#保存到文件里\" class=\"headerlink\" title=\"保存到文件里\"></a>保存到文件里</h3><p>半自动的呢，可以在启动爬虫时，加入输出参数 <code>-o outputFileName</code>。需要注意的是<code>Scrapy</code>默认支持四种格式:<code>JSON</code>, <code>JSON lines</code>, <code>CSV</code>, <code>XML</code></p>\n<pre><code>scrapy crawl fiction -o result.json \n// scrapy crawl spiderName -0 outputFileName\n</code></pre><p>正规一点的呢，需要修改<code>/pipelines.py</code>文件如下：</p>\n<pre><code>import json  \nimport codecs  \nimport re\n\nclass FictionPipeline(object):\n\ndef __init__(self):  \n    self.file = codecs.open(&apos;cn_zhan.json&apos;, &apos;wb&apos;, encoding=&apos;utf-8&apos;) \n\ndef process_item(self, item, spider):\n    if item[&apos;title&apos;]:\n        found = re.match(&apos;\\S* \\S*&apos;, str(item[&apos;title&apos;]))\n        if found:\n            print &apos;---------&apos;, item[&apos;title&apos;]\n            line = json.dumps(dict(item), ensure_ascii=False) + &quot;\\n&quot; \n            self.file.write(line)   \n            return item\n        else:\n            print &quot;+++++++++ invalid chapter found ++++++++++++++++&quot;\n\ndef spider_closed(self, spider):\n    self.file.close()\n</code></pre><p>首先是在初始化方法里新建一个叫做<code>cn_zhan.json</code>的文件用以收纳抓取的信息，并约定它是<code>utf-8</code>格式（用来显示中文，同时打开它准备写入。第二步在<code>process_item</code>里我们根据正则表达式过滤掉不合规的<code>item</code>，并把合规的<code>item</code>（章节信息）转化成<code>json</code>语句存入之间申明的<code>cn_zhan.json</code>文件里。最后关闭这个文件。</p>\n<p>定义好<code>/pipelines.py</code>文件后，我们还需要在<code>/settings.py</code>文件里启用刚定义的输送规则：</p>\n<pre><code>ITEM_PIPELINES = {\n    #&apos;fiction.pipelines.DuplicatesPipeline&apos;: 100,\n    &apos;fiction.pipelines.FictionPipeline&apos;: 300,\n}\n</code></pre><p>注意在<code>/pipelines.py</code>文件里我们可以申明多个输送规则，例如这里作者还申明了一个去重原则。同时在<code>/settings.py</code>文件里启用时，<code>Scrapy</code>会依照数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内</p>\n<h3 id=\"录入到数据库\"><a href=\"#录入到数据库\" class=\"headerlink\" title=\"录入到数据库\"></a>录入到数据库</h3><p>这个因为使用的数据库种类不同需要不同的配置，所以就先不讲解了，感兴趣的可以自己去狗哥一下</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>折腾了这么久，激动人心的时刻终于到来了，打开命令行开始运行爬虫，完成之后你就可以在你的文件夹里发现抓取的结果文件了:<code>cn_zhan.json</code></p>\n<pre><code>{&quot;url&quot;: [&quot;/0_972/603364.html&quot;], &quot;title&quot;: [&quot;第一章 太阳消失&quot;]}\n{&quot;url&quot;: [&quot;/0_972/603365.html&quot;], &quot;title&quot;: [&quot;第二章 全球恐慌&quot;]}\n{&quot;url&quot;: [&quot;/0_972/603366.html&quot;], &quot;title&quot;: [&quot;第三章 黑暗时代&quot;]}\n{&quot;url&quot;: [&quot;/0_972/603367.html&quot;], &quot;title&quot;: [&quot;第四章 怪物降临&quot;]}\n...\n</code></pre><p>完美，破费，至此我们的爬虫应该可以说是初步成型了！诸君昌隆！<br><img src=\"https://cl.ly/3S1k1Z3k3q1i/comic_success_kid.jpg\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/10/09/python-Scrapy-parser/\">https://millionaryearl.github.io/2016/10/09/python-Scrapy-parser/</a></p>"},{"title":"Swift Notes - 阿里云推送SDK","date":"2016-09-01T01:21:10.000Z","_content":"\n新项目里的消息推送功能，公司技术部开会讨论后决定让 极光，百度，aws都歇菜，取而代之的是尝试 使用阿里云推送SDK。所以今天就简单记录下调试过程。\n***新任务获得：使用阿里云推送SDK实现消息推送功能～***\n\n<!--more-->\n\n嗯常规套路先看官方文档 [正面上我][1] 。 嗯，很详细，很耐斯，很桥豆麻袋？库文件是OC写的？？？\n\n![][2]\n\n坑爹啊，哥的项目都是swift写的啊。呃。。。。。。。。。好吧，也许加一个桥接就可以了。任务变更：桥接阿里云推送SDK（OC版）到Swift工程里，而后实现消息推送功能～\n\n![][3]\n\n\n\n## Ready to work\n所谓工欲善其事，必先利其器。而且消息推送功能本身就是配置打过逻辑代码的功能，所以我们先要把准备工作做好。\n\n---------------------------------------\n\n### Step.1 - 准备certificate文件\n\n由于消息推送功能的实现，涉及到Apple的官方资源（感兴趣的同志们可以自行去谷歌APNS），所以需要准备特别的证书文件：***development certificate x1***， ***distribution certificate x1***。然后这两个文件具体怎么获得呢，请 [正面上我][4] 。\n\n\n### Step.2 - 获得AppKey, AppSecret \n\n这个appkey 和appsecret 是做啥的呢，嗯简单说就是这两个字串是阿里云用来标记你的app的，万一推错了就不好嘛，稍后我们会用点。那么问题又来了这两个字串那里搞呢？\n\n支线任务获得：寻找NPC -公司的推送服务后台开发人员，交付 ***development certificate x1***， ***distribution certificate x1***后，获得 ***AppKey x1***, ***AppSecret x1***.\n\n### Step.3 - 配置App\n\n配置App这个就简单了，打开你的项目代码。先把开发团队调到你们的公司\n\n![][5]\n\n然后打开 Post Notifications 功能\n\n![][6]\n### Step.4 - 引入阿里云SDK\n\n下载好压缩包打开，获得四个库文件，然后全部拖到你的项目工程里去。再然后么把 build settings 里的 Enable Bitcode 给关了。最后再转到 Build Phases 里面的 Link Binary With libraries， 加入四个依赖的系统库: libz.tbd，libresolv.tbd，CoreTelephony.framework，SystemConfiguration.framework 。\n\n---------------------------------------\n\n好啦，到此基本上所有的准备工作都做好了。接下来我们就可以开始写代码了。P.S. ~~其实上面的都可以在阿里云文档里看到，哥只是拿来凑字的~~～～\n\n## Core Work\n\n### Step.1 - 桥接\n先建立一个 Header File，命名为 YourProjectName-Bridging-Header.h 。 \n\n![][7]\n\n然后呢去到 Build Setting里，找到 Objective-C Bridging Header 填入刚才的文件名\n\n![][8]\n\n最后在刚才的桥接文件里，引入阿里云推送的库` #import <CloudPushSDK/CloudPushSDK.h>`, 这样就可以用SDK里的方法了。\n\n### Step.2 - 配置推送\n先在APP启动时调用配置方法。\n\n```\nlet aliyunpush_AppKey = \"23448723\"\nlet aliyunpush_AppSecret = \"8085ed1d1fc7739e9e058d2ad7fbb881\"\nlet aliyunpush_messageNoti = \"CCPDidReceiveMessageNotification\"\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -> Bool {\n        // Override point for customization after application launch.\n        \n        //init aliyun Push SDK\n        initCloudPush(application: application)\n        \n        //feedback to aliyun server\n        CloudPushSDK.handleLaunching(launchOptions)\n        \n        return true\n\n    }\n```\n\n配置推送注册方法\n\n```\nfunc initCloudPush(application : UIApplication) {\n\n        CloudPushSDK.asyncInit(aliyunpush_AppKey, appSecret: aliyunpush_AppSecret) { (res) in\n            if (res?.success)! {\n                print(\"Push SDK init success, deviceID: \\(CloudPushSDK.getDeviceId())\")\n            }else{\n                print(\"Push SDK init failed, error: \\(res?.error?.localizedDescription)\")\n            }\n\n        }\n        \n        //register APNS to fetch deviceToken\n        let settings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)\n\n        if #available(iOS 8.0, *) {\n            \n            //iOS 8 notifications\n            \n            application.registerUserNotificationSettings(settings)\n            application.registerForRemoteNotifications()\n        }else{\n            \n            //iOS < 8 Notifications\n            UIApplication.shared.registerUserNotificationSettings(settings)\n        }\n        \n        registerMessageReceive()\n    }\n    \n    //APNS register success\n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        CloudPushSDK.registerDevice(deviceToken as Data!) { (res) in\n            if (res?.success)!{\n                print(\"Register deviceToken success\")\n            }else{\n                print(\"Register deviceToken failed, error:\\(res?.error?.localizedDescription)\")\n            }\n\n        }\n    }\n    \n    //APNS register failed\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        print(\"did fail to register for remote notification with error : \\(error.localizedDescription)\")\n    }\n```\n\n推送处理方法\n\n```\n //Observer remote Notifications - Background Mode & Inactive Mode\n    func registerMessageReceive()   {\n        NotificationCenter.default.addObserver(self, selector: Selector((\"onMessageReceived\")), name: NSNotification.Name(rawValue: aliyunpush_messageNoti), object: nil)\n    }\n    \n    //Handle remote Notifications - Background Mode & Inactive Mode\n    func onMessageReceived(notification: NSNotification)  {\n        let message : CCPSysMessage = notification.object as! CCPSysMessage\n        let title : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!\n        let body : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!\n        print(\"Received Message title: \\(title), content:\\(body)\")\n    }\n    \n    //Observer & Handle remote Notifications - Foreground Mode\n    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {\n        print(\"REceive one notification.\")\n        \n        //retreive APNS content\n        \n        let aps_dic : NSDictionary = userInfo[\"aps\"] as! NSDictionary\n        \n        //content\n        let content = aps_dic.value(forKey: \"alert\")\n        \n        //barge num\n        let badge = (aps_dic.value(forKey: \"badge\") as AnyObject).integerValue\n        \n        //sound\n        let sound = aps_dic.value(forKey: \"sound\")\n        \n        //extras\n        let extras = aps_dic.value(forKey: \"Extras\")\n        \n        print(\"content: \\(content)\\n, badge:\\(badge)\\n, sound :\\(sound)\\n, Extras: \\(extras)\")\n        \n        application.applicationIconBadgeNumber = 0\n        \n        CloudPushSDK.handleReceiveRemoteNotification(userInfo)\n    }\n```\n\n最后运行程序，看到如下结果就可以去交任务啦。\n\n![][9]\n\n完结，鼓掌，撒花～～\n\n![][10]\n\n[1]:https://help.aliyun.com/document_detail/30072.html?spm=5176.doc30071.6.156.YoX0P8\n[2]:https://cl.ly/hRAS/ExcuseMe.jpeg\n[3]:https://cl.ly/hREs/challenge-accepted-meme.jpg\n[4]:https://help.aliyun.com/document_detail/30071.html?spm=5176.doc30072.6.155.ItR8Ib\n[5]:https://cl.ly/hQyC/aliyun_1.jpeg\n[6]:https://cl.ly/hRCF/aliyun_2.png\n[7]:https://cl.ly/hRGV/aliyun_3.jpeg\n[8]:https://cl.ly/hRAR/aliyun_4.jpeg\n[9]:https://cl.ly/hQrt/aliyun_8.png\n[10]:https://cl.ly/hQsX/PrettyGood.png","source":"_posts/swift-APNS-aliyun.md","raw":"---\ntitle: Swift Notes - 阿里云推送SDK\ntags: Swift\ndate: 2016-09-01 9:21:10\ncategories: \"APNS\"\n---\n\n新项目里的消息推送功能，公司技术部开会讨论后决定让 极光，百度，aws都歇菜，取而代之的是尝试 使用阿里云推送SDK。所以今天就简单记录下调试过程。\n***新任务获得：使用阿里云推送SDK实现消息推送功能～***\n\n<!--more-->\n\n嗯常规套路先看官方文档 [正面上我][1] 。 嗯，很详细，很耐斯，很桥豆麻袋？库文件是OC写的？？？\n\n![][2]\n\n坑爹啊，哥的项目都是swift写的啊。呃。。。。。。。。。好吧，也许加一个桥接就可以了。任务变更：桥接阿里云推送SDK（OC版）到Swift工程里，而后实现消息推送功能～\n\n![][3]\n\n\n\n## Ready to work\n所谓工欲善其事，必先利其器。而且消息推送功能本身就是配置打过逻辑代码的功能，所以我们先要把准备工作做好。\n\n---------------------------------------\n\n### Step.1 - 准备certificate文件\n\n由于消息推送功能的实现，涉及到Apple的官方资源（感兴趣的同志们可以自行去谷歌APNS），所以需要准备特别的证书文件：***development certificate x1***， ***distribution certificate x1***。然后这两个文件具体怎么获得呢，请 [正面上我][4] 。\n\n\n### Step.2 - 获得AppKey, AppSecret \n\n这个appkey 和appsecret 是做啥的呢，嗯简单说就是这两个字串是阿里云用来标记你的app的，万一推错了就不好嘛，稍后我们会用点。那么问题又来了这两个字串那里搞呢？\n\n支线任务获得：寻找NPC -公司的推送服务后台开发人员，交付 ***development certificate x1***， ***distribution certificate x1***后，获得 ***AppKey x1***, ***AppSecret x1***.\n\n### Step.3 - 配置App\n\n配置App这个就简单了，打开你的项目代码。先把开发团队调到你们的公司\n\n![][5]\n\n然后打开 Post Notifications 功能\n\n![][6]\n### Step.4 - 引入阿里云SDK\n\n下载好压缩包打开，获得四个库文件，然后全部拖到你的项目工程里去。再然后么把 build settings 里的 Enable Bitcode 给关了。最后再转到 Build Phases 里面的 Link Binary With libraries， 加入四个依赖的系统库: libz.tbd，libresolv.tbd，CoreTelephony.framework，SystemConfiguration.framework 。\n\n---------------------------------------\n\n好啦，到此基本上所有的准备工作都做好了。接下来我们就可以开始写代码了。P.S. ~~其实上面的都可以在阿里云文档里看到，哥只是拿来凑字的~~～～\n\n## Core Work\n\n### Step.1 - 桥接\n先建立一个 Header File，命名为 YourProjectName-Bridging-Header.h 。 \n\n![][7]\n\n然后呢去到 Build Setting里，找到 Objective-C Bridging Header 填入刚才的文件名\n\n![][8]\n\n最后在刚才的桥接文件里，引入阿里云推送的库` #import <CloudPushSDK/CloudPushSDK.h>`, 这样就可以用SDK里的方法了。\n\n### Step.2 - 配置推送\n先在APP启动时调用配置方法。\n\n```\nlet aliyunpush_AppKey = \"23448723\"\nlet aliyunpush_AppSecret = \"8085ed1d1fc7739e9e058d2ad7fbb881\"\nlet aliyunpush_messageNoti = \"CCPDidReceiveMessageNotification\"\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -> Bool {\n        // Override point for customization after application launch.\n        \n        //init aliyun Push SDK\n        initCloudPush(application: application)\n        \n        //feedback to aliyun server\n        CloudPushSDK.handleLaunching(launchOptions)\n        \n        return true\n\n    }\n```\n\n配置推送注册方法\n\n```\nfunc initCloudPush(application : UIApplication) {\n\n        CloudPushSDK.asyncInit(aliyunpush_AppKey, appSecret: aliyunpush_AppSecret) { (res) in\n            if (res?.success)! {\n                print(\"Push SDK init success, deviceID: \\(CloudPushSDK.getDeviceId())\")\n            }else{\n                print(\"Push SDK init failed, error: \\(res?.error?.localizedDescription)\")\n            }\n\n        }\n        \n        //register APNS to fetch deviceToken\n        let settings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)\n\n        if #available(iOS 8.0, *) {\n            \n            //iOS 8 notifications\n            \n            application.registerUserNotificationSettings(settings)\n            application.registerForRemoteNotifications()\n        }else{\n            \n            //iOS < 8 Notifications\n            UIApplication.shared.registerUserNotificationSettings(settings)\n        }\n        \n        registerMessageReceive()\n    }\n    \n    //APNS register success\n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        CloudPushSDK.registerDevice(deviceToken as Data!) { (res) in\n            if (res?.success)!{\n                print(\"Register deviceToken success\")\n            }else{\n                print(\"Register deviceToken failed, error:\\(res?.error?.localizedDescription)\")\n            }\n\n        }\n    }\n    \n    //APNS register failed\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        print(\"did fail to register for remote notification with error : \\(error.localizedDescription)\")\n    }\n```\n\n推送处理方法\n\n```\n //Observer remote Notifications - Background Mode & Inactive Mode\n    func registerMessageReceive()   {\n        NotificationCenter.default.addObserver(self, selector: Selector((\"onMessageReceived\")), name: NSNotification.Name(rawValue: aliyunpush_messageNoti), object: nil)\n    }\n    \n    //Handle remote Notifications - Background Mode & Inactive Mode\n    func onMessageReceived(notification: NSNotification)  {\n        let message : CCPSysMessage = notification.object as! CCPSysMessage\n        let title : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!\n        let body : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!\n        print(\"Received Message title: \\(title), content:\\(body)\")\n    }\n    \n    //Observer & Handle remote Notifications - Foreground Mode\n    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {\n        print(\"REceive one notification.\")\n        \n        //retreive APNS content\n        \n        let aps_dic : NSDictionary = userInfo[\"aps\"] as! NSDictionary\n        \n        //content\n        let content = aps_dic.value(forKey: \"alert\")\n        \n        //barge num\n        let badge = (aps_dic.value(forKey: \"badge\") as AnyObject).integerValue\n        \n        //sound\n        let sound = aps_dic.value(forKey: \"sound\")\n        \n        //extras\n        let extras = aps_dic.value(forKey: \"Extras\")\n        \n        print(\"content: \\(content)\\n, badge:\\(badge)\\n, sound :\\(sound)\\n, Extras: \\(extras)\")\n        \n        application.applicationIconBadgeNumber = 0\n        \n        CloudPushSDK.handleReceiveRemoteNotification(userInfo)\n    }\n```\n\n最后运行程序，看到如下结果就可以去交任务啦。\n\n![][9]\n\n完结，鼓掌，撒花～～\n\n![][10]\n\n[1]:https://help.aliyun.com/document_detail/30072.html?spm=5176.doc30071.6.156.YoX0P8\n[2]:https://cl.ly/hRAS/ExcuseMe.jpeg\n[3]:https://cl.ly/hREs/challenge-accepted-meme.jpg\n[4]:https://help.aliyun.com/document_detail/30071.html?spm=5176.doc30072.6.155.ItR8Ib\n[5]:https://cl.ly/hQyC/aliyun_1.jpeg\n[6]:https://cl.ly/hRCF/aliyun_2.png\n[7]:https://cl.ly/hRGV/aliyun_3.jpeg\n[8]:https://cl.ly/hRAR/aliyun_4.jpeg\n[9]:https://cl.ly/hQrt/aliyun_8.png\n[10]:https://cl.ly/hQsX/PrettyGood.png","slug":"swift-APNS-aliyun","published":1,"updated":"2016-09-01T01:21:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu3phvm2000fxy2y5w83c40q","content":"<p>新项目里的消息推送功能，公司技术部开会讨论后决定让 极光，百度，aws都歇菜，取而代之的是尝试 使用阿里云推送SDK。所以今天就简单记录下调试过程。<br><strong><em>新任务获得：使用阿里云推送SDK实现消息推送功能～</em></strong></p>\n<a id=\"more\"></a>\n<p>嗯常规套路先看官方文档 <a href=\"https://help.aliyun.com/document_detail/30072.html?spm=5176.doc30071.6.156.YoX0P8\" target=\"_blank\" rel=\"external\">正面上我</a> 。 嗯，很详细，很耐斯，很桥豆麻袋？库文件是OC写的？？？</p>\n<p><img src=\"https://cl.ly/hRAS/ExcuseMe.jpeg\" alt=\"\"></p>\n<p>坑爹啊，哥的项目都是swift写的啊。呃。。。。。。。。。好吧，也许加一个桥接就可以了。任务变更：桥接阿里云推送SDK（OC版）到Swift工程里，而后实现消息推送功能～</p>\n<p><img src=\"https://cl.ly/hREs/challenge-accepted-meme.jpg\" alt=\"\"></p>\n<h2 id=\"Ready-to-work\"><a href=\"#Ready-to-work\" class=\"headerlink\" title=\"Ready to work\"></a>Ready to work</h2><p>所谓工欲善其事，必先利其器。而且消息推送功能本身就是配置打过逻辑代码的功能，所以我们先要把准备工作做好。</p>\n<hr>\n<h3 id=\"Step-1-准备certificate文件\"><a href=\"#Step-1-准备certificate文件\" class=\"headerlink\" title=\"Step.1 - 准备certificate文件\"></a>Step.1 - 准备certificate文件</h3><p>由于消息推送功能的实现，涉及到Apple的官方资源（感兴趣的同志们可以自行去谷歌APNS），所以需要准备特别的证书文件：<strong><em>development certificate x1</em></strong>， <strong><em>distribution certificate x1</em></strong>。然后这两个文件具体怎么获得呢，请 <a href=\"https://help.aliyun.com/document_detail/30071.html?spm=5176.doc30072.6.155.ItR8Ib\" target=\"_blank\" rel=\"external\">正面上我</a> 。</p>\n<h3 id=\"Step-2-获得AppKey-AppSecret\"><a href=\"#Step-2-获得AppKey-AppSecret\" class=\"headerlink\" title=\"Step.2 - 获得AppKey, AppSecret\"></a>Step.2 - 获得AppKey, AppSecret</h3><p>这个appkey 和appsecret 是做啥的呢，嗯简单说就是这两个字串是阿里云用来标记你的app的，万一推错了就不好嘛，稍后我们会用点。那么问题又来了这两个字串那里搞呢？</p>\n<p>支线任务获得：寻找NPC -公司的推送服务后台开发人员，交付 <strong><em>development certificate x1</em></strong>， <strong><em>distribution certificate x1</em></strong>后，获得 <strong><em>AppKey x1</em></strong>, <strong><em>AppSecret x1</em></strong>.</p>\n<h3 id=\"Step-3-配置App\"><a href=\"#Step-3-配置App\" class=\"headerlink\" title=\"Step.3 - 配置App\"></a>Step.3 - 配置App</h3><p>配置App这个就简单了，打开你的项目代码。先把开发团队调到你们的公司</p>\n<p><img src=\"https://cl.ly/hQyC/aliyun_1.jpeg\" alt=\"\"></p>\n<p>然后打开 Post Notifications 功能</p>\n<p><img src=\"https://cl.ly/hRCF/aliyun_2.png\" alt=\"\"></p>\n<h3 id=\"Step-4-引入阿里云SDK\"><a href=\"#Step-4-引入阿里云SDK\" class=\"headerlink\" title=\"Step.4 - 引入阿里云SDK\"></a>Step.4 - 引入阿里云SDK</h3><p>下载好压缩包打开，获得四个库文件，然后全部拖到你的项目工程里去。再然后么把 build settings 里的 Enable Bitcode 给关了。最后再转到 Build Phases 里面的 Link Binary With libraries， 加入四个依赖的系统库: libz.tbd，libresolv.tbd，CoreTelephony.framework，SystemConfiguration.framework 。</p>\n<hr>\n<p>好啦，到此基本上所有的准备工作都做好了。接下来我们就可以开始写代码了。P.S. <del>其实上面的都可以在阿里云文档里看到，哥只是拿来凑字的</del>～～</p>\n<h2 id=\"Core-Work\"><a href=\"#Core-Work\" class=\"headerlink\" title=\"Core Work\"></a>Core Work</h2><h3 id=\"Step-1-桥接\"><a href=\"#Step-1-桥接\" class=\"headerlink\" title=\"Step.1 - 桥接\"></a>Step.1 - 桥接</h3><p>先建立一个 Header File，命名为 YourProjectName-Bridging-Header.h 。 </p>\n<p><img src=\"https://cl.ly/hRGV/aliyun_3.jpeg\" alt=\"\"></p>\n<p>然后呢去到 Build Setting里，找到 Objective-C Bridging Header 填入刚才的文件名</p>\n<p><img src=\"https://cl.ly/hRAR/aliyun_4.jpeg\" alt=\"\"></p>\n<p>最后在刚才的桥接文件里，引入阿里云推送的库<code>#import &lt;CloudPushSDK/CloudPushSDK.h&gt;</code>, 这样就可以用SDK里的方法了。</p>\n<h3 id=\"Step-2-配置推送\"><a href=\"#Step-2-配置推送\" class=\"headerlink\" title=\"Step.2 - 配置推送\"></a>Step.2 - 配置推送</h3><p>先在APP启动时调用配置方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">let aliyunpush_AppKey = &quot;23448723&quot;</div><div class=\"line\">let aliyunpush_AppSecret = &quot;8085ed1d1fc7739e9e058d2ad7fbb881&quot;</div><div class=\"line\">let aliyunpush_messageNoti = &quot;CCPDidReceiveMessageNotification&quot;</div><div class=\"line\"></div><div class=\"line\">@UIApplicationMain</div><div class=\"line\">class AppDelegate: UIResponder, UIApplicationDelegate &#123;</div><div class=\"line\"></div><div class=\"line\">    var window: UIWindow?</div><div class=\"line\"></div><div class=\"line\">    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&gt; Bool &#123;</div><div class=\"line\">        // Override point for customization after application launch.</div><div class=\"line\">        </div><div class=\"line\">        //init aliyun Push SDK</div><div class=\"line\">        initCloudPush(application: application)</div><div class=\"line\">        </div><div class=\"line\">        //feedback to aliyun server</div><div class=\"line\">        CloudPushSDK.handleLaunching(launchOptions)</div><div class=\"line\">        </div><div class=\"line\">        return true</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>配置推送注册方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">func initCloudPush(application : UIApplication) &#123;</div><div class=\"line\"></div><div class=\"line\">        CloudPushSDK.asyncInit(aliyunpush_AppKey, appSecret: aliyunpush_AppSecret) &#123; (res) in</div><div class=\"line\">            if (res?.success)! &#123;</div><div class=\"line\">                print(&quot;Push SDK init success, deviceID: \\(CloudPushSDK.getDeviceId())&quot;)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                print(&quot;Push SDK init failed, error: \\(res?.error?.localizedDescription)&quot;)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        //register APNS to fetch deviceToken</div><div class=\"line\">        let settings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)</div><div class=\"line\"></div><div class=\"line\">        if #available(iOS 8.0, *) &#123;</div><div class=\"line\">            </div><div class=\"line\">            //iOS 8 notifications</div><div class=\"line\">            </div><div class=\"line\">            application.registerUserNotificationSettings(settings)</div><div class=\"line\">            application.registerForRemoteNotifications()</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            </div><div class=\"line\">            //iOS &lt; 8 Notifications</div><div class=\"line\">            UIApplication.shared.registerUserNotificationSettings(settings)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        registerMessageReceive()</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    //APNS register success</div><div class=\"line\">    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) &#123;</div><div class=\"line\">        CloudPushSDK.registerDevice(deviceToken as Data!) &#123; (res) in</div><div class=\"line\">            if (res?.success)!&#123;</div><div class=\"line\">                print(&quot;Register deviceToken success&quot;)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                print(&quot;Register deviceToken failed, error:\\(res?.error?.localizedDescription)&quot;)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    //APNS register failed</div><div class=\"line\">    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) &#123;</div><div class=\"line\">        print(&quot;did fail to register for remote notification with error : \\(error.localizedDescription)&quot;)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>推送处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Observer remote Notifications - Background Mode &amp; Inactive Mode</div><div class=\"line\">   func registerMessageReceive()   &#123;</div><div class=\"line\">       NotificationCenter.default.addObserver(self, selector: Selector((&quot;onMessageReceived&quot;)), name: NSNotification.Name(rawValue: aliyunpush_messageNoti), object: nil)</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   //Handle remote Notifications - Background Mode &amp; Inactive Mode</div><div class=\"line\">   func onMessageReceived(notification: NSNotification)  &#123;</div><div class=\"line\">       let message : CCPSysMessage = notification.object as! CCPSysMessage</div><div class=\"line\">       let title : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!</div><div class=\"line\">       let body : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!</div><div class=\"line\">       print(&quot;Received Message title: \\(title), content:\\(body)&quot;)</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   //Observer &amp; Handle remote Notifications - Foreground Mode</div><div class=\"line\">   func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) &#123;</div><div class=\"line\">       print(&quot;REceive one notification.&quot;)</div><div class=\"line\">       </div><div class=\"line\">       //retreive APNS content</div><div class=\"line\">       </div><div class=\"line\">       let aps_dic : NSDictionary = userInfo[&quot;aps&quot;] as! NSDictionary</div><div class=\"line\">       </div><div class=\"line\">       //content</div><div class=\"line\">       let content = aps_dic.value(forKey: &quot;alert&quot;)</div><div class=\"line\">       </div><div class=\"line\">       //barge num</div><div class=\"line\">       let badge = (aps_dic.value(forKey: &quot;badge&quot;) as AnyObject).integerValue</div><div class=\"line\">       </div><div class=\"line\">       //sound</div><div class=\"line\">       let sound = aps_dic.value(forKey: &quot;sound&quot;)</div><div class=\"line\">       </div><div class=\"line\">       //extras</div><div class=\"line\">       let extras = aps_dic.value(forKey: &quot;Extras&quot;)</div><div class=\"line\">       </div><div class=\"line\">       print(&quot;content: \\(content)\\n, badge:\\(badge)\\n, sound :\\(sound)\\n, Extras: \\(extras)&quot;)</div><div class=\"line\">       </div><div class=\"line\">       application.applicationIconBadgeNumber = 0</div><div class=\"line\">       </div><div class=\"line\">       CloudPushSDK.handleReceiveRemoteNotification(userInfo)</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>最后运行程序，看到如下结果就可以去交任务啦。</p>\n<p><img src=\"https://cl.ly/hQrt/aliyun_8.png\" alt=\"\"></p>\n<p>完结，鼓掌，撒花～～</p>\n<p><img src=\"https://cl.ly/hQsX/PrettyGood.png\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\" target=\"_blank\" rel=\"external\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/01/swift-APNS-aliyun/\">https://millionaryearl.github.io/2016/09/01/swift-APNS-aliyun/</a></p>\n","excerpt":"<p>新项目里的消息推送功能，公司技术部开会讨论后决定让 极光，百度，aws都歇菜，取而代之的是尝试 使用阿里云推送SDK。所以今天就简单记录下调试过程。<br><strong><em>新任务获得：使用阿里云推送SDK实现消息推送功能～</em></strong></p>","more":"<p>嗯常规套路先看官方文档 <a href=\"https://help.aliyun.com/document_detail/30072.html?spm=5176.doc30071.6.156.YoX0P8\">正面上我</a> 。 嗯，很详细，很耐斯，很桥豆麻袋？库文件是OC写的？？？</p>\n<p><img src=\"https://cl.ly/hRAS/ExcuseMe.jpeg\" alt=\"\"></p>\n<p>坑爹啊，哥的项目都是swift写的啊。呃。。。。。。。。。好吧，也许加一个桥接就可以了。任务变更：桥接阿里云推送SDK（OC版）到Swift工程里，而后实现消息推送功能～</p>\n<p><img src=\"https://cl.ly/hREs/challenge-accepted-meme.jpg\" alt=\"\"></p>\n<h2 id=\"Ready-to-work\"><a href=\"#Ready-to-work\" class=\"headerlink\" title=\"Ready to work\"></a>Ready to work</h2><p>所谓工欲善其事，必先利其器。而且消息推送功能本身就是配置打过逻辑代码的功能，所以我们先要把准备工作做好。</p>\n<hr>\n<h3 id=\"Step-1-准备certificate文件\"><a href=\"#Step-1-准备certificate文件\" class=\"headerlink\" title=\"Step.1 - 准备certificate文件\"></a>Step.1 - 准备certificate文件</h3><p>由于消息推送功能的实现，涉及到Apple的官方资源（感兴趣的同志们可以自行去谷歌APNS），所以需要准备特别的证书文件：<strong><em>development certificate x1</em></strong>， <strong><em>distribution certificate x1</em></strong>。然后这两个文件具体怎么获得呢，请 <a href=\"https://help.aliyun.com/document_detail/30071.html?spm=5176.doc30072.6.155.ItR8Ib\">正面上我</a> 。</p>\n<h3 id=\"Step-2-获得AppKey-AppSecret\"><a href=\"#Step-2-获得AppKey-AppSecret\" class=\"headerlink\" title=\"Step.2 - 获得AppKey, AppSecret\"></a>Step.2 - 获得AppKey, AppSecret</h3><p>这个appkey 和appsecret 是做啥的呢，嗯简单说就是这两个字串是阿里云用来标记你的app的，万一推错了就不好嘛，稍后我们会用点。那么问题又来了这两个字串那里搞呢？</p>\n<p>支线任务获得：寻找NPC -公司的推送服务后台开发人员，交付 <strong><em>development certificate x1</em></strong>， <strong><em>distribution certificate x1</em></strong>后，获得 <strong><em>AppKey x1</em></strong>, <strong><em>AppSecret x1</em></strong>.</p>\n<h3 id=\"Step-3-配置App\"><a href=\"#Step-3-配置App\" class=\"headerlink\" title=\"Step.3 - 配置App\"></a>Step.3 - 配置App</h3><p>配置App这个就简单了，打开你的项目代码。先把开发团队调到你们的公司</p>\n<p><img src=\"https://cl.ly/hQyC/aliyun_1.jpeg\" alt=\"\"></p>\n<p>然后打开 Post Notifications 功能</p>\n<p><img src=\"https://cl.ly/hRCF/aliyun_2.png\" alt=\"\"></p>\n<h3 id=\"Step-4-引入阿里云SDK\"><a href=\"#Step-4-引入阿里云SDK\" class=\"headerlink\" title=\"Step.4 - 引入阿里云SDK\"></a>Step.4 - 引入阿里云SDK</h3><p>下载好压缩包打开，获得四个库文件，然后全部拖到你的项目工程里去。再然后么把 build settings 里的 Enable Bitcode 给关了。最后再转到 Build Phases 里面的 Link Binary With libraries， 加入四个依赖的系统库: libz.tbd，libresolv.tbd，CoreTelephony.framework，SystemConfiguration.framework 。</p>\n<hr>\n<p>好啦，到此基本上所有的准备工作都做好了。接下来我们就可以开始写代码了。P.S. <del>其实上面的都可以在阿里云文档里看到，哥只是拿来凑字的</del>～～</p>\n<h2 id=\"Core-Work\"><a href=\"#Core-Work\" class=\"headerlink\" title=\"Core Work\"></a>Core Work</h2><h3 id=\"Step-1-桥接\"><a href=\"#Step-1-桥接\" class=\"headerlink\" title=\"Step.1 - 桥接\"></a>Step.1 - 桥接</h3><p>先建立一个 Header File，命名为 YourProjectName-Bridging-Header.h 。 </p>\n<p><img src=\"https://cl.ly/hRGV/aliyun_3.jpeg\" alt=\"\"></p>\n<p>然后呢去到 Build Setting里，找到 Objective-C Bridging Header 填入刚才的文件名</p>\n<p><img src=\"https://cl.ly/hRAR/aliyun_4.jpeg\" alt=\"\"></p>\n<p>最后在刚才的桥接文件里，引入阿里云推送的库<code>#import &lt;CloudPushSDK/CloudPushSDK.h&gt;</code>, 这样就可以用SDK里的方法了。</p>\n<h3 id=\"Step-2-配置推送\"><a href=\"#Step-2-配置推送\" class=\"headerlink\" title=\"Step.2 - 配置推送\"></a>Step.2 - 配置推送</h3><p>先在APP启动时调用配置方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">let aliyunpush_AppKey = &quot;23448723&quot;</div><div class=\"line\">let aliyunpush_AppSecret = &quot;8085ed1d1fc7739e9e058d2ad7fbb881&quot;</div><div class=\"line\">let aliyunpush_messageNoti = &quot;CCPDidReceiveMessageNotification&quot;</div><div class=\"line\"></div><div class=\"line\">@UIApplicationMain</div><div class=\"line\">class AppDelegate: UIResponder, UIApplicationDelegate &#123;</div><div class=\"line\"></div><div class=\"line\">    var window: UIWindow?</div><div class=\"line\"></div><div class=\"line\">    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&gt; Bool &#123;</div><div class=\"line\">        // Override point for customization after application launch.</div><div class=\"line\">        </div><div class=\"line\">        //init aliyun Push SDK</div><div class=\"line\">        initCloudPush(application: application)</div><div class=\"line\">        </div><div class=\"line\">        //feedback to aliyun server</div><div class=\"line\">        CloudPushSDK.handleLaunching(launchOptions)</div><div class=\"line\">        </div><div class=\"line\">        return true</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>配置推送注册方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">func initCloudPush(application : UIApplication) &#123;</div><div class=\"line\"></div><div class=\"line\">        CloudPushSDK.asyncInit(aliyunpush_AppKey, appSecret: aliyunpush_AppSecret) &#123; (res) in</div><div class=\"line\">            if (res?.success)! &#123;</div><div class=\"line\">                print(&quot;Push SDK init success, deviceID: \\(CloudPushSDK.getDeviceId())&quot;)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                print(&quot;Push SDK init failed, error: \\(res?.error?.localizedDescription)&quot;)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        //register APNS to fetch deviceToken</div><div class=\"line\">        let settings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)</div><div class=\"line\"></div><div class=\"line\">        if #available(iOS 8.0, *) &#123;</div><div class=\"line\">            </div><div class=\"line\">            //iOS 8 notifications</div><div class=\"line\">            </div><div class=\"line\">            application.registerUserNotificationSettings(settings)</div><div class=\"line\">            application.registerForRemoteNotifications()</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            </div><div class=\"line\">            //iOS &lt; 8 Notifications</div><div class=\"line\">            UIApplication.shared.registerUserNotificationSettings(settings)</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        registerMessageReceive()</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    //APNS register success</div><div class=\"line\">    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) &#123;</div><div class=\"line\">        CloudPushSDK.registerDevice(deviceToken as Data!) &#123; (res) in</div><div class=\"line\">            if (res?.success)!&#123;</div><div class=\"line\">                print(&quot;Register deviceToken success&quot;)</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                print(&quot;Register deviceToken failed, error:\\(res?.error?.localizedDescription)&quot;)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    //APNS register failed</div><div class=\"line\">    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) &#123;</div><div class=\"line\">        print(&quot;did fail to register for remote notification with error : \\(error.localizedDescription)&quot;)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>推送处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Observer remote Notifications - Background Mode &amp; Inactive Mode</div><div class=\"line\">   func registerMessageReceive()   &#123;</div><div class=\"line\">       NotificationCenter.default.addObserver(self, selector: Selector((&quot;onMessageReceived&quot;)), name: NSNotification.Name(rawValue: aliyunpush_messageNoti), object: nil)</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   //Handle remote Notifications - Background Mode &amp; Inactive Mode</div><div class=\"line\">   func onMessageReceived(notification: NSNotification)  &#123;</div><div class=\"line\">       let message : CCPSysMessage = notification.object as! CCPSysMessage</div><div class=\"line\">       let title : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!</div><div class=\"line\">       let body : NSString = NSString(data: message.title, encoding: String.Encoding.utf8.rawValue)!</div><div class=\"line\">       print(&quot;Received Message title: \\(title), content:\\(body)&quot;)</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   //Observer &amp; Handle remote Notifications - Foreground Mode</div><div class=\"line\">   func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) &#123;</div><div class=\"line\">       print(&quot;REceive one notification.&quot;)</div><div class=\"line\">       </div><div class=\"line\">       //retreive APNS content</div><div class=\"line\">       </div><div class=\"line\">       let aps_dic : NSDictionary = userInfo[&quot;aps&quot;] as! NSDictionary</div><div class=\"line\">       </div><div class=\"line\">       //content</div><div class=\"line\">       let content = aps_dic.value(forKey: &quot;alert&quot;)</div><div class=\"line\">       </div><div class=\"line\">       //barge num</div><div class=\"line\">       let badge = (aps_dic.value(forKey: &quot;badge&quot;) as AnyObject).integerValue</div><div class=\"line\">       </div><div class=\"line\">       //sound</div><div class=\"line\">       let sound = aps_dic.value(forKey: &quot;sound&quot;)</div><div class=\"line\">       </div><div class=\"line\">       //extras</div><div class=\"line\">       let extras = aps_dic.value(forKey: &quot;Extras&quot;)</div><div class=\"line\">       </div><div class=\"line\">       print(&quot;content: \\(content)\\n, badge:\\(badge)\\n, sound :\\(sound)\\n, Extras: \\(extras)&quot;)</div><div class=\"line\">       </div><div class=\"line\">       application.applicationIconBadgeNumber = 0</div><div class=\"line\">       </div><div class=\"line\">       CloudPushSDK.handleReceiveRemoteNotification(userInfo)</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>最后运行程序，看到如下结果就可以去交任务啦。</p>\n<p><img src=\"https://cl.ly/hQrt/aliyun_8.png\" alt=\"\"></p>\n<p>完结，鼓掌，撒花～～</p>\n<p><img src=\"https://cl.ly/hQsX/PrettyGood.png\" alt=\"\"></p>\n<hr>\n<p>This artical is avaliable under <a href=\"http://wtfpl2.com\">WTFPL-V2</a>. Generally, everyone is permitted to copy and do what the fuck you want to.<br>P.S. Even so said, your kindly declaration that inspired from this site - <a href=\"https://millionaryearl.github.io\">Chen’s Alchemy</a> would be appreciated</p>\n<hr>\n<p>本文链接：<a href=\"https://millionaryearl.github.io/2016/09/01/swift-APNS-aliyun/\">https://millionaryearl.github.io/2016/09/01/swift-APNS-aliyun/</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciu3phvlt0007xy2ypx0uk1ys","category_id":"ciu3phvln0004xy2y8sj7e0yz","_id":"ciu3phvm1000dxy2y2wqjcmw5"},{"post_id":"ciu3phvlb0000xy2yojh8myph","category_id":"ciu3phvln0004xy2y8sj7e0yz","_id":"ciu3phvm6000ixy2yre5hln5b"},{"post_id":"ciu3phvli0002xy2ywknicisy","category_id":"ciu3phvln0004xy2y8sj7e0yz","_id":"ciu3phvm7000kxy2yu5ndqtd2"},{"post_id":"ciu3phvlr0006xy2y0sepn7q9","category_id":"ciu3phvln0004xy2y8sj7e0yz","_id":"ciu3phvm9000oxy2yx2ad4mo4"},{"post_id":"ciu3phvlv0008xy2yfb7olhyo","category_id":"ciu3phvm7000lxy2ymumubog9","_id":"ciu3phvmf000sxy2yfm8h6jz7"},{"post_id":"ciu3phvm0000cxy2yiz0otroq","category_id":"ciu3phvm7000lxy2ymumubog9","_id":"ciu3phvmh000wxy2y72omdvrf"},{"post_id":"ciu3phvm2000fxy2y5w83c40q","category_id":"ciu3phvmf000txy2y4e9rj1qc","_id":"ciu3phvmj000yxy2yjx19dmeg"}],"PostTag":[{"post_id":"ciu3phvlt0007xy2ypx0uk1ys","tag_id":"ciu3phvlr0005xy2y3fmb9a9a","_id":"ciu3phvm0000bxy2yj51vx5gc"},{"post_id":"ciu3phvlb0000xy2yojh8myph","tag_id":"ciu3phvlr0005xy2y3fmb9a9a","_id":"ciu3phvm1000exy2ytn50r22e"},{"post_id":"ciu3phvli0002xy2ywknicisy","tag_id":"ciu3phvlr0005xy2y3fmb9a9a","_id":"ciu3phvm6000jxy2y5i61cel9"},{"post_id":"ciu3phvlr0006xy2y0sepn7q9","tag_id":"ciu3phvlr0005xy2y3fmb9a9a","_id":"ciu3phvm8000nxy2y32e2r3ct"},{"post_id":"ciu3phvlv0008xy2yfb7olhyo","tag_id":"ciu3phvm8000mxy2yo4ym2cmd","_id":"ciu3phvmc000rxy2y5x9gxlsb"},{"post_id":"ciu3phvm0000cxy2yiz0otroq","tag_id":"ciu3phvm8000mxy2yo4ym2cmd","_id":"ciu3phvmg000vxy2ywtgh3unm"},{"post_id":"ciu3phvm2000fxy2y5w83c40q","tag_id":"ciu3phvmg000uxy2y9prlg633","_id":"ciu3phvmh000xxy2y95ofn6jq"}],"Tag":[{"name":"Hexo","_id":"ciu3phvlr0005xy2y3fmb9a9a"},{"name":"Python","_id":"ciu3phvm8000mxy2yo4ym2cmd"},{"name":"Swift","_id":"ciu3phvmg000uxy2y9prlg633"}]}}